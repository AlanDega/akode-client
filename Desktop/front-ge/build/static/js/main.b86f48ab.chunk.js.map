{"version":3,"sources":["assets/img/theme/team-4-800x800.jpg","assets/img/brand/logo.png","apollo/server.js","translations/en.js","translations/de.js","translations/fr.js","translations/km.js","translations/zh.js","i18n.js","config/config.js","components/Navbars/AdminNavbar.jsx","components/Footers/AdminFooter.jsx","components/Sidebar/Sidebar.jsx","constraints/constraints.js","views/Login.jsx","components/Category/Category.jsx","components/Headers/Header.jsx","views/Category.jsx","components/Option/Option.jsx","components/Addon/Addon.jsx","components/Food/Food.jsx","utils/stringManipulations.js","views/Food.jsx","components/Order/Order.jsx","views/Orders.jsx","components/Configuration/Order/Order.jsx","components/Configuration/Email/Email.jsx","components/Configuration/Paypal/Paypal.jsx","components/Configuration/Stripe/Stripe.jsx","components/Configuration/Delivery/Delivery.jsx","config/currencies.js","components/Configuration/Currency/Currency.jsx","views/Configuration.jsx","views/Users.jsx","views/ForgotPassword.jsx","components/Rider/Rider.jsx","views/Riders.jsx","views/Options.jsx","views/Addons.jsx","views/Dashboard.jsx","routes.js","layouts/Admin.jsx","components/Navbars/AuthNavbar.jsx","components/Footers/AuthFooter.jsx","layouts/Auth.jsx","views/PrivateRoute.jsx","app.js","index.js"],"names":["module","exports","__webpack_require__","p","getFoods","getCategories","getOrders","getConfiguration","getRiders","getAvailableRiders","getOptions","getAddons","en","translation","Sign in credentials","Sign in","Add Category","Title","Description","Add","Remove","Add/Remove","Success","Danger","Categories","Image","Header","Loading","Error","Edit","Delete","Edit Category","Save","OrderID prefix","Order","Email","Password","Enable","Disable","Enable/Disable","Saving","Paypal","Client ID","Client Secret","Sandbox","Publishable Key","Secret Key","Delivery Charges","Price","Add Food","Category","Select","Variations","Type","Food Image","Foods","Actions","Edit Food","OrderID","Orders","Name","Items","Payment","Status","Review","Mark as","Users","Phone","Address","2019","About Us","Blog","Welcome","Logout","Dashboard","Configuration","Login","Food","Character limit of max length 50","Character limit of max length 15","Character limit of max length 60","Character limit of max length 20","Character limit of max length 140","Currency","Currency Code","Currency Symbol","de","fr","km","zh","i18n","use","initReactI18next","init","resources","lng","localStorage","getItem","fallbackLng","debug","interpolation","escapeValue","cloudinary_upload_url","cloudinary_category","cloudinary_food","cloudinary_profile","AdminNavbar","_this","this","t","props","react_default","a","createElement","Fragment","Navbar","className","expand","id","Container","fluid","Link","to","brandText","Nav","navbar","UncontrolledDropdown","nav","DropdownToggle","Media","alt","src","require","DropdownMenu","right","DropdownItem","header","tag","divider","href","onClick","e","preventDefault","removeItem","history","push","React","Component","withTranslation","Footer","Row","Col","xl","rel","target","NavItem","NavLink","Sidebar","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","collapseOpen","toggleCollapse","setState","closeCollapse","createLinks","routes","map","prop","key","appearInSidebar","layout","path","NavLinkRRD","activeClassName","icon","name","activeRoute","bind","assertThisInitialized","routeName","location","pathname","indexOf","navbarBrandProps","_this2","_this$props","bgColor","logo","innerLink","outterLink","type","NavbarBrand","assign","imgAlt","imgSrc","Collapse","isOpen","xs","defaultProps","constraints","confirmPassword","presence","equality","length","minimum","maximum","prefix","email","password","title","description","category_title","category_description","category","price","numericality","greaterThan","mongoUrl","url","scheme","currencyCode","currencySymbol","reason","optionTitle","optionDescription","optionPrice","greaterThanOrEqualTo","addonTitle","addonDescription","addonQuantityMinimum","addonQuantityMaximum","validateFunc","value","constraint","validate","defineProperty","LOGIN","gql","_templateObject","onBlur","event","field","emailError","passwordError","error","redirectToReferrer","from","Redirect","lg","md","Card","CardHeader","CardBody","Form","role","FormGroup","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","onChange","placeholder","react_apollo_esm","mutation","onCompleted","data","setItem","JSON","stringify","adminLogin","onError","networkError","result","errors","message","_ref2","loading","Button","color","variables","objectSpread","UncontrolledAlert","fade","CREATE_CATEGORY","Category_templateObject","EDIT_CATEGORY","_templateObject2","filterImage","images","i","files","item","filter","image","match","undefined","selectImage","imageToBase64","onSubmitValidaiton","form","titleError","descriptionError","clearFields","imgMenu","successMessage","errorMessage","setTimeout","hideMessage","imgUrl","fileReader","FileReader","onloadend","readAsDataURL","uploadImageToCloudinary","asyncToGenerator","regenerator_default","mark","_callee","apiUrl","imageData","wrap","_context","prev","next","abrupt","img_menu","file","upload_preset","fetch","body","headers","content-type","method","sent","json","secure_url","t0","console","log","stop","htmlFor","maxLength","style","width","height","refetchQueries","mutate","_ref3","_callee2","_context2","t1","_id","t2","t3","t4","t5","t6","_x","apply","arguments","size","GET_CATEGORIES","views_Category_templateObject","DELETE_CATEGORY","Category_templateObject2","GET_FOODS","_templateObject3","toggleModal","editModal","Headers_Header","components_Category_Category","Table","responsive","scope","query","_ref","categories","deleteCategory","Modal","toggle","CREATE_OPTIONS","Option_templateObject","GET_OPTIONS","Option_templateObject2","EDIT_OPTION","Option_templateObject3","Option","index","options","onAdd","splice","onRemove","option","priceError","createOptions","editOption","success","update","proxy","readQuery","concat","writeQuery","updateOptions","onDismiss","min","_ref4","disabled","optionInput","_ref5","Alert","compose","withApollo","Addon_templateObject","CREATE_ADDONS","Addon_templateObject2","GET_ADDONS","Addon_templateObject3","EDIT_ADDON","_templateObject4","Addon","onChangeOption","addons","onSelectOption","ids","addonIndex","quantity_minimum","quantity_maximum","optionsModal","addon","quantity_minimumError","quantity_maximumError","optionsError","createAddons","editAddon","updateAddonsList","maxHeight","overflowY","check","marginTop","Label","checked","includes","offset","_ref6","block","addonInput","_ref7","components_Option_Option","CREATE_FOOD","Food_templateObject","EDIT_FOOD","Food_templateObject2","Food_templateObject3","Food_templateObject4","_templateObject5","handleChange","variations","handleVariationChange","toUpperCase","categoryError","variation","v","variationsError","onBlurVariation","food","varitionIndex","addonsModal","onSelectAddon","createFood","foods","img_url","minLength","autoComplete","indexAddon","_ref8","t7","t8","foodInput","t9","components_Addon_Addon","transformToNewline","input","spaces","space_count","splitted_desc","split","join","views_Food_templateObject","DELETE_FOOD","views_Food_templateObject2","components_Food_Food","whiteSpace","deleteFood","UPDATE_STATUS","Order_templateObject","GET_RIDERS","Order_templateObject2","ASSIGN_RIDER","Order_templateObject3","GET_ORDER_STATUSES","Order_templateObject4","GET_PAYMENT_STATUSES","Order_templateObject5","UPDATE_ORDER_STATUS","_templateObject6","UPDATE_PAYMENT_STATUS","_templateObject7","GET_CONFIGURATION","_templateObject8","componentDidMount","validateReason","reasonError","updateStatus","assignRider","updateOrderStatus","updatePaymentStatus","status","rider","order_status","payment_status","paid_amount","onChangeRider","selectedRider","validateRider","validateStatus","selectedStatus","validatePaymentStatus","selectedPaymentStatus","onChangeStatus","onChangePaymentStatus","order","customerCollapse","orderCollapse","order_id","mutateStatus","marginLeft","defaultValue","availableRiders","riderId","readOnly","getOrderStatuses","getPaymentStatuses","marginBottom","user","phone","delivery_address","_ref9","ListGroup","items","ListGroupItem","Badge","fontSize","backgroundColor","pill","quantity","float","configuration","currency_symbol","toFixed","caret","order_amount","delivery_charges","payment_method","GET_ORDERS","Orders_templateObject","PAGECOUNT","Orders_templateObject2","getItems","ChangePage","page","pageCount","detailsModal","client","pollInterval","allOrders","Date","createdAt","toLocaleString","replace","CardFooter","Pagination","flexWrap","aria-label","PaginationItem","PaginationLink","previous","Array","fill","val","components_Order_Order","SAVE_ORDER_CONFIGURATION","Order_Order_templateObject","trim","validateInput","prefixError","saveConfiguration","configurationInput","order_id_prefix","SAVE_EMAIL_CONFIGURATION","Email_templateObject","emailResult","passwordResult","enableEmail","enabled","defaultChecked","enable_email","SAVE_PAYPAL_CONFIGURATION","Paypal_templateObject","clientIdResult","clientSecretResult","clientId","clientSecret","clientIdError","clientSecretError","sandbox","client_id","client_secret","SAVE_STRIPE_CONFIGURATION","Stripe_templateObject","Stripe","publishableKeyResult","secretKeyResult","publishableKey","secretKey","publishableKeyError","secretKeyError","onBlurCurrency","publishable_key","secret_key","SAVE_DELIVERY_CONFIGURATION","Delivery_templateObject","Delivery","deliveryChargesError","isNaN","deliveryCharges","ref","elem","deliveryChargesRef","Number","stripeCurrencies","currency","multiplier","SAVE_CURRENCY_CONFIGURATION","Currency_templateObject","currencyCodeError","currencySymbolError","currency_codesT","currency_codes","toConsumableArray","Set","currency_symbolsT","currency_symbols","react_bootstrap_typeahead_lib","defaultSelected","onInputChange","labelKey","values","Configuration_templateObject","Configuration_Order_Order","Configuration_Email_Email","Configuration_Paypal_Paypal","Configuration_Stripe_Stripe","Configuration_Delivery_Delivery","Configuration_Currency_Currency","GET_USERS","Users_templateObject","users","RESET_PASSWORD","ForgotPassword_templateObject","ResetPassword","confirmPasswordError","resetPassword","params","URLSearchParams","search","get","token","CREATE_RIDER","Rider_templateObject","EDIT_RIDER","Rider_templateObject2","Rider_templateObject3","Rider","nameError","usernameError","username","phoneError","imageError","hideAlert","createRider","riders","graphQLErrors","available","toLowerCase","riderInput","t10","Riders_templateObject","DELETE_RIDER","Riders_templateObject2","TOGGLE_RIDER","Riders_templateObject3","GET_AVAILABLE_RIDERS","Riders_templateObject4","Riders","components_Rider_Rider","toggleRider","deleteRider","Options_templateObject","DELETE_OPTION","Options_templateObject2","deleteOption","Addons_templateObject","DELETE_ADDON","Addons_templateObject2","deleteAddon","GET_DASHBOARD_TOTAL","Dashboard_templateObject","GET_DASHBOARD_SALES","Dashboard_templateObject2","GET_DASHBOARD_ORDERS","Dashboard_templateObject3","dataLine","label","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","dataBar","borderWidth","hoverBackgroundColor","hoverBorderColor","component","intializeStartDate","d","setDate","getDate","toISOString","substr","startingDate","endingDate","toString","CardTitle","getDashboardTotal","total_orders","total_users","total_sales","max","react_chartjs_2_es","labels","getDashboardSales","orders","day","datasets","amount","getDashboardOrders","count","maintainAspectRatio","Options","Addons","Admin","getRoutes","Route","getBrandText","document","documentElement","scrollTop","scrollingElement","refs","mainContent","components_Sidebar_Sidebar","Navbars_AdminNavbar","Switch","AdminFooter","changeLanguage","UncontrolledCollapse","toggler","AuthFooter","Auth","classList","add","remove","AuthNavbar","xmlns","preserveAspectRatio","version","viewBox","x","y","points","Footers_AuthFooter","PrivateRoute","rest","objectWithoutProperties","render","App","BrowserRouter","PrivateRoute_PrivateRoute","layouts_Admin","layouts_Auth","src_templateObject","UPLOAD_TOKEN","src_templateObject2","cache","InMemoryCache","httpLink","createUploadLink","uri","ApolloClient","link","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","messaging","usePublicVapidKey","requestPermission","then","getToken","currentToken","pushToken","catch","onMessage","payload","notificationOptions","orderid","nt","Notification","onclick","window","open","close","fetchPolicy","ReactDOM","app","getElementById"],"mappings":"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","file":"static/js/main.b86f48ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/team-4-800x800.23007132.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.54c65784.png\";","export const getFoods = `query Foods{\n    foods{\n      _id\n      title\n      description\n      img_url\n      variations{\n        _id\n        title\n        price\n        addons{\n          _id\n          title\n          description\n          quantity_minimum\n          quantity_maximum\n          options{\n            _id\n            title\n            price\n          }\n        }\n      }\n      category{\n          _id\n          title\n      }\n    }\n  }`\n\nexport const createFood = `\n  mutation CreateFood($foodInput:FoodInput!){\n      createFood(\n          foodInput:$foodInput\n      ){\n        _id\n        title\n        img_url\n        description\n        variations{\n          _id\n          title\n          price\n          addons{\n            _id\n            title\n            description\n            quantity_minimum\n            quantity_maximum\n            options{\n              _id\n              title\n              price\n            }\n          }\n        }\n        category{\n          _id\n          title\n      }\n      }\n    }`\n\nexport const editFood = `\n    mutation EditFood($foodInput:FoodInput!){\n        editFood(\n            foodInput:$foodInput\n        ){\n          _id\n          title\n          img_url\n          description\n          variations{\n            _id\n            title\n            price\n            addons{\n              _id\n              title\n              description\n              quantity_minimum\n              quantity_maximum\n              options{\n                _id\n                title\n                price\n              }\n            }\n          }\n          category{\n            _id\n            title\n        }\n        }\n      }`\n\nexport const deleteFood = `\n      mutation DeleteFood($id:String!){\n        deleteFood(id:$id){\n          _id\n        }\n      }`\n\nexport const getCategories = `query Categories{categories{\n        _id\n        title\n        description\n        img_menu\n      }}`\n\n\n\nexport const createCategory = `\nmutation CreateCategory($title:String!,$description:String!,$img_menu:String){\n  createCategory(category:{title:$title,description:$description,img_menu:$img_menu}){_id}\n}`\n\n\nexport const editCategory = `\n      mutation EditCategory( $_id:String,$title:String!,$description:String!,$img_menu:String){\n        editCategory(category:{_id:$_id,title:$title,description:$description,img_menu:$img_menu}){_id}\n      }`\n\nexport const deleteCategory = `\n      mutation DeleteCategory($id:String!){\n        deleteCategory(id:$id){\n          _id\n        }\n      }`\nexport const getOrders = `query Orders($page:Int){\n  allOrders(page:$page){\n    _id\n    delivery_address\n    delivery_charges\n    order_amount\n    paid_amount\n    payment_method\n    order_id\n    user{\n      _id\n      name\n      email\n      phone\n    }\n    items{\n      _id\n      food{\n        _id\n        title\n        description\n        img_url\n      }\n      variation{\n        _id\n        title\n        price\n      }\n      addons{\n        _id\n        title\n        description\n        quantity_minimum\n        quantity_maximum\n        options{\n          _id\n          title\n          price\n        }\n      }\n      quantity\n    }\n    reason\n    status\n    payment_status\n    order_status\n    createdAt\n    review{\n      _id\n      rating\n      description\n    }\n    rider{\n      _id\n      name\n    }\n  }\n}`\n\nexport const getDashboardTotal = `query GetDashboardTotal($startingDate: String, $endingDate: String){\n  getDashboardTotal(starting_date: $startingDate, ending_date: $endingDate){\n    total_orders\n    total_users\n    total_sales\n  }\n}`\nexport const getDashboardSales = `query GetDashboardSales($startingDate: String, $endingDate: String){\n  getDashboardSales(starting_date: $startingDate, ending_date: $endingDate){\n    orders{\n      day\n      amount\n    }\n  }\n}`\nexport const getDashboardOrders = `query GetDashboardOrders($startingDate: String, $endingDate: String){\n  getDashboardOrders(starting_date: $startingDate, ending_date: $endingDate){\n    orders{\n      day\n      count\n    }\n  }\n}`\n\nexport const getDashboardData = `query GetDashboardData($startingDate: String, $endingDate: String){\n  getDashboardData(starting_date: $startingDate, ending_date: $endingDate){\n    total_orders\n    total_users\n    total_sales\n    orders{\n      day\n      count\n      amount\n    }\n  }\n}`\n\nexport const getConfiguration = `query GetConfiguration{\n  configuration{\n    _id\n    order_id_prefix\n    email\n    password\n    enable_email\n    client_id\n    client_secret\n    sandbox\n    publishable_key\n    secret_key\n    delivery_charges\n    currency\n    currency_symbol\n  }\n}`\n\nexport const saveOrderConfiguration = `mutation SaveOrderConfiguration($configurationInput:OrderConfigurationInput!){\n  saveOrderConfiguration(configurationInput:$configurationInput){\n    _id\n    order_id_prefix\n  }\n}`\nexport const saveEmailConfiguration = `mutation SaveEmailConfiguration($configurationInput:EmailConfigurationInput!){\n  saveEmailConfiguration(configurationInput:$configurationInput){\n    _id\n    email\n    password\n    enable_email\n  }\n}`\nexport const saveMongoConfiguration = `mutation SaveMongoConfiguration($configurationInput:MongoConfigurationInput!){\n  saveMongoConfiguration(configurationInput:$configurationInput){\n    _id\n    mongodb_url\n  }\n}`\n\nexport const savePaypalConfiguration = `mutation SavePaypalConfiguration($configurationInput:PaypalConfigurationInput!){\n  savePaypalConfiguration(configurationInput:$configurationInput){\n    _id\n    client_id\n    client_secret\n    sandbox\n  }\n}`\n\nexport const saveStripeConfiguration = `mutation SaveStripeConfiguration($configurationInput:StripeConfigurationInput!){\n  saveStripeConfiguration(configurationInput:$configurationInput){\n    _id\n    publishable_key\n    secret_key\n  }\n}`\nexport const saveDeliveryConfiguration = `mutation SaveDeliveryConfiguration($configurationInput:DeliveryConfigurationInput!){\n  saveDeliveryConfiguration(configurationInput:$configurationInput){\n    _id\n    delivery_charges\n  }\n}`\nexport const saveCurrencyConfiguration = `mutation SaveCurrencyConfiguration($configurationInput:CurrencyConfigurationInput!){\n  saveCurrencyConfiguration(configurationInput:$configurationInput){\n    _id\n    currency\n    currency_symbol\n  }\n}`\n\nexport const adminLogin = `mutation AdminLogin($email:String!,$password:String!){\n  adminLogin(email:$email,password:$password){\n    userId\n    token\n    name\n    email\n  }\n}`\n\nexport const updateOrderStatus = `mutation UpdateOrderStatus($id:String!,$status:String!){\n  updateOrderStatus(id:$id,status:$status){\n    _id\n    order_status\n  }\n}\n`\nexport const updateStatus = `mutation UpdateStatus($id:String!,$status:Boolean!,$reason:String){\n  updateStatus(id:$id,status:$status,reason:$reason){\n    _id\n    status\n    reason\n  }\n}\n`\n\nexport const uploadToken = `mutation UploadToken($pushToken:String!){\n  uploadToken(pushToken:$pushToken){\n    _id\n    push_token\n  }\n}`\n\nexport const getUsers = `query{\n  users{\n    _id\n    name\n    email\n    phone\n    location{\n      longitude\n      latitude\n      delivery_address\n    }\n  }\n}`\n\n\nexport const resetPassword = `mutation ResetPassword($password:String!,$token:String!){\n  resetPassword(password:$password,token:$token){\n    result\n  }\n}`\n\nexport const createRider = `\nmutation CreateRider($riderInput:RiderInput!){\n    createRider(\n        riderInput:$riderInput\n    ){\n    _id\n    name\n    username\n    password\n    phone\n    image\n    available\n    }\n  }`\n\nexport const getRiders = `query{\n  riders{\n    _id\n    name\n    username\n    password\n    phone\n    image\n    available\n  }\n}`\n\nexport const getAvailableRiders = `query{\n  availableRiders{\n    _id\n    name\n    username\n    phone\n    image\n    available\n  }\n}`\n\nexport const editRider = `\n    mutation EditRider($riderInput:RiderInput!){\n        editRider(\n          riderInput:$riderInput\n        ){\n          _id\n          name\n          username\n          phone\n          image\n        }\n      }`\nexport const deleteRider = `\n      mutation DeleteRider($id:String!){\n        deleteRider(id:$id){\n          _id\n        }\n      }`\n\nexport const toggleAvailablity = `\n      mutation ToggleRider($id:String){\n        toggleAvailablity(id:$id){\n          _id\n        }\n}`\n\nexport const pageCount = `\nquery{\n  pageCount\n}\n`\n\nexport const assignRider = ` mutation AssignRider($id:String!,$riderId:String!){\n  assignRider(id:$id,riderId:$riderId){\n    _id\n    rider{\n      _id\n      name\n    }\n  }\n}`\n\nexport const getOrderStatuses = `query{\n  getOrderStatuses\n}\n`\n\nexport const getPaymentStatuses = `query{\n  getPaymentStatuses\n}`\n\nexport const updatePaymentStatus = `mutation UpdatePaymentStatus($id:String!,$status:String!){\n  updatePaymentStatus(id:$id,status:$status){\n    _id\n    payment_status\n    paid_amount\n  }\n}\n`\n\nexport const createOptions = `mutation CreateOptions($optionInput:[OptionInput]){\n  createOptions(optionInput:$optionInput){\n    _id\n    title\n    description\n    price\n  }\n}`\n\nexport const getOptions = `query Options{\n  options {\n    _id\n    title\n    description\n    price\n  }\n}\n`\n\nexport const createAddons = `mutation CreateAddons($addonInput:[AddonInput]){\n  createAddons(addonInput:$addonInput){\n    _id\n    title\n    description\n    options{\n      _id\n      title\n      description\n      price\n    }\n    quantity_minimum\n    quantity_maximum\n  }\n}`\nexport const editAddon = `mutation editAddon($addonInput:AddonInput){\n  editAddon(addonInput:$addonInput){\n    _id\n    title\n    description\n    options{\n      _id\n      title\n      description\n      price\n    }\n    quantity_minimum\n    quantity_maximum\n  }\n}`\n\nexport const getAddons = `query Addons{\n  addons{\n  _id\n  title\n  description\n  options{\n    _id\n    title\n    description\n    price\n  }\n  quantity_minimum\n  quantity_maximum\n}}`\n\nexport const deleteAddon = `\n      mutation DeleteAddon($id:String!){\n        deleteAddon(id:$id)\n      }`\n\nexport const deleteOption = `\n      mutation DeleteOption($id:String!){\n        deleteOption(id:$id)\n      }`\nexport const editOption = `mutation editOption($optionInput:OptionInput){\n  editOption(optionInput:$optionInput){\n          _id\n          title\n          description\n          price\n        }\n      }`","const en = {\n    translation: {\n        \"Sign in credentials\": \"Registrar Credenciales\",\n        \"Sign in\": \"Registrarse\",\n        \"Add Category\": \"Agregar Categoría\",\n        \"Title\": \"Título\",\n        \"Description\": \"Descripción\",\n        \"Add\": \"Agregar\",\n        \"Remove\": \"Eliminar\",\n        \"Add/Remove\": \"Agregar/Eliminar\",\n        \"Success\": \"Exito\",\n        \"Danger\": \"Peligro\",\n        \"Categories\": \"Categorías'\",\n        \"Image\": \"Imagen\",\n        \"Header\": \"Encabezado\",\n        \"Loading\": \"Cargando\",\n        \"Error\": \"Error\",\n        \"Edit\": \"Editar\",\n        \"Delete\": \"Eliminar\",\n        \"Edit Category\": \"Editar Categoría\",\n        \"Save\": \"Guardar\",\n        \"OrderID prefix\": \"OrdenID prefijo\",\n        \"Order\": \"Orden\",\n        \"Email\": \"Email\",\n        \"Password\": \"Contraseña\",\n        \"Enable\": \"Habilitar\",\n        \"Disable\": \"Deshabilitar\",\n        \"Enable/Disable\": \"Habilitar/Deshabilitar\",\n        \"Saving\": \"Guardando\",\n        \"Paypal\": \"Paypal\",\n        \"Client ID\": \"Cliente ID\",\n        \"Client Secret\": \"Clave secreta de Cliente\",\n        \"Sandbox\": \"Sandbox\",\n        \"Publishable Key\": \"Clave Publicable\",\n        \"Secret Key\": \"Clave Secreta\",\n        \"Delivery Charges\": \"Cargo/Costos de Entrega\",\n        \"Price\": \"Precio\",\n        \"Add Food\": \"Agregar Platillo\",\n        \"Category\": \"Categoría\",\n        \"Select\": \"Seleccionar\",\n        \"Variations\": \"Variaciones\",\n        \"Type\": \"Tipo\",\n        \"Food Image\": \"Imagen de Platillo\",\n        \"Foods\": \"Platillos\",\n        \"Actions\": \"Acciones\",\n        \"Edit Food\": \"Editar Platillo\",\n        \"OrderID\": \"OrdenID\",\n        \"Orders\": \"Ordenes\",\n        \"Name\": \"Nombre\",\n        \"Items\": \"Items\",\n        \"Payment\": \"Pago\",\n        \"Status\": \"Status\",\n        \"Review\": \"Revisión\",\n        \"Mark as\": \"Marcar como\",\n        \"Users\": \"Usuarios\",\n        \"Phone\": \"Teléfono\",\n        \"Address\": \"Dirección\",\n        \"2019\": \"2019\",\n        \"About Us\": \"Acerca de Nosotros\",\n        \"Blog\": \"Blog\",\n        \"Welcome\": \"Bienvenido/a\",\n        \"Logout\": \"Salir\",\n        \"Dashboard\": \"Panel\",\n        \"Configuration\": \"Configuración\",\n        \"Login\": \"Acceso\",\n        \"Food\": \"Platillo\",\n        \"Character limit of max length 50\": \"Longitud máxima de caracteres de 50\",\n        \"Character limit of max length 15\": \"Longitud máxima de caracteres de 15\",\n        \"Character limit of max length 60\": \"Longitud máxima de caracteres de 60\",\n        \"Character limit of max length 20\": \"Longitud máxima de caracteres de 20\",\n        \"Character limit of max length 140\": \"Longitud máxima de caracteres de 140\",\n        \"Currency\": \"Moneda\",\n        \"Currency Code\": \"Código de Moneda\",\n        \"Currency Symbol\": \"Símbolo de Moneda\",\n    }\n}\n\nexport default en","const de = {\n    translation: {\n        \"Sign in credentials\": \"Anmeldeinformationen\",\n        \"Sign in\": \"Einloggen\",\n        \"Add Category\": \"Kategorie hinzufügen\",\n        \"Title\": \"Titel\",\n        \"Description\": \"Beschreibung\",\n        \"Add\": \"Hinzufügen\",\n        \"Remove\": \"Löschen\",\n        \"Add/Remove\": \"Hinzufügen/Entfernen\",\n        \"Success\": \"Erfolg\",\n        \"Danger\": \"Achtung\",\n        \"Categories\": \"Kategorien\",\n        \"Image\": \"Bild\",\n        \"Header\": \"Header\",\n        \"Loading\": \"Wird geladen\",\n        \"Error\": \"Error\",\n        \"Edit\": \"Bearbeiten\",\n        \"Delete\": \"Löschen\",\n        \"Edit Category\": \"Kategorie bearbeiten\",\n        \"Save\": \"sparen\",\n        \"OrderID prefix\": \"OrderID-Präfix\",\n        \"Order\": \"Auftrag\",\n        \"Email\": \"Email\",\n        \"Password\": \"Passwort\",\n        \"Enable\": \"Aktivieren\",\n        \"Disable\": \"Deaktivieren\",\n        \"Enable/Disable\": \"Aktivieren deaktivieren\",\n        \"Saving\": \"Speichern\",\n        \"Paypal\": \"Paypal\",\n        \"Client ID\": \"Kunden ID\",\n        \"Client Secret\": \"Kundengeheimnis\",\n        \"Sandbox\": \"Sandkasten\",\n        \"Publishable Key\": \"Veröffentlichbarer Schlüssel\",\n        \"Secret Key\": \"Geheimer Schlüssel\",\n        \"Delivery Charges\": \"Versandkosten\",\n        \"Price\": \"Preis\",\n        \"Add Food\": \"Lebensmittel hinzufügen\",\n        \"Category\": \"Kategorie\",\n        \"Select\": \"Wählen\",\n        \"Variations\": \"Variationen\",\n        \"Type\": \"Art\",\n        \"Food Image\": \"Food Image\",\n        \"Foods\": \"Lebensmittel\",\n        \"Actions\": \"Aktionen\",\n        \"Edit Food\":\"Essen bearbeiten\",\n        \"OrderID\":\"Auftragsnummer\",\n        \"Orders\":\"Aufträge\",\n        \"Name\":\"Name\",\n        \"Items\":\"Artikel\",\n        \"Payment\":\"Zahlung\",\n        \"Status\":\"Status\",\n        \"Review\":\"Rezension\",\n        \"Mark as\":\"markieren als\",\n        \"Users\":\"Benutzer\",\n        \"Phone\":\"Telefon\",\n        \"Address\":\"Adresse\",\n        \"2019\":\"2019\",\n        \"About Us\":\"Über uns\",\n        \"Blog\":\"Blog\",\n        \"Welcome\":\"Herzlich willkommen\",\n        \"Logout\":\"Ausloggen\",\n        \"Dashboard\":\"Instrumententafel\",\n        \"Configuration\":\"Aufbau\",\n        \"Login\":\"Anmeldung\",\n        \"Food\":\"Essen\",\n        \"Character limit of max length 50\": \"Zeichenbegrenzung von maximaler Länge 50\",\n        \"Character limit of max length 15\":\"Zeichenbegrenzung von maximaler Länge 15\",\n        \"Character limit of max length 60\":\"Zeichenbegrenzung von maximaler Länge 60\",\n        \"Character limit of max length 20\":\"Zeichenbegrenzung von maximaler Länge 20\",\n        \"Character limit of max length 140\":\"Zeichenbegrenzung von maximaler Länge 140\",\n        \"Currency\": \"Währung\",\n        \"Currency Code\": \"Währungscode\",\n        \"Currency Symbol\": \"Währungszeichen\",\n    }\n}\n\nexport default de","const fr = {\n    translation: {\n        \"Sign in credentials\": \"Identifiez-vous\",\n        \"Sign in\": \"se connecter\",\n        \"Add Category\": \"ajouter une catégorie\",\n        \"Title\": \"Titre\",\n        \"Description\": \"La description\",\n        \"Add\": \"Ajouter\",\n        \"Remove\": \"Retirer\",\n        \"Add/Remove\": \"Ajouter enlever\",\n        \"Success\": \"Succès\",\n        \"Danger\": \"Danger\",\n        \"Categories\": \"Les catégories\",\n        \"Image\": \"Image\",\n        \"Header\": \"Entête\",\n        \"Loading\": \"Chargement\",\n        \"Error\": \"Erreur\",\n        \"Edit\": \"modifier\",\n        \"Delete\": \"Effacer\",\n        \"Edit Category\": \"Modifier la catégorie\",\n        \"Save\": \"sauvegarder\",\n        \"OrderID prefix\": \"Préfixe OrderID\",\n        \"Order\": \"Ordre\",\n        \"Email\": \"Email\",\n        \"Password\": \"Mot de passe\",\n        \"Enable\": \"Activer\",\n        \"Disable\": \"Désactiver\",\n        \"Enable/Disable\": \"Activer désactiver\",\n        \"Saving\": \"Économie\",\n        \"Paypal\": \"Pay Pal\",\n        \"Client ID\": \"identité du client\",\n        \"Client Secret\": \"Secret du client\",\n        \"Sandbox\": \"bac à sable\",\n        \"Publishable Key\": \"Clé publiable\",\n        \"Secret Key\": \"Clef secrète\",\n        \"Delivery Charges\": \"Frais de livraison\",\n        \"Price\": \"Prix\",\n        \"Add Food\": \"Ajouter de la nourriture\",\n        \"Category\": \"Catégorie\",\n        \"Select\": \"Sélectionner\",\n        \"Variations\": \"Variations\",\n        \"Type\": \"Type\",\n        \"Food Image\": \"Image de nourriture\",\n        \"Foods\": \"nourriture\",\n        \"Actions\": \"actes\",\n        \"Edit Food\":\"Modifier un aliment\",\n        \"OrderID\":\"Numéro de commande\",\n        \"Orders\":\"Ordres\",\n        \"Name\":\"prénom\",\n        \"Items\":\"Articles\",\n        \"Payment\":\"Paiement\",\n        \"Status\":\"Statut\",\n        \"Review\":\"La revue\",\n        \"Mark as\":\"Marquer comme\",\n        \"Users\":\"Utilisateurs\",\n        \"Phone\":\"Téléphone\",\n        \"Address\":\"Adresse\",\n        \"2019\":\"2019\",\n        \"About Us\":\"À propos de nous\",\n        \"Blog\":\"Blog\",\n        \"Welcome\":\"Bienvenue\",\n        \"Logout\":\"Connectez - Out\",\n        \"Dashboard\":\"Tableau de bord\",\n        \"Configuration\":\"Configuration\",\n        \"Login\":\"S'identifier\",\n        \"Food\":\"Aliments\",\n        \"Character limit of max length 50\":\"Limite de caractères de longueur maximale 50\",\n        \"Character limit of max length 15\":\"Limite de caractères de longueur maximale 15\",\n        \"Character limit of max length 60\":\"Limite de caractères de longueur maximale 60\",\n        \"Character limit of max length 20\":\"Limite de caractères de longueur maximale 20\",\n        \"Character limit of max length 140\":\"Limite de caractères de longueur maximale 140\",\n        \"Currency\": \"Devise\",\n        \"Currency Code\": \"Code de devise\",\n        \"Currency Symbol\": \"Symbole de la monnaie\",\n    }\n}\n\nexport default fr","const km = {\n    translation: {\n        \"Sign in credentials\": \"ចូលព័ត៌មានអត្តសញ្ញាណ\",\n        \"Sign in\": \"ចូល\",\n        \"Add Category\": \"បន្ថែមប្រភេទ\",\n        \"Title\": \"ចំណងជើង\",\n        \"Description\": \"ការពិពណ៌នា\",\n        \"Add\": \"បន្ថែម\",\n        \"Remove\": \"យកចេញ\",\n        \"Add/Remove\": \"បន្ថែម / យកចេញ\",\n        \"Success\": \"ជោគជ័យ\",\n        \"Danger\": \"គ្រោះថ្នាក់\",\n        \"Categories\": \"ប្រភេទ\",\n        \"Image\": \"រូបភាព\",\n        \"Header\": \"បឋមកថា\",\n        \"Loading\": \"កំពុងផ្ទុក\",\n        \"Error\": \"កំហុស\",\n        \"Edit\": \"កែប្រែ\",\n        \"Delete\": \"លុប\",\n        \"Edit Category\": \"កែសម្រួលប្រភេទ\",\n        \"Save\": \"រក្សាទុក\",\n        \"OrderID prefix\": \"បុព្វបទ ID លំដាប់\",\n        \"Order\": \"លំដាប់\",\n        \"Email\": \"អ៊ីមែល\",\n        \"Password\": \"ពាក្យសម្ងាត់\",\n        \"Enable\": \"អនុញ្ញាត\",\n        \"Disable\": \"បិទ\",\n        \"Enable/Disable\": \"អនុញ្ញាត / មិនអនុញ្ញាត\",\n        \"Saving\": \"កំពុងរក្សាទុក\",\n        \"Paypal\": \"Paypal\",\n        \"Client ID\": \"លេខសម្គាល់អតិថិជន\",\n        \"Client Secret\": \"អតិថិជនសម្ងាត់\",\n        \"Sandbox\": \"Sandbox\",\n        \"Publishable Key\": \"កូនសៀវភៅបោះពុម្ព\",\n        \"Secret Key\": \"កូនសៀវភៅបោះពុម្ព\",\n        \"Delivery Charges\": \"ការដឹកជញ្ជូន\",\n        \"Price\": \"តម្លៃ\",\n        \"Add Food\": \"បន្ថែមអាហារ\",\n        \"Category\": \"ប្រភេទ\",\n        \"Select\": \"ជ្រើសរើស\",\n        \"Variations\": \"បំរែបំរួល\",\n        \"Type\": \"វាយ\",\n        \"Food Image\": \"រូបភាពអាហារ\",\n        \"Foods\": \"អាហារ\",\n        \"Actions\": \"សកម្មភាព\",\n        \"Edit Food\":\"កែសម្រួលអាហារ\",\n        \"OrderID\":\"លេខ​សម្គាល់​លំដាប់\",\n        \"Orders\":\"ការបញ្ជាទិញ\",\n        \"Name\":\"ឈ្មោះ\",\n        \"Items\":\"ធាតុ\",\n        \"Payment\":\"ការទូទាត់\",\n        \"Status\":\"ស្ថានភាព\",\n        \"Review\":\"ពិនិត្យឡើងវិញ\",\n        \"Mark as\":\"សម្គាល់ថា\",\n        \"Users\":\"អ្នកប្រើ\",\n        \"Phone\":\"ទូរស័ព្ទ\",\n        \"Address\":\"អាសយដ្ឋាន\",\n        \"2019\":\"ពីរ​ពាន់​ដប់​ប្រាំបួន\",\n        \"About Us\":\"អំពី​ពួក​យើង\",\n        \"Blog\":\"កំណត់ហេតុបណ្ដាញ\",\n        \"Welcome\":\"ស្វាគមន៍\",\n        \"Logout\":\"ចាកចេញ\",\n        \"Dashboard\":\"ផ្ទាំងគ្រប់គ្រង\",\n        \"Configuration\":\"ការកំណត់​រចនាសម្ព័ន្ធ\",\n        \"Login\":\"ចូល\",\n        \"Food\":\"អាហារ\",\n        \"Character limit of max length 50\":\"ដែនកំណត់តួអក្សរនៃប្រវែងអតិបរមា 50\",\n        \"Character limit of max length 15\":\"ដែនកំណត់តួអក្សរនៃប្រវែងអតិបរមា 15\",\n        \"Character limit of max length 60\":\"ដែនកំណត់តួអក្សរនៃប្រវែងអតិបរមា 60\",\n        \"Character limit of max length 20\":\"ដែនកំណត់តួអក្សរនៃប្រវែងអតិបរមា 20\",\n        \"Character limit of max length 140\":\"ដែនកំណត់តួអក្សរនៃប្រវែងអតិបរមា 140\",\n        \"Currency\": \"រូបិយប័ណ្ណ\",\n        \"Currency Code\": \"លេខកូដរូបិយប័ណ្ណ\",\n        \"Currency Symbol\": \"និមិត្តសញ្ញារូបិយប័ណ្ណ\",\n    }\n}\n\nexport default km","const zh = {\n    translation: {\n        \"Sign in credentials\": \"登录凭据\",\n        \"Sign in\": \"登入\",\n        \"Add Category\": \"添加类别\",\n        \"Title\": \"标题\",\n        \"Description\": \"描述\",\n        \"Add\": \"加\",\n        \"Remove\": \"去掉\",\n        \"Add/Remove\": \"添加/删除\",\n        \"Success\": \"成功\",\n        \"Danger\": \"危险\",\n        \"Categories\": \"分类\",\n        \"Image\": \"图片\",\n        \"Header\": \"头\",\n        \"Loading\": \"载入中\",\n        \"Error\": \"错误\",\n        \"Edit\": \"编辑\",\n        \"Delete\": \"删除\",\n        \"Edit Category\": \"编辑类别\",\n        \"Save\": \"保存\",\n        \"OrderID prefix\": \"订单ID前缀\",\n        \"Order\": \"订购\",\n        \"Email\": \"电子邮件\",\n        \"Password\": \"密码\",\n        \"Enable\": \"启用\",\n        \"Disable\": \"禁用\",\n        \"Enable/Disable\": \"启用/禁用\",\n        \"Saving\": \"保存\",\n        \"Paypal\": \"贝宝\",\n        \"Client ID\": \"客户ID\",\n        \"Client Secret\": \"客户秘密\",\n        \"Sandbox\": \"砂箱\",\n        \"Publishable Key\": \"可发布的密钥\",\n        \"Secret Key\": \"密钥\",\n        \"Delivery Charges\": \"送货费\",\n        \"Price\": \"价钱\",\n        \"Add Food\": \"添加食物\",\n        \"Category\": \"类别\",\n        \"Select\": \"选择\",\n        \"Variations\": \"变化\",\n        \"Type\": \"类型\",\n        \"Food Image\": \"食物形象\",\n        \"Foods\": \"食品\",\n        \"Actions\": \"操作\",\n        \"Edit Food\":\"编辑食物\",\n        \"OrderID\":\"订单ID\",\n        \"Orders\":\"命令\",\n        \"Name\":\"名称\",\n        \"Items\":\"项目\",\n        \"Payment\":\"付款\",\n        \"Status\":\"状态\",\n        \"Review\":\"评论\",\n        \"Mark as\":\"标记为\",\n        \"Users\":\"用户\",\n        \"Phone\":\"电话\",\n        \"Address\":\"地址\",\n        \"2019\":\"2019\",\n        \"About Us\":\"关于我们\",\n        \"Blog\":\"博客\",\n        \"Welcome\":\"欢迎\",\n        \"Logout\":\"登出\",\n        \"Dashboard\":\"仪表板\",\n        \"Configuration\":\"组态\",\n        \"Login\":\"登录\",\n        \"Food\":\"餐饮\",\n        \"Character limit of max length 50\":\"最大长度50的字符限制\",\n        \"Character limit of max length 15\":\"最大长度15的字符限制\",\n        \"Character limit of max length 60\":\"最大长度60的字符限制\",\n        \"Character limit of max length 20\":\"最大长度20的字符限制\",\n        \"Character limit of max length 140\":\"最大长度的字符限制140\",\n        \"Currency\": \"货币\",\n        \"Currency Code\": \"货币代码\",\n        \"Currency Symbol\": \"货币符号\",\n    }\n}\nexport default zh","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport en from \"./translations/en\"\nimport de from \"./translations/de\"\nimport fr from \"./translations/fr\"\nimport km from \"./translations/km\"\nimport zh from \"./translations/zh\"\ni18n.use(initReactI18next)\n  .init({\n    // we init with resources\n    resources: {\n      en,\n      de,\n      fr,\n      km,\n      zh\n    },\n    lng: localStorage.getItem(\"enatega-language\") || \"en\",\n    fallbackLng: \"en\",\n    debug: true,\n    interpolation: {\n      escapeValue: false, // not needed for react!!\n    }\n  });\n\nexport default i18n;","//export const server_url = \"http://192.168.100.28:8000/\"\nexport const server_url = \"https://panel.gourmetexpress.co/\"\nexport const cloudinary_upload_url = \"https://api.cloudinary.com/v1_1/dgdpsy6t9/image/upload\"\nexport const cloudinary_category = \"s84tnnnr\"\nexport const cloudinary_food = \"ra6jix5g\"\nexport const cloudinary_profile = \"nh9fd8i5\"","import React from \"react\";\nimport { withTranslation } from 'react-i18next';\nimport { Link } from \"react-router-dom\";\n// reactstrap components\nimport {\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  DropdownToggle,\n  Navbar,\n  Nav,\n  Container,\n  Media\n} from \"reactstrap\";\n\nclass AdminNavbar extends React.Component {\n  render() {\n    const { t } = this.props;\n    return (\n      <>\n        <Navbar className=\"navbar-top navbar-dark\" expand=\"md\" id=\"navbar-main\">\n          <Container fluid>\n            <Link\n              className=\"h4 mb-0 text-white text-uppercase d-none d-lg-inline-block\"\n              to=\"/\"\n            >\n              {t(this.props.brandText)}\n            </Link>\n\n            <Nav className=\"align-items-center d-none d-md-flex\" navbar>\n              <UncontrolledDropdown nav>\n                <DropdownToggle className=\"pr-0\" nav>\n                  <Media className=\"align-items-center\">\n                    <span className=\"avatar avatar-sm rounded-circle\">\n                      <img\n                        alt=\"...\"\n                        src={require(\"assets/img/theme/team-4-800x800.jpg\")}\n                      />\n                    </span>\n                    <Media className=\"ml-2 d-none d-lg-block\">\n                      <span className=\"mb-0 text-sm font-weight-bold\">\n                        Admin\n                      </span>\n                    </Media>\n                  </Media>\n                </DropdownToggle>\n                <DropdownMenu className=\"dropdown-menu-arrow\" right>\n                  <DropdownItem className=\"noti-title\" header tag=\"div\">\n                    <h6 className=\"text-overflow m-0\">{t(\"Welcome\")}!</h6>\n                  </DropdownItem>\n                  <DropdownItem divider />\n                  <DropdownItem href=\"#pablo\" onClick={e => {\n                    e.preventDefault()\n                    localStorage.removeItem(\"user-enatega\")\n                    this.props.history.push(\"/auth/login\")\n                  }}>\n                    <i className=\"ni ni-user-run\" />\n                    <span>{t(\"Logout\")}</span>\n                  </DropdownItem>\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </Nav>\n          </Container>\n        </Navbar>\n      </>\n    );\n  }\n}\n\nexport default withTranslation()(AdminNavbar);\n","/*eslint-disable*/\nimport React from \"react\";\nimport { withTranslation } from 'react-i18next';\n// reactstrap components\nimport { Row, Col, Nav, NavItem, NavLink } from \"reactstrap\";\n\nclass Footer extends React.Component {\n  render() {\n    const { t } = this.props;\n    return (\n      <footer className=\"footer\">\n        <Row className=\"align-items-center justify-content-xl-between\">\n          <Col xl=\"6\">\n            <div className=\"copyright text-center text-xl-left text-muted\">\n              © {t(\"2019\")}{\" \"}\n              <a\n                className=\"font-weight-bold ml-1\"\n                href=\"https://enatega.com/\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                Enatega\n              </a>\n            </div>\n          </Col>\n\n          <Col xl=\"6\">\n            <Nav className=\"nav-footer justify-content-center justify-content-xl-end\">\n              <NavItem>\n                <NavLink\n                  href=\"https://enatega.com/\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  Enatega\n                </NavLink>\n              </NavItem>\n\n              <NavItem>\n                <NavLink\n                  href=\"https://ninjascode.com/pages/ourteam.html\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  {t(\"About Us\")}\n                </NavLink>\n              </NavItem>\n\n              <NavItem>\n                <NavLink\n                  href=\"https://medium.com/@sharangohar\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  {t(\"Blog\")}\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </Col>\n        </Row>\n      </footer>\n    );\n  }\n}\n\nexport default withTranslation()(Footer);\n","/*eslint-disable*/\nimport React from \"react\";\nimport { withTranslation } from 'react-i18next';\nimport { NavLink as NavLinkRRD, Link } from \"react-router-dom\";\n// nodejs library to set properties for components\nimport { PropTypes } from \"prop-types\";\n\n// reactstrap components\nimport {\n\n  Collapse,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  DropdownToggle,\n  Media,\n  NavbarBrand,\n  Navbar,\n  NavItem,\n  NavLink,\n  Nav,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\nvar ps;\n\nclass Sidebar extends React.Component {\n  state = {\n    collapseOpen: false\n  };\n  constructor(props) {\n    super(props);\n    this.activeRoute.bind(this);\n  }\n  // verifies if routeName is the one active (in browser input)\n  activeRoute(routeName) {\n    return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\n  }\n  // toggles collapse between opened and closed (true/false)\n  toggleCollapse = () => {\n    this.setState({\n      collapseOpen: !this.state.collapseOpen\n    });\n  };\n  // closes the collapse\n  closeCollapse = () => {\n    this.setState({\n      collapseOpen: false\n    });\n  };\n  // creates the links that appear in the left menu / Sidebar\n  createLinks = (routes, t) => {\n    return routes.map((prop, key) => {\n      return prop.appearInSidebar ?\n        (\n          <NavItem key={key}>\n            <NavLink\n              to={prop.layout + prop.path}\n              tag={NavLinkRRD}\n              onClick={this.closeCollapse}\n              activeClassName=\"active\"\n            >\n              <i className={prop.icon} />\n              {t(prop.name)}\n            </NavLink>\n          </NavItem>\n        ) : null;\n    });\n  };\n  render() {\n    const { t } = this.props;\n    const { bgColor, routes, logo } = this.props;\n    let navbarBrandProps;\n    if (logo && logo.innerLink) {\n      navbarBrandProps = {\n        to: logo.innerLink,\n        tag: Link\n      };\n    } else if (logo && logo.outterLink) {\n      navbarBrandProps = {\n        href: logo.outterLink,\n        target: \"_blank\"\n      };\n    }\n    return (\n      <Navbar\n        className=\"navbar-vertical fixed-left navbar-light bg-white\"\n        expand=\"md\"\n        id=\"sidenav-main\"\n      >\n        <Container fluid>\n          {/* Toggler */}\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            onClick={this.toggleCollapse}\n          >\n            <span className=\"navbar-toggler-icon\" />\n          </button>\n          {/* Brand */}\n          {logo ? (\n            <NavbarBrand className=\"pt-0\" {...navbarBrandProps}>\n              <img\n                alt={logo.imgAlt}\n                className=\"navbar-brand-img\"\n                src={logo.imgSrc}\n              />\n            </NavbarBrand>\n          ) : null}\n          {/* User */}\n          <Nav className=\"align-items-center d-md-none\">\n            <UncontrolledDropdown nav>\n              <DropdownToggle nav>\n                <Media className=\"align-items-center\">\n                  <span className=\"avatar avatar-sm rounded-circle\">\n                    <img\n                      alt=\"...\"\n                      src={require(\"assets/img/theme/team-4-800x800.jpg\")}\n                    />\n                  </span>\n                </Media>\n              </DropdownToggle>\n              <DropdownMenu className=\"dropdown-menu-arrow\" right>\n                <DropdownItem className=\"noti-title\" header tag=\"div\">\n                  <h6 className=\"text-overflow m-0\">{t(\"Welcome\")}!</h6>\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem href=\"#pablo\" onClick={e => {\n                  e.preventDefault()\n                  localStorage.removeItem(\"user-enatega\")\n                  this.props.history.push(\"/auth/login\")\n                }}>\n                  <i className=\"ni ni-user-run\" />\n                  <span>{t(\"Logout\")}</span>\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Nav>\n          {/* Collapse */}\n          <Collapse navbar isOpen={this.state.collapseOpen}>\n            {/* Collapse header */}\n            <div className=\"navbar-collapse-header d-md-none\">\n              <Row>\n                {logo ? (\n                  <Col className=\"collapse-brand\" xs=\"6\">\n                    {logo.innerLink ? (\n                      <Link to={logo.innerLink}>\n                        <img alt={logo.imgAlt} src={logo.imgSrc} />\n                      </Link>\n                    ) : (\n                        <a href={logo.outterLink}>\n                          <img alt={logo.imgAlt} src={logo.imgSrc} />\n                        </a>\n                      )}\n                  </Col>\n                ) : null}\n                <Col className=\"collapse-close\" xs=\"6\">\n                  <button\n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    onClick={this.toggleCollapse}\n                  >\n                    <span />\n                    <span />\n                  </button>\n                </Col>\n              </Row>\n            </div>\n\n            {/* Navigation */}\n            <Nav navbar>\n              {this.createLinks(routes, t)}\n            </Nav>\n          </Collapse>\n        </Container>\n      </Navbar>\n    );\n  }\n}\n\nSidebar.defaultProps = {\n  routes: [{}]\n};\n\nSidebar.propTypes = {\n  // links that will be displayed inside the component\n  routes: PropTypes.arrayOf(PropTypes.object),\n  logo: PropTypes.shape({\n    // innerLink is for links that will direct the user within the app\n    // it will be rendered as <Link to=\"...\">...</Link> tag\n    innerLink: PropTypes.string,\n    // outterLink is for links that will direct the user outside the app\n    // it will be rendered as simple <a href=\"...\">...</a> tag\n    outterLink: PropTypes.string,\n    // the image src of the logo\n    imgSrc: PropTypes.string.isRequired,\n    // the alt for the img\n    imgAlt: PropTypes.string.isRequired\n  })\n};\n\nexport default withTranslation()(Sidebar);\n","import { validate } from 'validate.js'\n\nconst constraints = {\n    confirmPassword: {\n        presence: true,\n        equality: \"password\",\n        length: {\n            minimum: 1,\n            maximum: 20\n        }\n    },\n    prefix: {\n        presence: true,\n        length: {\n            minimum: 1\n        }\n    },\n    email: {\n        email: true\n    },\n    password: {\n        presence: true,\n        length: {\n            minimum: 1,\n            maximum: 20\n        }\n    },\n    title: {\n        presence: true,\n        length: {\n            minimum: 1,\n            maximum: 20\n        }\n    },\n    description: {\n        presence: true,\n        length: {\n            minimum: 0,\n            maximum: 140\n        }\n    },\n    category_title: {\n        presence: true,\n        length: {\n            minimum: 1,\n            maximum: 15\n        }\n    },\n    category_description: {\n        presence: true,\n        length: {\n            minimum: 0,\n            maximum: 60\n        }\n    },\n    category: {\n        presence: true,\n        length: {\n            minimum: 5\n        }\n    },\n    price: {\n        presence: true,\n        numericality: {\n            greaterThan: 0\n        }\n    },\n    type: {\n        presence: true,\n        length: {\n            minimum: 1,\n            maximum: 6\n        }\n    },\n    mongoUrl: {\n        url: {\n            scheme: ['mongodb']\n        }\n    },\n    currencyCode: {\n        presence: true,\n        length: {\n            minimum: 1,\n            maximum: 3\n        }\n    },\n    currencySymbol: {\n        presence: true,\n        length: {\n            minimum: 1,\n            maximum: 3\n        }\n    },\n    reason: {\n        presence: true,\n        length: {\n            minimum: 1,\n            maximum: 30\n        }\n    },\n    optionTitle: {\n        presence: true,\n        length: {\n            minimum: 1,\n            maximum: 30\n        }\n    },\n    optionDescription: {\n        length: {\n            minimum: 0,\n            maximum: 60\n        }\n    },\n    optionPrice: {\n        presence: true,\n        numericality: {\n            greaterThanOrEqualTo: 0\n        }\n    },\n    addonTitle: {\n        presence: true,\n        length: {\n            minimum: 1,\n            maximum: 60\n        }\n    },\n    addonDescription: {\n        length: {\n            minimum: 0,\n            maximum: 60\n        }\n    },\n    addonQuantityMinimum: {\n        presence: true,\n        numericality: {\n            greaterThanOrEqualTo: 0\n        }\n    },\n    addonQuantityMaximum: {\n        presence: true,\n        numericality: {\n            greaterThanOrEqualTo: 1\n        }\n    },\n}\n\nexport const validateFunc = (value, constraint) => {\n    return validate(value, { [constraint]: constraints[constraint] })\n}\n","import React from \"react\";\nimport { withTranslation } from 'react-i18next';\n// reactstrap components\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  FormGroup,\n  Form,\n  Input,\n  InputGroupAddon,\n  InputGroupText,\n  InputGroup,\n  Col,\n  UncontrolledAlert\n} from \"reactstrap\";\n\nimport { Redirect } from \"react-router-dom\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { adminLogin } from \"../apollo/server\";\nimport { validateFunc } from '../constraints/constraints';\nconst LOGIN = gql`${adminLogin}`\n\nclass Login extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      email: \"admin@enatega.com\",\n      password: \"enatega123\",\n      emailError: null,\n      passwordError: null,\n      error: null,\n      redirectToReferrer: localStorage.getItem(\"user-enatega\") ? true : false\n    }\n\n  }\n  onBlur = (event, field) => {\n    this.setState({ [field + 'Error']: !validateFunc({ [field]: this.state[field] }, field) })\n  }\n  validate = () => {\n    let emailError = !validateFunc({ email: this.state.email }, \"email\")\n    let passwordError = !validateFunc({ password: this.state.password }, \"password\")\n    this.setState({ emailError, passwordError })\n    return emailError && passwordError\n  }\n  render() {\n    let { from } = this.props.location.state || { from: { pathname: \"/\" } };\n    let { redirectToReferrer } = this.state;\n    const { t } = this.props;\n    if (redirectToReferrer) return <Redirect to={from} />;\n    return (\n      <>\n        <Col lg=\"5\" md=\"7\">\n          <Card className=\"bg-secondary shadow border-0\">\n            <CardHeader className=\"bg-transparent pb-5\">\n              <div className=\"text-muted text-center mt-2 mb-3\">\n                <small>{t(\"Sign in credentials\")}</small>\n              </div>\n            </CardHeader>\n            <CardBody className=\"px-lg-5 py-lg-5\">\n              <Form role=\"form\">\n                <FormGroup className={this.state.emailError === null ? \"\" : this.state.emailError ? \"has-success\" : \"has-danger\"}>\n                  <InputGroup className=\"input-group-alternative\">\n                    <InputGroupAddon addonType=\"prepend\">\n                      <InputGroupText>\n                        <i className=\"ni ni-email-83\" />\n                      </InputGroupText>\n                    </InputGroupAddon>\n                    <Input\n                      value={this.state.email}\n                      onChange={event => {\n                        this.setState({ email: event.target.value })\n                      }}\n                      onBlur={event => { this.onBlur(event, 'email') }}\n                      placeholder=\"Email\"\n                      type=\"email\" />\n                  </InputGroup>\n                </FormGroup>\n                <FormGroup className={this.state.passwordError === null ? \"\" : this.state.passwordError ? \"has-success\" : \"has-danger\"}>\n                  <InputGroup className=\"input-group-alternative\">\n                    <InputGroupAddon addonType=\"prepend\">\n                      <InputGroupText>\n                        <i className=\"ni ni-lock-circle-open\" />\n                      </InputGroupText>\n                    </InputGroupAddon>\n                    <Input\n                      value={this.state.password}\n                      onChange={event => {\n                        this.setState({ password: event.target.value })\n                      }}\n                      onBlur={event => { this.onBlur(event, 'password') }}\n                      placeholder=\"Password\"\n                      type=\"password\" />\n                  </InputGroup>\n                </FormGroup>\n\n                <div className=\"text-center\">\n                  <Mutation\n                    mutation={LOGIN}\n                    onCompleted={(data) => {\n                      localStorage.setItem(\"user-enatega\", JSON.stringify(data.adminLogin))\n                      this.setState({ redirectToReferrer: true, emailError: null, passwordError: null })\n                    }}\n                    onError={error => {\n                      this.setState({\n                        emailError: null, passwordError: null,\n                        error: error.networkError.result.errors[0].message\n                      })\n                    }}\n                  >\n                    {(adminLogin, { loading, error }) => {\n\n                      return (\n                        <Button\n                          className=\"my-4\"\n                          color=\"primary\"\n                          type=\"button\"\n                          onClick={() => {\n                            this.setState({\n                              emailError: null,\n                              passwordError: null,\n                            })\n                            if (this.validate())\n                              adminLogin({ variables: { ...this.state } })\n                          }}>\n                          {t(\"Sign in\")}\n                        </Button>\n                      )\n                    }}\n                  </Mutation>\n                </div>\n                {this.state.error &&\n                  <UncontrolledAlert color=\"danger\" fade={true}>\n                    <span className=\"alert-inner--text\">\n                      {this.state.error}</span>\n                  </UncontrolledAlert>}\n              </Form>\n            </CardBody>\n          </Card>\n        </Col>\n      </>\n    );\n  }\n}\n\nexport default withTranslation()(Login);\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\nimport { validateFunc } from '../../constraints/constraints';\nimport { withTranslation } from 'react-i18next';\n\n// reactstrap components\nimport {\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    FormGroup,\n    Form,\n    Input,\n    Row,\n    Col,\n    UncontrolledAlert\n} from \"reactstrap\";\n\nimport { cloudinary_upload_url, cloudinary_category } from \"../../config/config\";\nimport { editCategory, createCategory } from \"../../apollo/server\";\n\nconst CREATE_CATEGORY = gql`${createCategory}`\nconst EDIT_CATEGORY = gql`${editCategory}`\n\n\nclass Category extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: props.category ? props.category.title : '',\n            description: props.category ? props.category.description : '',\n            imgMenu: props.category ? props.category.img_menu : '',\n            errorMessage: '',\n            successMessage: '',\n            titleError: null,\n            descriptionError: null,\n            mutation: props.category ? EDIT_CATEGORY : CREATE_CATEGORY\n        };\n    }\n    filterImage = (event) => {\n        let images = [];\n        for (var i = 0; i < event.target.files.length; i++) {\n            images[i] = event.target.files.item(i);\n        }\n        images = images.filter(image => image.name.match(/\\.(jpg|jpeg|png|gif)$/))\n        // let message = `${images.length} valid image(s) selected`\n        // console.log(message)\n        return images.length ? images[0] : undefined\n    }\n    selectImage = (event, state) => {\n        let result = this.filterImage(event)\n        if (result) {\n            this.imageToBase64(result)\n        }\n    }\n\n    onBlur = (event, field) => {\n        this.setState({ [field + 'Error']: !validateFunc({ ['category_' + field]: this.state[field] }, 'category_' + field) })\n    }\n    onSubmitValidaiton = () => {\n        let form = this.state\n        let titleError = !validateFunc({ category_title: form.title }, 'category_title')\n        let descriptionError = !validateFunc({ category_description: form.description }, 'category_description')\n        this.setState({ titleError, descriptionError })\n        return (titleError && descriptionError)\n    }\n    clearFields = () => {\n        this.setState({\n            title: '',\n            description: '',\n            imgMenu: '',\n            // imgHeader: '',\n            titleError: null,\n            descriptionError: null,\n        })\n    }\n    onCompleted = (data) => {\n        const message = this.props.category ? 'Category updated successfully' : 'Category added successfully'\n        this.setState({ successMessage: message, errorMessage: '' })\n        if (!this.props.category) this.clearFields()\n        setTimeout(this.hideMessage, 3000)\n    }\n    onError = (error) => {\n        const message = 'Action failed. Please Try again'\n        this.setState({ successMessage: '', errorMessage: message })\n        setTimeout(this.hideMessage, 3000)\n    }\n    hideMessage = () => {\n        this.setState({ errorMessage: '', successMessage: '' })\n    }\n    imageToBase64 = (imgUrl) => {\n        let fileReader = new FileReader()\n        fileReader.onloadend = () => {\n            this.setState({ imgMenu: fileReader.result })\n        }\n        fileReader.readAsDataURL(imgUrl)\n    }\n    uploadImageToCloudinary = async () => {\n        if (this.state.imgMenu === '')\n            return this.state.imgMenu\n        if (this.props.category && this.props.category.img_menu === this.state.imgMenu)\n            return this.state.imgMenu\n\n        let apiUrl = cloudinary_upload_url;\n        let data = {\n            \"file\": this.state.imgMenu,\n            \"upload_preset\": cloudinary_category\n        }\n        try {\n            const result = await fetch(apiUrl, {\n                body: JSON.stringify(data),\n                headers: {\n                    'content-type': 'application/json'\n                },\n                method: 'POST',\n            })\n            const imageData = await result.json()\n            return imageData.secure_url\n        }\n        catch (e) {\n            console.log(e)\n        }\n\n    }\n    render() {\n        const { t } = this.props;\n        return (<Row>\n            <Col className=\"order-xl-1\" >\n                <Card className=\"bg-secondary shadow\">\n                    <CardHeader className=\"bg-white border-0\">\n                        <Row className=\"align-items-center\">\n                            <Col xs=\"8\">\n                                <h3 className=\"mb-0\">{this.props.category ? t(\"Edit Category\") : t(\"Add Category\")}</h3>\n                            </Col>\n                        </Row>\n                    </CardHeader>\n                    <CardBody>\n                        <Form>\n                            <div className=\"pl-lg-4\">\n                                <Row>\n                                    <Col lg=\"6\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-title\"\n                                        >\n                                            {t(\"Title\")}\n                                        </label>\n                                        <br />\n                                        <small>{t(\"Character limit of max length 50\")}</small>\n                                        <FormGroup className={this.state.titleError === null ? \"\" : this.state.titleError ? \"has-success\" : \"has-danger\"}>\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-title\"\n                                                placeholder=\"e.g Breakfast\"\n                                                type=\"text\"\n                                                value={this.state.title}\n                                                maxLength=\"50\"\n                                                onChange={(event) => {\n                                                    this.setState({ title: event.target.value })\n                                                }}\n                                                onBlur={event => { this.onBlur(event, 'title') }}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md=\"12\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-description\"\n                                        >\n                                            {t(\"Description\")}\n                                        </label>\n                                        <br />\n                                        <small>{t(\"Character limit of max length 140\")}</small>\n                                        <FormGroup className={this.state.descriptionError === null ? \"\" : this.state.descriptionError ? \"has-success\" : \"has-danger\"}>\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-description\"\n                                                placeholder=\"e.g All happiness depends on leisurely breakfast.\"\n                                                type=\"text\"\n                                                maxLength=\"140\"\n                                                value={this.state.description}\n                                                onChange={(event) => {\n                                                    this.setState({ description: event.target.value })\n                                                }}\n                                                onBlur={(event) => { this.onBlur(event, 'description') }}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row >\n                                    <Col lg=\"6\" >\n                                        <FormGroup >\n                                            <div className=\"card-title-image\">\n                                                <a href=\"#pablo\" onClick={e => e.preventDefault()}>\n                                                    {this.state.imgMenu && typeof this.state.imgMenu === 'string' &&\n                                                        <img alt='menu img'\n                                                            style={{ width: '200px', height: '200px' }}\n                                                            src={this.state.imgMenu}\n                                                        />}\n                                                </a>\n                                                <input\n                                                    className=\"mt-4\"\n                                                    type=\"file\"\n                                                    onChange={(event) => { this.selectImage(event, \"imgMenu\") }}\n                                                />\n                                            </div>\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row >\n                                    <Mutation\n                                        mutation={this.state.mutation}\n                                        onCompleted={this.onCompleted}\n                                        onError={this.onError}\n                                        refetchQueries={['Categories']}>\n                                        {(mutate, { loading, error }) => {\n                                            if (loading) return t(\"Loading\")\n                                            return (\n                                                <Col className=\"text-right\" xs=\"12\">\n                                                    <Button\n                                                        color=\"primary\"\n                                                        href=\"#pablo\"\n                                                        onClick={async e => {\n                                                            e.preventDefault()\n                                                            this.setState({ successMessage: '', errorMessage: '' })\n                                                            if (this.onSubmitValidaiton()) {\n                                                                mutate({\n                                                                    variables: {\n                                                                        _id: this.props.category ? this.props.category._id : '',\n                                                                        title: this.state.title,\n                                                                        description: this.state.description,\n                                                                        img_menu: await this.uploadImageToCloudinary()\n                                                                    }\n                                                                })\n                                                            }\n\n                                                        }}\n                                                        size=\"md\"\n                                                    >\n                                                        {t(\"Save\")}\n                                                    </Button>\n                                                </Col>)\n                                        }}</Mutation>\n                                </Row>\n                                <Row >\n                                    <Col lg=\"6\">\n                                        {this.state.successMessage &&\n                                            <UncontrolledAlert color=\"success\" fade={true}>\n                                                <span className=\"alert-inner--icon\">\n                                                    <i className=\"ni ni-like-2\" />\n                                                </span>{\" \"}\n                                                <span className=\"alert-inner--text\">\n                                                    <strong>{t(\"Success\")}!</strong> {this.state.successMessage}</span>\n                                            </UncontrolledAlert>}\n                                        {this.state.errorMessage &&\n                                            <UncontrolledAlert color=\"danger\" fade={true}>\n                                                <span className=\"alert-inner--icon\">\n                                                    <i className=\"ni ni-like-2\" />\n                                                </span>{\" \"}\n                                                <span className=\"alert-inner--text\">\n                                                    <strong>{t(\"Danger\")}!</strong> {this.state.errorMessage}</span>\n                                            </UncontrolledAlert>}\n                                    </Col>\n                                </Row>\n                            </div>\n                        </Form>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n        );\n    }\n}\n\nexport default withTranslation()(Category)","import React from \"react\";\n\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"header bg-gradient-warning pb-8 pt-5 pt-md-8\">\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Header;","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query, Mutation } from \"react-apollo\";\nimport { withTranslation } from 'react-i18next';\nimport CategoryComponent from '../components/Category/Category'\n// reactstrap components\nimport {\n  Card,\n  CardHeader,\n  Container,\n  Row,\n  Table,\n  Media,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal\n} from \"reactstrap\";\n\n// core components\nimport Header from \"components/Headers/Header.jsx\";\nimport { getCategories, deleteCategory, getFoods } from \"../apollo/server\";\n\n\n\n\nconst GET_CATEGORIES = gql`${getCategories}`\nconst DELETE_CATEGORY = gql`${deleteCategory}`\nconst GET_FOODS = gql`${getFoods}`\n\n\n\nclass Category extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      editModal: false,\n      category: null\n    };\n  }\n  toggleModal = category => {\n    this.setState({\n      editModal: !this.state.editModal,\n      category\n    })\n  }\n  render() {\n    const { t } = this.props;\n    return (\n      <>\n        <Header />\n        {/* Page content */}\n        <Container className=\"mt--7\" fluid>\n          <CategoryComponent />\n          {/* Table */}\n          <Row className=\"mt-5\">\n            <div className=\"col\">\n              <Card className=\"shadow\">\n                <CardHeader className=\"border-0\">\n                  <h3 className=\"mb-0\">{t(\"Categories\")}</h3>\n                </CardHeader>\n                <Table className=\"align-items-center table-flush\" responsive>\n                  <thead className=\"thead-light\">\n                    <tr>\n                      <th scope=\"col\">{t(\"Title\")}</th>\n                      <th scope=\"col\">{t(\"Description\")}</th>\n                      <th scope=\"col\">{t(\"Image\")}</th>\n                      <th scope=\"col\" />\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <Query query={GET_CATEGORIES}>\n                      {({ loading, error, data }) => {\n                        if (loading) return <tr><td>{t(\"Loading\")}...</td></tr>;\n                        if (error) return <tr><td>`${t(\"Error\")}! ${error.message}`</td></tr>;\n                        return data.categories.map(category =>\n                          <tr key={category._id}>\n                            <th scope=\"row\">\n                              <Media>\n                                <span className=\"mb-0 text-sm\">\n                                  {category.title}\n                                </span>\n                              </Media>\n                            </th>\n                            <td>{category.description}</td>\n                            <td>\n                              {!!category.img_menu && <img className=\"img-responsive\" src={category.img_menu} alt=\"img menu\" />}\n                              {!category.img_menu && \"No Image\"}\n                            </td>\n                            <td className=\"text-right\">\n                              <UncontrolledDropdown>\n                                <DropdownToggle\n                                  className=\"btn-icon-only text-light\"\n                                  href=\"#pablo\"\n                                  role=\"button\"\n                                  size=\"sm\"\n                                  color=\"\"\n                                  onClick={e => e.preventDefault()}\n                                >\n                                  <i className=\"fas fa-ellipsis-v\" />\n                                </DropdownToggle>\n                                <DropdownMenu className=\"dropdown-menu-arrow\" right>\n                                  <DropdownItem\n                                    href=\"#pablo\"\n                                    onClick={e => {\n                                      e.preventDefault()\n                                      this.toggleModal(category)\n                                    }}>\n                                    {t(\"Edit\")}\n                                  </DropdownItem>\n                                  <Mutation mutation={DELETE_CATEGORY}\n                                    refetchQueries={[{ query: GET_CATEGORIES }, { query: GET_FOODS }]}\n                                    onCompleted={this.onCompleted}\n                                    onError={this.onError}>\n                                    {(deleteCategory, { loading }) => {\n                                      if (loading) return t(\"Loading\")\n                                      return <DropdownItem\n                                        href=\"#pablo\"\n                                        onClick={e => {\n                                          e.preventDefault()\n                                          deleteCategory({ variables: { id: category._id } })\n                                        }}>\n                                        {t(\"Delete\")}\n                                      </DropdownItem>\n                                    }}\n                                  </Mutation>\n                                </DropdownMenu>\n                              </UncontrolledDropdown>\n                            </td>\n                          </tr>)\n                      }}\n                    </Query>\n                  </tbody>\n                </Table>\n              </Card>\n            </div>\n          </Row>\n          <Modal\n            className=\"modal-dialog-centered\"\n            size=\"lg\"\n            isOpen={this.state.editModal}\n            toggle={() => { this.toggleModal(null) }}>\n            <CategoryComponent category={this.state.category} />\n          </Modal>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default withTranslation()(Category);\n","import React, { Component } from 'react';\nimport {\n    Alert,\n    Card,\n    CardHeader,\n    CardBody,\n    Form,\n    Row,\n    Col,\n    FormGroup,\n    Input,\n    Button\n} from 'reactstrap';\nimport { withTranslation } from 'react-i18next';\nimport { Mutation, compose, withApollo } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { createOptions, getOptions, editOption } from '../../apollo/server';\nimport { validateFunc } from '../../constraints/constraints';\n\nconst CREATE_OPTIONS = gql`${createOptions}`\nconst GET_OPTIONS = gql`${getOptions}`\nconst EDIT_OPTION = gql`${editOption}`\n\nclass Option extends Component {\n    constructor(props) {\n        super(props)\n        const option = props.option ?\n            [{ ...props.option, titleError: false, descriptionError: false, priceError: false }] : null\n        this.state = {\n            options: option || [{ title: '', description: '', price: 0, titleError: false, descriptionError: false, priceError: false }],\n            success: '', error: ''\n        }\n    }\n    onBlur = (index, state) => {\n        const options = this.state.options\n        if (state === \"title\")\n            options[index]['titleError'] = !!validateFunc({ optionTitle: options[index][state] }, 'optionTitle')\n        if (state === \"description\")\n            options[index]['descriptionError'] = !!validateFunc({ optionDescription: options[index][state] }, 'optionDescription')\n        if (state === \"price\")\n            options[index]['priceError'] = !!validateFunc({ optionPrice: options[index][state] }, 'optionPrice')\n        this.setState({ options })\n    }\n    onAdd = (index) => {\n        const options = this.state.options\n        if (index === options.length - 1)\n            options.push({ title: '', description: '', price: 0 })\n        else\n            options.splice(index + 1, 0, { title: '', description: '', price: 0 });\n        this.setState({ options })\n    }\n    onRemove = (index) => {\n        if (this.state.options.length === 1 && index === 0) {\n            return\n        }\n        const options = this.state.options\n        options.splice(index, 1);\n        console.log(options)\n        this.setState({ options })\n    }\n    onChange = (event, index, state) => {\n        const options = this.state.options\n        options[index][state] = event.target.value\n        this.setState({ options })\n    }\n    validate = () => {\n        const options = this.state.options\n        options.map((option, index) => {\n            this.onBlur(index, 'title')\n            this.onBlur(index, 'description')\n            this.onBlur(index, 'price')\n            return option\n        })\n        const error = options.filter(option => option.titleError || option.descriptionError || option.priceError)\n        if (!error.length)\n            return true\n        return false\n    }\n    onCompleted = ({ createOptions, editOption }) => {\n        if (createOptions)\n            this.setState({\n                options: [{\n                    title: '',\n                    description: '',\n                    price: 0,\n                    titleError: false,\n                    descriptionError: false,\n                    priceError: false\n                }],\n                success: 'Saved', error: ''\n            })\n        if (editOption)\n            this.setState({ success: 'Saved', error: '' })\n    }\n    onError = (error) => {\n        this.setState({ error: 'An error occured while saving,Try again', success: '' })\n    }\n    update = (proxy, { data: { createOptions } }) => {\n        try {\n            if (createOptions) {\n                const data = proxy.readQuery({ query: GET_OPTIONS });\n                data.options = data.options.concat(createOptions);\n                proxy.writeQuery({ query: GET_OPTIONS, data });\n                if (this.props.updateOptions)\n                    this.props.updateOptions(createOptions.map(({ _id }) => _id))\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    onDismiss = () => {\n        this.setState({ success: '', error: '' })\n    }\n    render() {\n        const { t } = this.props\n        return (\n            <Card>\n                <CardHeader>Option</CardHeader>\n                <CardBody>\n                    <Form>\n                        <div >\n                            <Row>\n                                <Col lg=\"3\">\n                                    <label\n                                        className=\"form-control-label\"\n                                        htmlFor=\"input-title\"\n                                    >\n                                        {t(\"Title\")}\n                                    </label>\n                                    <br />\n                                    <small>{t(\"Character limit of max length 30\")}</small>\n                                </Col>\n                                <Col lg=\"3\">\n                                    <label\n                                        className=\"form-control-label\"\n                                        htmlFor=\"input-description\"\n                                    >\n                                        {t(\"Description\")}\n                                    </label>\n                                    <br />\n                                    <small>{t(\"Character limit of max length 60\")}</small>\n                                </Col>\n                                <Col lg=\"3\">\n                                    <label\n                                        className=\"form-control-label\"\n                                        htmlFor=\"input-price\"\n                                    >\n                                        {t(\"Price\")}\n                                    </label>\n                                    <br />\n                                    <small>{t(\"Must be a number\")}</small>\n                                </Col>\n                                {!this.props.option && <Col lg=\"3\">\n                                    <label\n                                        className=\"form-control-label\"\n                                        htmlFor=\"input-price\"\n                                    >\n                                        {t(\"Add/Remove\")}\n                                    </label>\n                                </Col>}\n                            </Row>\n                            {this.state.options.map((option, index) => (\n                                <Row key={index}>\n                                    <Col lg=\"3\">\n                                        <FormGroup className={option.titleError === true ? \"has-danger\" : \"\"}>\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-title\"\n                                                placeholder=\"e.g Pepsi\"\n                                                type=\"text\"\n                                                maxLength=\"30\"\n                                                value={option.title}\n                                                onChange={(event) => {\n                                                    this.onChange(event, index, 'title')\n                                                }}\n                                                onBlur={event => { this.onBlur(index, 'title') }}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                    <Col lg=\"3\">\n                                        <FormGroup className={option.descriptionError === true ? \"has-danger\" : \"\"}>\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-description\"\n                                                placeholder=\"e.g Optional\"\n                                                type=\"text\"\n                                                maxLength=\"60\"\n                                                value={option.description}\n                                                onChange={(event) => {\n                                                    this.onChange(event, index, 'description')\n                                                }}\n                                                onBlur={(event) => { this.onBlur(index, 'description') }}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                    <Col lg=\"3\">\n                                        <FormGroup className={option.priceError === true ? \"has-danger\" : \"\"}>\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-price\"\n                                                placeholder=\"e.g 90.25\"\n                                                type=\"number\"\n                                                min={'0'}\n                                                value={option.price}\n                                                onChange={(event) => {\n                                                    this.onChange(event, index, 'price')\n                                                }}\n                                                onBlur={(event) => { this.onBlur(index, 'price') }}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                    {!this.props.option && <Col lg=\"3\">\n                                        <Button color=\"danger\" onClick={() => { this.onRemove(index) }}>-</Button> <Button onClick={() => { this.onAdd(index) }} color=\"primary\">+</Button>\n                                    </Col>}\n                                </Row>))\n                            }\n                            <Row >\n                                <Col lg=\"4\">\n                                    <Mutation mutation={this.props.option ? EDIT_OPTION : CREATE_OPTIONS}\n                                        onCompleted={this.onCompleted}\n                                        onError={this.onError}\n                                        update={this.update}>\n                                        {(mutate, { loading }) => {\n                                            if (loading) return (<Button disabled color=\"primary\">Saving</Button>)\n                                            return (< Button\n                                                color=\"primary\"\n                                                onClick={() => {\n                                                    if (this.validate())\n                                                        this.props.option ?\n                                                            mutate({ variables: { optionInput: { _id: this.props.option._id, title: this.state.options[0].title, description: this.state.options[0].description, price: +this.state.options[0].price } } })\n                                                            : mutate({ variables: { optionInput: this.state.options.map(({ title, description, price }) => ({ title, description, price: +price })) } })\n                                                }}\n                                            > Save</Button>)\n                                        }}\n                                    </Mutation>\n                                </Col>\n                                <Alert color=\"success\" isOpen={!!this.state.success} toggle={this.onDismiss}>\n                                    {this.state.success}\n                                </Alert>\n                                <Alert color=\"danger\" isOpen={!!this.state.error} toggle={this.onDismiss}>\n                                    {this.state.error}\n                                </Alert>\n                            </Row>\n                        </div>\n                    </Form>\n\n                </CardBody>\n            </Card >\n        )\n    }\n}\n\nexport default compose(withApollo, withTranslation())(Option)\n","import React, { Component } from 'react';\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    Row,\n    Col,\n    Form,\n    FormGroup,\n    Input,\n    Button,\n    Label,\n    Modal,\n    Alert\n} from 'reactstrap';\nimport { withTranslation } from 'react-i18next';\nimport { Query, Mutation, compose, withApollo } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { getOptions, createAddons, getAddons, editAddon } from '../../apollo/server';\nimport OptionsComponent from '../Option/Option';\nimport { validateFunc } from '../../constraints/constraints'\n\nconst GET_OPTIONS = gql`${getOptions}`\nconst CREATE_ADDONS = gql`${createAddons}`\nconst GET_ADDONS = gql`${getAddons}`\nconst EDIT_ADDON = gql`${editAddon}`\n\nclass Addon extends Component {\n    constructor(props) {\n        super(props)\n        const addon = props.addon ? [{\n            ...props.addon,\n            options: props.addon.options.map(({ _id }) => _id),\n            titleError: false,\n            descriptionError: false,\n            optionsError: false,\n            quantity_minimumError: false,\n            quantity_maximumError: false\n        }] : null\n        this.state = {\n            addons: addon || [{\n                title: '',\n                description: '',\n                quantity_minimum: 0,\n                quantity_maximum: 1,\n                options: [],\n                titleError: false,\n                descriptionError: false,\n                optionsError: false,\n                quantity_minimumError: false,\n                quantity_maximumError: false\n            }],\n            optionsModal: false,\n            success: '',\n            error: '',\n            addonIndex: 0\n        }\n\n    }\n    onChangeOption = (event) => {\n        //added this because on clear after saving was not clearing selected options in the list.\n        // console.log(event)\n    }\n    onChange = (event, index, state) => {\n        const addons = this.state.addons\n        addons[index][state] = event.target.value\n        this.setState({ addons })\n    }\n    onBlur = (index, state) => {\n        const addons = this.state.addons\n        if (state === \"title\")\n            addons[index]['titleError'] = !!validateFunc({ addonTitle: addons[index][state] }, 'addonTitle')\n        if (state === \"description\")\n            addons[index]['descriptionError'] = !!validateFunc({ addonDescription: addons[index][state] }, 'addonDescription')\n        if (state === \"quantity_minimum\") {\n            addons[index]['quantity_minimumError'] = !!validateFunc({ addonQuantityMinimum: addons[index][state] }, 'addonQuantityMinimum')\n            addons[index]['quantity_minimumError'] = addons[index]['quantity_minimumError'] || addons[index]['quantity_minimum'] > addons[index]['quantity_maximum']\n        }\n        if (state === \"quantity_maximum\") {\n            addons[index]['quantity_maximumError'] = !!validateFunc({ addonQuantityMaximum: addons[index][state] }, 'addonQuantityMaximum')\n            addons[index]['quantity_maximumError'] = addons[index]['quantity_maximumError'] || addons[index]['quantity_maximum'] < addons[index]['quantity_minimum']\n        }\n        if (state === \"options\") {\n            addons[index]['optionsError'] = addons[index]['options'].length === 0\n        }\n        this.setState({ addons })\n    }\n    onSelectOption = (index, id) => {\n        const addons = this.state.addons\n        const option = addons[index].options.indexOf(id)\n        if (option < 0)\n            addons[index].options.push(id)\n        else\n            addons[index].options.splice(option, 1)\n        this.setState({ addons })\n    }\n    updateOptions = (ids) => {\n        console.log(this.state.addonIndex,ids)\n        const addons = this.state.addons\n        addons[this.state.addonIndex].options = addons[this.state.addonIndex].options.concat(ids)\n        this.setState({ addons })\n    }\n    onAdd = (index) => {\n        const addons = this.state.addons\n        if (index === addons.length - 1)\n            addons.push({ title: '', description: '', quantity_minimum: 0, quantity_maximum: 1, options: [] })\n        else\n            addons.splice(index + 1, 0, { title: '', description: '', quantity_minimum: 0, quantity_maximum: 1, options: [] });\n        this.setState({ addons })\n    }\n    onRemove = (index) => {\n        if (this.state.addons.length === 1 && index === 0) {\n            return\n        }\n        const addons = this.state.addons\n        addons.splice(index, 1);\n        this.setState({ addons })\n    }\n    toggleModal = (index) => {\n        console.log(index)\n        this.setState({ optionsModal: !this.state.optionsModal, addonIndex: index })\n    }\n    validate = () => {\n        const addons = this.state.addons\n        addons.map((addon, index) => {\n            this.onBlur(index, 'title')\n            this.onBlur(index, 'description')\n            this.onBlur(index, 'quantity_minimum')\n            this.onBlur(index, 'quantity_maximum')\n            this.onBlur(index, 'options')\n            return addon\n        })\n        const error = addons.filter(addon => addon.titleError || addon.descriptionError || addon.quantity_minimumError || addon.quantity_maximumError || addon.optionsError)\n        if (!error.length)\n            return true\n        return false\n    }\n    onCompleted = ({ createAddons, editAddon }) => {\n        if (createAddons) {\n            this.setState({\n                addons: [{\n                    title: '',\n                    description: '',\n                    quantity_minimum: 0,\n                    quantity_maximum: 1,\n                    options: [],\n                    titleError: false,\n                    descriptionError: false,\n                    optionsError: false,\n                    quantity_minimumError: false,\n                    quantity_maximumError: false\n                }],\n                success: 'Saved', error: ''\n            })\n        }\n        if (editAddon)\n            this.setState({ success: 'Saved', error: '' })\n    }\n    onError = (error) => {\n        this.setState({ error: 'An error occured while saving,Try again', success: '' })\n    }\n    update = (proxy, { data: { createAddons } }) => {\n        try {\n            if (createAddons) {\n                const data = proxy.readQuery({ query: GET_ADDONS });\n                data.addons = data.addons.concat(createAddons);\n                proxy.writeQuery({ query: GET_ADDONS, data });\n                if (this.props.updateAddonsList)\n                    this.props.updateAddonsList(createAddons.map(({ _id }) => _id))\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    onDismiss = () => {\n        this.setState({ error: '', success: '' })\n    }\n    render() {\n        const { t } = this.props\n        return (\n            <Card>\n                <CardHeader>Addons</CardHeader>\n                <CardBody>\n                    <Form>\n                        <div >\n                            {this.state.addons.map((addon, index) => (\n                                <div key={index}>\n                                    <Row>\n                                        <Col lg=\"6\">\n                                            <Row>\n                                                <Col lg=\"12\">\n                                                    <label\n                                                        className=\"form-control-label\"\n                                                        htmlFor=\"input-title\"\n                                                    >\n                                                        {t(\"Title\")}\n                                                    </label>\n                                                    <br />\n                                                    <small>{t(\"Character limit of max length 60\")}</small>\n                                                    <FormGroup className={addon.titleError === true ? \"has-danger\" : \"\"}>\n                                                        <Input\n                                                            className=\"form-control-alternative\"\n                                                            id=\"input-title\"\n                                                            placeholder=\"e.g Pepsi\"\n                                                            type=\"text\"\n                                                            maxLength=\"60\"\n                                                            value={addon.title}\n                                                            onChange={(event) => {\n                                                                this.onChange(event, index, 'title')\n                                                            }}\n                                                            onBlur={event => { this.onBlur(index, 'title') }}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col lg=\"12\">\n                                                    <label\n                                                        className=\"form-control-label\"\n                                                        htmlFor=\"input-description\"\n                                                    >\n                                                        {t(\"Description\")}\n                                                    </label>\n                                                    <br />\n                                                    <small>{t(\"Character limit of max length 60\")}</small>\n                                                    <FormGroup className={addon.descriptionError === true ? \"has-danger\" : \"\"}>\n                                                        <Input\n                                                            className=\"form-control-alternative\"\n                                                            id=\"input-description\"\n                                                            placeholder=\"e.g Optional\"\n                                                            type=\"text\"\n                                                            maxLength=\"60\"\n                                                            value={addon.description || ''}\n                                                            onChange={(event) => {\n                                                                this.onChange(event, index, 'description')\n                                                            }}\n                                                            onBlur={(event) => { this.onBlur(index, 'description') }}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col lg=\"12\">\n                                                    <label\n                                                        className=\"form-control-label\"\n                                                        htmlFor=\"input-minimum\"\n                                                    >\n                                                        {t(\"Quantity Minimum\")}\n                                                    </label>\n                                                    <br />\n                                                    <small>{t(\"Must be a less than or equal to Maximum\")}</small>\n                                                    <FormGroup className={addon.quantity_minimumError === true ? \"has-danger\" : \"\"}>\n                                                        <Input\n                                                            className=\"form-control-alternative\"\n                                                            id=\"input-minimum\"\n                                                            placeholder=\"e.g 90.25\"\n                                                            type=\"number\"\n                                                            min={'0'}\n                                                            value={addon.quantity_minimum}\n                                                            onChange={(event) => {\n                                                                this.onChange(event, index, 'quantity_minimum')\n                                                            }}\n                                                            onBlur={(event) => { this.onBlur(index, 'quantity_minimum') }}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col lg=\"12\">\n                                                    <label\n                                                        className=\"form-control-label\"\n                                                        htmlFor=\"input-maximum\"\n                                                    >\n                                                        {t(\"Quantity Maximum\")}\n                                                    </label>\n                                                    <br />\n                                                    <small>{t(\"Must be a greater than or equal to Minimum\")}</small>\n                                                    <FormGroup className={addon.quantity_maximumError === true ? \"has-danger\" : \"\"}>\n                                                        <Input\n                                                            className=\"form-control-alternative\"\n                                                            id=\"input-maximum\"\n                                                            placeholder=\"e.g 90.25\"\n                                                            type=\"number\"\n                                                            min={'1'}\n                                                            value={addon.quantity_maximum}\n                                                            onChange={(event) => {\n                                                                this.onChange(event, index, 'quantity_maximum')\n                                                            }}\n                                                            onBlur={(event) => { this.onBlur(index, 'quantity_maximum') }}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                        </Col>\n                                        <Col lg=\"6\">\n                                            <Row className=\"mb-2\">\n                                                <Col>\n                                                    <label\n                                                        className=\"form-control-label\">\n                                                        {t(\"Options\")}\n                                                    </label>\n                                                    <br />\n                                                    {!this.state.addons[index].options.length && <small className=\"text-red\">{t(\"Select atleast one Option\")}</small>}\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col\n                                                ><FormGroup>\n                                                        <Button color=\"warning\" onClick={this.toggleModal.bind(this, index)}>New</Button>\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                            <Row style={{ maxHeight: \"67vh\", overflowY: \"scroll\" }}>\n                                                <Col>\n                                                    <Query query={GET_OPTIONS}>\n                                                        {({ loading, error, data }) => {\n                                                            if (loading) return \"Loading ...\"\n                                                            if (error) return \"Error ...\"\n                                                            return data.options.map((option) => (\n                                                                <FormGroup key={option._id} check style={{ width: '100%', marginTop: '10px' }}>\n                                                                    <Label check>\n                                                                        <Input checked={this.state.addons[index].options.includes(option._id)} onChange={this.onChangeOption} value={option._id} type=\"checkbox\" onClick={this.onSelectOption.bind(this, index, option._id)} />\n                                                                        {`${option.title} (Description: ${option.description})(Price: ${option.price})`}\n                                                                    </Label>\n                                                                </FormGroup>\n                                                            ))\n                                                        }}\n                                                    </Query>\n                                                </Col>\n                                            </Row>\n                                            {!this.props.addon && <Row className=\"mt-2\">\n                                                <Col>\n                                                    <label\n                                                        className=\"form-control-label\"\n                                                    >\n                                                        {t(\"Add/Remove Addons\")}\n                                                    </label>\n                                                    <FormGroup>\n                                                        <Button color=\"danger\" onClick={() => { this.onRemove(index) }}>-</Button>\n                                                        <Button onClick={() => { this.onAdd(index) }} color=\"primary\">+</Button>\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>}\n                                        </Col>\n                                    </Row>\n                                    <hr />\n                                </div>\n                            ))}\n                            < Row >\n                                <Col lg={{ offset: 4, size: 4 }}>\n                                    <Mutation mutation={this.props.addon ? EDIT_ADDON : CREATE_ADDONS}\n                                        onCompleted={this.onCompleted}\n                                        onError={this.onError}\n                                        update={this.update}>\n                                        {(mutate, { loading }) => {\n                                            if (loading) return (<Button disabled color=\"success\" size=\"lg\" block>Saving</Button>)\n                                            return (< Button\n                                                color=\"primary\" size=\"lg\" block\n                                                onClick={() => {\n                                                    if (this.validate())\n                                                        this.props.addon ? mutate({\n                                                            variables: {\n                                                                addonInput: {\n                                                                    _id: this.props.addon._id,\n                                                                    title: this.state.addons[0].title,\n                                                                    description: this.state.addons[0].description,\n                                                                    options: this.state.addons[0].options,\n                                                                    quantity_minimum: +this.state.addons[0].quantity_minimum,\n                                                                    quantity_maximum: +this.state.addons[0].quantity_maximum\n                                                                }\n                                                            }\n                                                        }) :\n                                                            mutate({\n                                                                variables: {\n                                                                    addonInput:\n                                                                        this.state.addons.map(({ title, description, options, quantity_minimum, quantity_maximum }) =>\n                                                                            ({ title, description, options, quantity_minimum: +quantity_minimum, quantity_maximum: +quantity_maximum }))\n                                                                }\n                                                            })\n                                                }}\n                                            > Save</Button>)\n                                        }}\n                                    </Mutation>\n                                </Col>\n                                <Alert color=\"success\" isOpen={!!this.state.success} toggle={this.onDismiss}>\n                                    {this.state.success}\n                                </Alert>\n                                <Alert color=\"danger\" isOpen={!!this.state.error} toggle={this.onDismiss}>\n                                    {this.state.error}\n                                </Alert>\n                            </Row>\n                        </div>\n                    </Form>\n                    {/* <OptionsList /> */}\n                </CardBody>\n                <Modal\n                    className=\"modal-dialog-centered\"\n                    size=\"lg\"\n                    isOpen={this.state.optionsModal}\n                    toggle={() => { this.toggleModal() }}>\n                    <OptionsComponent updateOptions={this.updateOptions} />\n                </Modal>\n            </Card >\n        )\n    }\n}\n\nexport default compose(withApollo, withTranslation())(Addon)","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query, Mutation } from \"react-apollo\";\nimport { validateFunc } from '../../constraints/constraints'\nimport { withTranslation } from 'react-i18next';\n// reactstrap components\nimport {\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    FormGroup,\n    Form,\n    Input,\n    Row,\n    Col,\n    Alert,\n    Modal,\n    Label\n} from \"reactstrap\";\n// core components\nimport { cloudinary_upload_url, cloudinary_food } from \"../../config/config\";\nimport { createFood, editFood, getCategories, getAddons, getFoods } from '../../apollo/server'\nimport AddonComponent from \"../Addon/Addon\";\n\nconst CREATE_FOOD = gql`${createFood}`\nconst EDIT_FOOD = gql`${editFood}`\nconst GET_CATEGORIES = gql`${getCategories}`\nconst GET_ADDONS = gql`${getAddons}`\nconst GET_FOODS = gql`${getFoods}`\n\nclass Food extends React.Component {\n    constructor(props) {\n        super(props)\n        const variations = props.food ? props.food.variations.map(({ title, price, addons }) => {\n            return { title, price, addons: addons.map(addon => addon._id), titleError: null, priceError: null }\n        }) : [{ title: '', price: '', addons: [], titleError: null, priceError: null }]\n        this.state = {\n            mutation: props.food ? EDIT_FOOD : CREATE_FOOD,\n            title: props.food ? props.food.title : '',\n            description: props.food ? props.food.description : '',\n            imgMenu: props.food ? props.food.img_url : '',\n            variations,\n            category: props.food ? props.food.category._id : '',\n            error: '',\n            success: '',\n            titleError: null,\n            descriptionError: null,\n            categoryError: null,\n            addonsModal: false,\n            varitionIndex: 0\n        };\n    }\n    onBlur = (field) => {\n        this.setState({ [field + 'Error']: !validateFunc({ [field]: this.state[field] }, field) })\n    }\n    handleChange = (event) => {\n        this.setState({ category: event.target.value })\n    }\n    filterImage = (event) => {\n        let images = [];\n        for (var i = 0; i < event.target.files.length; i++) {\n            images[i] = event.target.files.item(i);\n        }\n        images = images.filter(image => image.name.match(/\\.(jpg|jpeg|png|gif)$/))\n        let message = `${images.length} valid image(s) selected`\n        console.log(message)\n        return images.length ? images[0] : undefined\n    }\n    selectImage = (event, state) => {\n        let result = this.filterImage(event)\n        if (result)\n            this.imageToBase64(result)\n    }\n\n    onAdd = (index) => {\n        const variations = this.state.variations\n        if (index === variations.length - 1)\n            variations.push({ title: '', price: '', addons: [], titleError: null, priceError: null })\n        else\n            variations.splice(index + 1, 0, { title: '', price: '', addons: [], titleError: null, priceError: null });\n        this.setState({ variations })\n    }\n    onRemove = (index) => {\n        if (this.state.variations.length === 1 && index === 0) {\n            return\n        }\n        const variations = this.state.variations\n        variations.splice(index, 1);\n        this.setState({ variations })\n    }\n    handleVariationChange = (event, index, type) => {\n\n        let variations = this.state.variations\n        if (type === \"price\") {\n            variations[index][type] = event.target.value\n            this.setState({ variations })\n        }\n        else if (type === \"title\") {\n            variations[index][type] = event.target.value.length === 1 ? event.target.value.toUpperCase() : event.target.value\n            this.setState({ variations })\n        }\n    }\n    onSubmitValidaiton = () => {\n        let titleError = !validateFunc({ title: this.state.title }, 'title')\n        let descriptionError = !validateFunc({ description: this.state.description }, 'description')\n        let categoryError = !validateFunc({ category: this.state.category }, 'category')\n        let variations = this.state.variations\n        variations.map((variation) => {\n            variation.priceError = !validateFunc({ price: variation.price }, \"price\")\n            let error = false\n            let occ = variations.filter(v => v.title === variation.title)\n            if (occ.length > 1)\n                error = true\n            variation.titleError = error ? !error : !validateFunc({ title: variation.title }, \"title\")\n            return variation\n        })\n        let variationsError = !variations.filter(variation => !variation.priceError || !variation.titleError).length\n        this.setState({ titleError, descriptionError, categoryError, variations })\n        return (titleError && descriptionError && categoryError && variationsError)\n    }\n    clearFields = () => {\n        this.setState({\n            title: '',\n            description: '',\n            imgMenu: '',\n            variations: [{ title: '', price: '', addons: [], titleError: null, priceError: null }],\n            titleError: null,\n            descriptionError: null,\n            categoryError: null\n        })\n    }\n    onBlurVariation = (index, type) => {\n        let error = false;\n        let variations = this.state.variations\n        if (type === \"title\") {\n            let occ = variations.filter(v => v.title === variations[index][type])\n            if (occ.length > 1)\n                error = true\n        }\n        variations[index][type + 'Error'] = error ? !error : !validateFunc({ [type]: variations[index][type] }, type)\n        this.setState({ variations })\n    }\n    onCompleted = (data) => {\n        if (!this.props.food) this.clearFields()\n        const message = this.props.food ? 'Food updated successfully' : 'Food added successfully'\n        this.setState({ error: '', success: message })\n    }\n    updateAddonsList = (ids) => {\n        const variations = this.state.variations\n        variations[this.state.varitionIndex].addons = variations[this.state.varitionIndex].addons.concat(ids)\n        this.setState({ variations })\n    }\n    onError = (error) => {\n        this.setState({ error: 'Failed.Please try again', success: '' })\n    }\n    //show Create Addon modal\n    toggleModal = (index) => {\n        console.log(index)\n        this.setState({\n            addonsModal: !this.state.addonsModal,\n            varitionIndex: index\n        });\n    }\n    onSelectAddon = (index, id) => {\n        console.log(index, id)\n        const variations = this.state.variations\n        const addon = variations[index].addons.indexOf(id)\n        if (addon < 0)\n            variations[index].addons.push(id)\n        else\n            variations[index].addons.splice(addon, 1)\n        this.setState({ variations })\n    }\n    onChange = (event) => {\n        //added this keep default checked on editing\n        // console.log(event)\n    }\n\n    update = (proxy, { data: { createFood } }) => {\n        try {\n            if (createFood) {\n                const data = proxy.readQuery({ query: GET_FOODS });\n                data.foods.push(createFood);\n                proxy.writeQuery({ query: GET_FOODS, data });\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    onDismiss = () => {\n        this.setState({ success: '', error: '' })\n    }\n    imageToBase64 = (imgUrl) => {\n        let fileReader = new FileReader()\n        fileReader.onloadend = () => {\n            this.setState({ imgMenu: fileReader.result })\n        }\n        fileReader.readAsDataURL(imgUrl)\n    }\n    uploadImageToCloudinary = async () => {\n        if (this.state.imgMenu === '')\n            return this.state.imgMenu\n        if (this.props.food && this.props.food.img_url === this.state.imgMenu)\n            return this.state.imgMenu\n\n        let apiUrl = cloudinary_upload_url;\n        let data = {\n            \"file\": this.state.imgMenu,\n            \"upload_preset\": cloudinary_food,\n        }\n        try {\n            const result = await fetch(apiUrl, {\n                body: JSON.stringify(data),\n                headers: {\n                    'content-type': 'application/json'\n                },\n                method: 'POST',\n            })\n            const imageData = await result.json()\n            return imageData.secure_url\n        }\n        catch (e) {\n            console.log(e)\n        }\n\n    }\n    render() {\n        const { t } = this.props;\n        return (\n            <>\n                <Row>\n                    <Col className=\"order-xl-1\" >\n                        <Card className=\"bg-secondary shadow\">\n                            <CardHeader className=\"bg-white border-0\">\n                                <Row className=\"align-items-center\">\n                                    <Col xs=\"8\">\n                                        <h3 className=\"mb-0\">{this.props.food ? t(\"Edit Food\") : t(\"Add Food\")}</h3>\n                                    </Col>\n                                </Row>\n                            </CardHeader>\n                            <CardBody>\n                                <Mutation\n                                    mutation={this.state.mutation}\n                                    onCompleted={this.onCompleted}\n                                    onError={this.onError}\n                                    update={this.update}\n                                >\n                                    {(mutate, { loading, error }) => {\n                                        if (loading) return t(\"Loading\")\n                                        return (\n                                            < Form >\n                                                <div className=\"pl-lg-4\">\n                                                    <Row>\n                                                        <Col lg=\"6\">\n                                                            <Row>\n                                                                <Col>\n                                                                    <label\n                                                                        className=\"form-control-label\"\n                                                                        htmlFor=\"input-title\"\n                                                                    >{t(\"Title\")}\n                                                                    </label>\n                                                                    <br />\n                                                                    <small>{t(\"Character limit of max length 50\")}</small>\n                                                                    <FormGroup className={this.state.titleError === null ? \"\" : this.state.titleError ? \"has-success\" : \"has-danger\"}>\n\n                                                                        <Input\n                                                                            className=\"form-control-alternative\"\n                                                                            id=\"input-title\"\n                                                                            placeholder=\"e.g Breakfast\"\n                                                                            type=\"text\"\n                                                                            maxLength=\"50\"\n                                                                            value={this.state.title}\n                                                                            onChange={(event) => {\n                                                                                this.setState({ title: event.target.value })\n                                                                            }}\n                                                                            onBlur={event => { this.onBlur('title') }}\n                                                                        />\n                                                                    </FormGroup>\n                                                                </Col>\n                                                            </Row>\n                                                            <Row>\n                                                                <Col>\n                                                                    <label\n                                                                        className=\"form-control-label\"\n                                                                        htmlFor=\"input-description\"\n                                                                    >\n                                                                        {t(\"Description\")}\n                                                                    </label>\n                                                                    <br />\n                                                                    <small>{t(\"Character limit of max length 140\")}</small>\n                                                                    <FormGroup className={this.state.descriptionError === null ? \"\" : this.state.descriptionError ? \"has-success\" : \"has-danger\"}>\n                                                                        <Input\n                                                                            className=\"form-control-alternative\"\n                                                                            id=\"input-description\"\n                                                                            placeholder=\"e.g All happiness depends on leisurely breakfast.\"\n                                                                            minLength=\"20\"\n                                                                            maxLength=\"140\"\n                                                                            type=\"textarea\"\n                                                                            value={this.state.description}\n                                                                            onChange={(event) => {\n                                                                                this.setState({ description: event.target.value })\n                                                                            }}\n\n                                                                            onBlur={event => { this.onBlur('description') }}\n                                                                        />\n                                                                    </FormGroup>\n                                                                </Col>\n                                                            </Row>\n                                                            <Row>\n                                                                <Col>\n                                                                    <label\n                                                                        className=\"form-control-label\"\n                                                                        htmlFor=\"input-category\"\n                                                                    >{t(\"Category\")}</label>\n                                                                    <Query query={GET_CATEGORIES}>\n                                                                        {({ data, loading, error }) => {\n                                                                            if (loading) return t(\"Loading\")\n                                                                            if (error) return t(\"Error\")\n                                                                            return (\n                                                                                <FormGroup className={this.state.categoryError === null ? \"\" : this.state.categoryError ? \"has-success\" : \"has-danger\"}>\n                                                                                    <Input\n                                                                                        type=\"select\"\n                                                                                        name=\"select\"\n                                                                                        id=\"exampleSelect\"\n                                                                                        value={this.state.category}\n                                                                                        onChange={this.handleChange}\n                                                                                        onBlur={event => { this.onBlur('category') }}>\n                                                                                        {!this.state.category && <option value={\"\"}>{t(\"Select\")}</option>}\n                                                                                        {\n                                                                                            data.categories.map(category => <option value={category._id} key={category._id} >{category.title}</option>)\n                                                                                        }\n                                                                                    </Input>\n                                                                                </FormGroup>\n                                                                            )\n                                                                        }}</Query>\n                                                                </Col>\n                                                            </Row>\n                                                            <Row>\n                                                                <Col>\n                                                                    <h3 className=\"mb-0\"> {t(\"Food Image\")}</h3>\n                                                                    <FormGroup>\n                                                                        <div className=\"card-title-image\">\n                                                                            {this.state.imgMenu && typeof this.state.imgMenu === 'string' && <a href=\"#pablo\" onClick={e => e.preventDefault()}>\n                                                                                <img\n                                                                                    alt=\"...\"\n                                                                                    className=\"rounded-rectangle\"\n                                                                                    src={this.state.imgMenu}\n                                                                                />\n                                                                            </a>}\n                                                                            <input\n                                                                                className=\"mt-4\"\n                                                                                type=\"file\"\n                                                                                onChange={(event) => { this.selectImage(event, \"imgMenu\") }} />\n                                                                        </div>\n                                                                    </FormGroup>\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                        <Col lg=\"6\">\n                                                            <h3 className=\"mb-0\">{t(\"Variations\")}</h3>\n                                                            <Row>\n                                                                <Col lg=\"6\">\n                                                                    <FormGroup>\n                                                                        <label\n                                                                            className=\"form-control-label\"\n                                                                            htmlFor=\"input-type\"\n                                                                        >{t(\"Title\")}\n                                                                        </label>\n                                                                        <br />\n                                                                        <small style={{ color: 'blue' }}>Title must be unqiue</small>\n                                                                    </FormGroup>\n                                                                </Col>\n                                                                <Col lg=\"6\">\n                                                                    <FormGroup>\n                                                                        <label\n                                                                            className=\"form-control-label\"\n                                                                            htmlFor=\"input-price\"\n                                                                        >\n                                                                            {t(\"Price\")}\n                                                                        </label>\n                                                                    </FormGroup>\n                                                                </Col>\n                                                            </Row>\n\n                                                            {this.state.variations.map((variation, index) =>\n                                                                <div key={index}>\n                                                                    <Row className=\"mb-2\">\n                                                                        <Col lg=\"6\">\n                                                                            <Button onClick={this.toggleModal.bind(this, index)} color=\"warning\">New Addon</Button>\n                                                                        </Col>\n                                                                    </Row>\n                                                                    <Row>\n                                                                        <Col lg=\"6\">\n                                                                            <FormGroup className={variation.titleError === false ? \"has-danger\" : variation.titleError === true ? \"has-success\" : ''}>\n\n                                                                                <Input\n                                                                                    className=\"form-control-alternative\"\n                                                                                    value={variation.title}\n                                                                                    id=\"input-type\"\n                                                                                    placeholder=\"e.g Small,Medium,Large\"\n                                                                                    type=\"text\"\n                                                                                    autoComplete='off'\n                                                                                    onChange={(event) => {\n                                                                                        this.handleVariationChange(event, index, \"title\", \"variations\")\n                                                                                    }}\n                                                                                    onBlur={event => { this.onBlurVariation(index, \"title\") }}\n                                                                                />\n                                                                            </FormGroup>\n                                                                        </Col>\n                                                                        <Col lg=\"6\">\n                                                                            <FormGroup className={variation.priceError === false ? \"has-danger\" : variation.priceError === true ? \"has-success\" : ''}>\n                                                                                <Input\n                                                                                    className=\"form-control-alternative\"\n                                                                                    value={variation.price}\n                                                                                    id=\"input-price\"\n                                                                                    placeholder=\"e.g 9.99\"\n                                                                                    type=\"number\"\n                                                                                    onChange={(event) => {\n                                                                                        this.handleVariationChange(event, index, \"price\", \"variations\")\n                                                                                    }}\n                                                                                    onBlur={event => { this.onBlurVariation(index, \"price\") }}\n                                                                                />\n                                                                            </FormGroup>\n                                                                        </Col>\n                                                                    </Row>\n                                                                    <Row style={{ maxHeight: \"67vh\", overflowY: \"scroll\" }}>\n                                                                        <Col lg=\"12\">\n                                                                            <Query query={GET_ADDONS}>\n                                                                                {({ loading, error, data }) => {\n                                                                                    if (loading) return \"Loading ...\"\n                                                                                    if (error) return \"Error ...\"\n                                                                                    return data.addons.map((addon, indexAddon) => (\n                                                                                        <FormGroup key={indexAddon} check className=\"mb-2\">\n                                                                                            <Label check>\n                                                                                                <Input value={addon._id} type=\"checkbox\" checked={this.state.variations[index].addons.includes(addon._id)} onChange={this.onChange} onClick={this.onSelectAddon.bind(this, index, addon._id)} />\n                                                                                                {`${addon.title} (Description: ${addon.description})(Min: ${addon.quantity_minimum})(Max: ${addon.quantity_maximum})`}\n                                                                                            </Label>\n                                                                                        </FormGroup>\n                                                                                    ))\n                                                                                }}\n                                                                            </Query>\n                                                                        </Col>\n                                                                    </Row>\n                                                                    <Row className=\"mt-2\">\n                                                                        <Col lg=\"6\">\n                                                                            <FormGroup>\n                                                                                <Button color=\"danger\" onClick={() => { this.onRemove(index) }}>-</Button>\n                                                                                <Button onClick={() => { this.onAdd(index) }} color=\"primary\">+</Button>\n                                                                            </FormGroup>\n                                                                        </Col>\n                                                                    </Row>\n                                                                </div>\n                                                            )\n                                                            }\n                                                        </Col>\n                                                    </Row>\n                                                    <hr />\n                                                    <Row className=\"mt-2 justify-content-center\">\n                                                        <Col xs=\"4\">\n                                                            <Button\n                                                                color=\"primary\"\n                                                                href=\"#pablo\"\n                                                                className=\"btn-block\"\n                                                                onClick={async e => {\n                                                                    e.preventDefault()\n                                                                    if (this.onSubmitValidaiton()) {\n                                                                        mutate({\n                                                                            variables: {\n                                                                                foodInput: {\n                                                                                    _id: this.props.food ? this.props.food._id : '',\n                                                                                    title: this.state.title,\n                                                                                    description: this.state.description,\n                                                                                    img_url: await this.uploadImageToCloudinary(),\n                                                                                    category: this.state.category,\n                                                                                    variations: this.state.variations.map(({ title, price, addons }) => { return { title, price: +price, addons } })\n                                                                                }\n                                                                            }\n                                                                        })\n                                                                    }\n                                                                    this.setState({ error: '', success: '' })\n                                                                }}\n                                                                size=\"lg\"\n                                                            >\n                                                                {t(\"Save\")}\n                                                            </Button>\n                                                        </Col>\n                                                    </Row>\n                                                    <Row >\n                                                        <Col lg=\"6\">\n                                                            <Alert color=\"success\" isOpen={!!this.state.success} toggle={this.onDismiss}>\n                                                                <span className=\"alert-inner--icon\">\n                                                                    <i className=\"ni ni-like-2\" />\n                                                                </span>{\" \"}\n                                                                <span className=\"alert-inner--text\">\n                                                                    <strong>{t(\"Success\")}!</strong> {this.state.success}</span>\n                                                            </Alert>\n                                                            <Alert color=\"danger\" isOpen={!!this.state.error} toggle={this.onDismiss}>\n                                                                <span className=\"alert-inner--icon\">\n                                                                    <i className=\"ni ni-like-2\" />\n                                                                </span>{\" \"}\n                                                                <span className=\"alert-inner--text\">\n                                                                    <strong>{t(\"Danger\")}!</strong> {this.state.error}</span>\n                                                            </Alert>\n                                                        </Col>\n                                                    </Row>\n\n                                                </div>\n                                            </Form>\n                                        )\n                                    }}</Mutation>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n                <Modal\n                    className=\"modal-dialog-centered\"\n                    size=\"lg\"\n                    isOpen={this.state.addonsModal}\n                    toggle={() => { this.toggleModal() }}\n                >\n                    <AddonComponent updateAddonsList={this.updateAddonsList} />\n                </Modal>\n            </>\n        )\n    }\n}\nexport default withTranslation()(Food)","\n/*\n * Transform string by adding newline after x spaces\n * parameter: String, Number\n * return: String\n*/\nconst transformToNewline = (input,spaces=3) => {\n    var space_count = 0\n    var result = []\n    var splitted_desc = input.split('')\n    for (let i = 0; i < splitted_desc.length; i++) {\n        result.push(splitted_desc[i])\n        if (splitted_desc[i] === ' ') {\n            ++space_count\n            if (space_count % spaces === 0 && space_count !== 0)\n                result.push('\\n')\n        }\n    }\n    return result.join('')\n}\n\nexport { transformToNewline }","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query, Mutation } from \"react-apollo\";\nimport { withTranslation } from 'react-i18next';\n// reactstrap components\nimport {\n    Card,\n    CardHeader,\n    Container,\n    Row,\n    Table,\n    Media,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    Modal,\n} from \"reactstrap\";\n// core components\nimport Header from \"components/Headers/Header.jsx\";\nimport { getFoods, deleteFood } from '../apollo/server';\nimport FoodComponent from '../components/Food/Food'\nimport { transformToNewline } from '../utils/stringManipulations'\n\nconst GET_FOODS = gql`${getFoods}`\nconst DELETE_FOOD = gql`${deleteFood}`\n\n\nclass Food extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            editModal: false\n        };\n    }\n    toggleModal = (food) => {\n        this.setState({\n            editModal: !this.state.editModal,\n            food\n        });\n    }\n\n    render() {\n        const { t } = this.props;\n        return (\n            <>\n                <Header />\n                {/* Page content */}\n                <Container className=\"mt--7\" fluid>\n                    <FoodComponent />\n                    {/* Table */}\n                    <Row className=\"mt-5\">\n                        <div className=\"col\">\n                            <Card className=\"shadow\">\n                                <CardHeader className=\"border-0\">\n                                    <h3 className=\"mb-0\">{t(\"Foods\")}</h3>\n                                </CardHeader>\n                                <Table className=\"align-items-center table-flush\" responsive>\n                                    <thead className=\"thead-light\">\n                                        <tr>\n                                            <th scope=\"col\">{t(\"Title\")}</th>\n                                            <th scope=\"col\">{t(\"Description\")}</th>\n                                            <th scope=\"col\">{t(\"Category\")}</th>\n                                            <th scope=\"col\">{t(\"Image\")}</th>\n                                            <th scope=\"col\">{t(\"Actions\")}</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <Query query={GET_FOODS}>\n                                            {({ loading, error, data }) => {\n                                                if (loading) return <tr><td>{t(\"Loading\")}</td></tr>;\n                                                if (error) return <tr><td>`${t(\"Error\")}! ${error.message}`</td></tr>;\n                                                return data.foods.map(food =>\n                                                    <tr key={food._id}>\n                                                        <th scope=\"row\">\n                                                            <Media>\n                                                                <span className=\"mb-0 text-sm\">\n                                                                    {food.title}\n                                                                </span>\n                                                            </Media>\n                                                        </th>\n                                                        <td style={{ whiteSpace: 'pre' }}>{transformToNewline(food.description, 3)}</td>\n                                                        <td> {food.category.title}</td>\n                                                        <td>\n                                                            {!!food.img_url && <img className=\"img-responsive\" src={food.img_url} alt=\"img menu\" />}\n                                                            {!food.img_url && \"No Image\"}\n                                                        </td>\n                                                        <td className=\"text-right\">\n                                                            <UncontrolledDropdown>\n                                                                <DropdownToggle\n                                                                    className=\"btn-icon-only text-light\"\n                                                                    href=\"#pablo\"\n                                                                    role=\"button\"\n                                                                    size=\"sm\"\n                                                                    color=\"\"\n                                                                    onClick={e => e.preventDefault()}\n                                                                >\n                                                                    <i className=\"fas fa-ellipsis-v\" />\n                                                                </DropdownToggle>\n                                                                <DropdownMenu className=\"dropdown-menu-arrow\" right>\n                                                                    <DropdownItem\n                                                                        href=\"#pablo\"\n                                                                        onClick={e => {\n                                                                            e.preventDefault()\n                                                                            this.toggleModal(food)\n                                                                        }\n                                                                        }\n                                                                    >\n                                                                        {t(\"Edit\")}\n                                                                    </DropdownItem>\n                                                                    <Mutation mutation={DELETE_FOOD}\n                                                                        onCompleted={this.onCompleted}\n                                                                        onError={this.onError}\n                                                                        refetchQueries={[{ query: GET_FOODS }]} >\n                                                                        {(deleteFood, { loading }) => {\n                                                                            return <DropdownItem\n                                                                                href=\"#pablo\"\n                                                                                onClick={e => {\n                                                                                    e.preventDefault()\n                                                                                    deleteFood({ variables: { id: food._id } })\n                                                                                }}\n                                                                            >\n                                                                                {t(\"Delete\")}\n                                                                            </DropdownItem>\n                                                                        }}\n                                                                    </Mutation>\n                                                                </DropdownMenu>\n                                                            </UncontrolledDropdown>\n                                                        </td>\n                                                    </tr>\n                                                )\n                                            }}\n                                        </Query>\n                                    </tbody>\n                                </Table>\n\n                            </Card>\n                        </div>\n                    </Row>\n                    <Modal\n                        className=\"modal-dialog-centered\"\n                        size=\"lg\"\n                        isOpen={this.state.editModal}\n                        toggle={() => { this.toggleModal() }}\n                    >\n                        <FoodComponent food={this.state.food} />\n                    </Modal>\n                </Container>\n            </>\n        );\n    }\n}\n\nexport default withTranslation()(Food);\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Mutation, Query } from \"react-apollo\";\nimport { withTranslation } from 'react-i18next';\n// reactstrap components\nimport {\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    FormGroup,\n    Form,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    Row,\n    Col,\n    Alert,\n    ListGroup,\n    ListGroupItem,\n    Badge,\n    Collapse,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    UncontrolledDropdown\n} from \"reactstrap\";\nimport { validateFunc } from '../../constraints/constraints';\nimport {\n    updateStatus,\n    getAvailableRiders,\n    assignRider,\n    getOrderStatuses,\n    updateOrderStatus,\n    getPaymentStatuses,\n    updatePaymentStatus,\n    getConfiguration\n} from '../../apollo/server';\n\n\n\n\n//constants\nconst UPDATE_STATUS = gql`${updateStatus}`\nconst GET_RIDERS = gql`${getAvailableRiders}`\nconst ASSIGN_RIDER = gql`${assignRider}`\nconst GET_ORDER_STATUSES = gql`${getOrderStatuses}`\nconst GET_PAYMENT_STATUSES = gql`${getPaymentStatuses}`\nconst UPDATE_ORDER_STATUS = gql`${updateOrderStatus}`\nconst UPDATE_PAYMENT_STATUS = gql`${updatePaymentStatus}`\nconst GET_CONFIGURATION = gql`${getConfiguration}`\n\nclass Order extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            ...props.order,\n            selectedRider: '',\n            selectedStatus: '',\n            selectedPaymentStatus: '',\n            customerCollapse: true,\n            orderCollapse: true,\n            reasonError: null,\n            error: '',\n            success: ''\n        }\n    }\n\n    componentDidMount = () => {\n        console.log(this.state)\n    }\n    toggle = (state) => {\n        this.setState({ [state]: !this.state[state] })\n    }\n    validateReason = () => {\n        let reasonError = !validateFunc({ reason: this.state.reason }, 'reason')\n        this.setState({ reasonError })\n        console.log(reasonError)\n        return reasonError\n    }\n    onCompleted = ({ updateStatus, assignRider, updateOrderStatus, updatePaymentStatus }) => {\n        if (updateStatus)\n            this.setState({ status: updateStatus.status, reason: updateStatus.reason, success: 'Status Updated' })\n        else if (assignRider)\n            this.setState({ rider: { _id: assignRider.rider._id, name: assignRider.rider.name }, success: 'Rider assinged' })\n        else if (updateOrderStatus)\n            this.setState({ order_status: updateOrderStatus.order_status, success: 'Order status updated' })\n        else if (updatePaymentStatus)\n            this.setState({ payment_status: updatePaymentStatus.payment_status, paid_amount: updatePaymentStatus.paid_amount, success: 'Payment status updated' })\n    }\n    onError = (error) => {\n        this.setState({ error: error.message })\n    }\n    onChangeRider = (event) => {\n        this.setState({ selectedRider: event.target.value })\n    }\n    validateRider = () => {\n        return !!this.state.selectedRider\n    }\n    validateStatus = () => {\n        return !!this.state.selectedStatus\n    }\n    validatePaymentStatus = () => {\n        return !!this.state.selectedPaymentStatus\n    }\n    onDismiss = () => {\n        console.log('onDismiss')\n        this.setState({ error: '', success: '' })\n    }\n    onChangeStatus = (event) => {\n        this.setState({ selectedStatus: event.target.value })\n    }\n    onChangePaymentStatus = (event) => {\n        this.setState({ selectedPaymentStatus: event.target.value })\n    }\n    render() {\n        const { t } = this.props\n        return (\n            <Card className=\"bg-secondary shadow\">\n                <CardHeader className=\"bg-white border-0\">\n                    <Row className=\"align-items-center\">\n                        <Col xs=\"8\">\n                            <h3 className=\"mb-0\">{t(\"Order\")}#{this.state.order_id}</h3>\n                        </Col>\n                    </Row>\n                </CardHeader>\n                <CardBody>\n                    <Form>\n                        <div className=\"pl-lg-4\">\n                            {(this.state.error || this.state.success) && <Row>\n                                <Col lg=\"12\">\n                                    <Alert color=\"success\" isOpen={!!this.state.success} fade={true} toggle={this.onDismiss}>\n                                        <span className=\"alert-inner--text\">\n                                            {this.state.success}</span>\n                                    </Alert>\n                                    <Alert color=\"danger\" isOpen={!!this.state.error} fade={true} toggle={this.onDismiss}>\n                                        <span className=\"alert-inner--text\">\n                                            {this.state.error}</span>\n                                    </Alert>\n                                </Col>\n                            </Row>}\n                            <Row className=\"mb-2\">\n                                <Col lg=\"12\">\n                                    <div>\n                                        <Mutation mutation={UPDATE_STATUS}\n                                            onCompleted={this.onCompleted}\n                                            onError={this.onError}>\n                                            {(mutateStatus, { loading, error }) => {\n                                                if (loading) return <Button size=\"lg\" block color=\"primary\" disabled>Updating...</Button>\n                                                return (<FormGroup className={this.state.reasonError === null ? \"\" : this.state.reasonError ? \"has-success\" : \"has-danger\"}>\n                                                    <InputGroup>\n                                                        <InputGroupAddon addonType=\"prepend\">\n                                                            <Button\n                                                                disabled={this.state.status === true}\n                                                                color=\"success\"\n                                                                onClick={() => {\n                                                                    mutateStatus({ variables: { id: this.state._id, status: true, reason: '' } })\n                                                                }}\n                                                            >{this.state.status === true ? 'Accepted' : 'Accept'}</Button>\n                                                        </InputGroupAddon>\n                                                        <Input style={{ marginLeft: '5px' }}\n                                                            placeholder=\"Reason if rejected...\"\n                                                            value={this.state.reason || ''}\n                                                            // readOnly={this.state.status === false}\n                                                            onChange={(event) => {\n                                                                this.setState({ reason: event.target.value })\n                                                            }}\n                                                            maxLength={20} />\n                                                        <InputGroupAddon addonType=\"append\">\n                                                            <Button\n                                                                disabled={this.state.status === false}\n                                                                color=\"danger\"\n                                                                onClick={() => {\n                                                                    if (this.validateReason())\n                                                                        mutateStatus({ variables: { id: this.state._id, status: false, reason: this.state.reason } })\n                                                                }}\n                                                            >{this.state.status === false ? 'Rejected' : 'Reject'}</Button>\n                                                        </InputGroupAddon>\n                                                    </InputGroup>\n                                                </FormGroup>)\n                                            }\n                                            }</Mutation>\n                                    </div>\n                                </Col>\n                            </Row>\n                            {this.state.status === true && <><Row>\n                                <Col xs=\"8\">\n                                    <h3 className=\"mb-1\">{t(\"Rider\")}</h3>\n                                </Col>\n                            </Row>\n                                <Row>\n                                    <Col lg=\"6\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-rider\"\n                                        >\n                                            {t(\"Available Riders\")}\n                                        </label>\n                                        <FormGroup >\n                                            <InputGroup>\n                                                <Query query={GET_RIDERS}>\n                                                    {({ loading, error, data }) => {\n                                                        if (loading) return <option>Loading...</option>\n                                                        if (error) return <option>Error...</option>\n                                                        return (\n                                                            <Input type=\"select\" name=\"select\" id=\"input-rider\" onChange={this.onChangeRider} defaultValue={this.state.rider ? this.state.rider._id : ''} >\n                                                                <option></option>\n                                                                {data.availableRiders.map(rider => <option key={rider._id} value={rider._id}>{rider.name}</option>)}\n                                                            </Input>\n                                                        )\n                                                    }}</Query>\n                                                <InputGroupAddon addonType=\"append\">\n                                                    <Mutation mutation={ASSIGN_RIDER} onError={this.onError} onCompleted={this.onCompleted}>\n                                                        {(assignRider, { loading }) => {\n                                                            if (loading) return (<Button color=\"primary\" disabled>Saving</Button>)\n                                                            return <Button color=\"primary\" disabled={this.state.rider ? this.state.rider._id === this.state.selectedRider : false} onClick={() => {\n                                                                if (this.validateRider())\n                                                                    assignRider({ variables: { id: this.state._id, riderId: this.state.selectedRider } })\n                                                            }}>\n                                                                Assign</Button>\n                                                        }}\n                                                    </Mutation>\n                                                </InputGroupAddon>\n                                            </InputGroup>\n                                        </FormGroup>\n                                    </Col>\n                                    <Col lg=\"6\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"rider-name\"\n                                        >\n                                            {t(\"Assigned To\")}\n                                        </label>\n                                        <FormGroup >\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"rider-name\"\n                                                type=\"text\"\n                                                readOnly\n                                                value={this.state.rider ? this.state.rider.name : \"\"}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs=\"8\">\n                                        <h3 className=\"mb-1\">{t(\"Order Status\")}</h3>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col lg=\"6\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-rider\"\n                                        >\n                                            {t(\"Select Status\")}\n                                        </label>\n                                        <FormGroup >\n                                            <InputGroup>\n                                                <Query query={GET_ORDER_STATUSES}>\n                                                    {({ loading, error, data }) => {\n                                                        if (loading) return <option>Loading...</option>\n                                                        if (error) return <option>Error...</option>\n                                                        return (\n                                                            <Input type=\"select\" name=\"select\" id=\"input-rider\" onChange={this.onChangeStatus} defaultValue={this.state.order_status} >\n                                                                <option></option>\n                                                                {data.getOrderStatuses.map(status => <option key={status} value={status}>{status}</option>)}\n                                                            </Input>\n                                                        )\n                                                    }}</Query>\n                                                <InputGroupAddon addonType=\"append\">\n                                                    <Mutation mutation={UPDATE_ORDER_STATUS} onError={this.onError} onCompleted={this.onCompleted}>\n                                                        {(updateOrderStatus, { loading }) => {\n                                                            if (loading) return (<Button color=\"primary\" disabled>Saving</Button>)\n                                                            return <Button color=\"primary\" disabled={this.state.order_status === this.state.selectedStatus}\n                                                                onClick={() => {\n                                                                    if (this.validateStatus())\n                                                                        updateOrderStatus({ variables: { id: this.state._id, status: this.state.selectedStatus } })\n                                                                }}>\n                                                                Assign</Button>\n                                                        }}\n                                                    </Mutation>\n                                                </InputGroupAddon>\n                                            </InputGroup>\n                                        </FormGroup>\n                                    </Col>\n                                    <Col lg=\"6\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"rider-name\"\n                                        >\n                                            {t(\"Current Status\")}\n                                        </label>\n                                        <FormGroup >\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"rider-name\"\n                                                type=\"text\"\n                                                readOnly\n                                                value={this.state.order_status || ''}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs=\"8\">\n                                        <h3 className=\"mb-1\">{t(\"Payment Status\")}</h3>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col lg=\"6\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-rider\"\n                                        >\n                                            {t(\"Select Status\")}\n                                        </label>\n                                        <FormGroup >\n                                            <InputGroup>\n                                                <Query query={GET_PAYMENT_STATUSES}>\n                                                    {({ loading, error, data }) => {\n                                                        if (loading) return <option>Loading...</option>\n                                                        if (error) return <option>Error...</option>\n                                                        return (\n                                                            <Input type=\"select\" name=\"select\" id=\"input-rider\" onChange={this.onChangePaymentStatus} defaultValue={this.state.payment_status} >\n                                                                <option></option>\n                                                                {data.getPaymentStatuses.map(status => <option key={status} value={status}>{status}</option>)}\n                                                            </Input>\n                                                        )\n                                                    }}</Query>\n                                                <InputGroupAddon addonType=\"append\">\n                                                    <Mutation mutation={UPDATE_PAYMENT_STATUS} onError={this.onError} onCompleted={this.onCompleted}>\n                                                        {(updatePaymentStatus, { loading }) => {\n                                                            if (loading) return (<Button color=\"primary\" disabled>Saving</Button>)\n                                                            return <Button color=\"primary\" disabled={this.state.payment_status === this.state.selectedPaymentStatus}\n                                                                onClick={() => {\n                                                                    if (this.validatePaymentStatus())\n                                                                        updatePaymentStatus({ variables: { id: this.state._id, status: this.state.selectedPaymentStatus } })\n                                                                }}>\n                                                                Assign</Button>\n                                                        }}\n                                                    </Mutation>\n                                                </InputGroupAddon>\n                                            </InputGroup>\n                                        </FormGroup>\n                                    </Col>\n                                    <Col lg=\"6\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"rider-name\"\n                                        >\n                                            {t(\"Current Status\")}\n                                        </label>\n                                        <FormGroup >\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"rider-name\"\n                                                type=\"text\"\n                                                readOnly\n                                                value={this.state.payment_status || ''}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                            </>}\n                            <Row className=\"align-items-center\">\n                                <Col xs=\"8\">\n                                    <h3 className=\"mb-1\">{t(\"Customer\")}</h3>\n                                </Col>\n                                <Col xs=\"4\">\n                                    <Button color=\"primary\" onClick={() => { this.toggle('customerCollapse') }} style={{ marginBottom: '1rem' }}>\n                                        Show/Hide</Button>\n                                </Col>\n                            </Row>\n                            <Collapse isOpen={this.state.customerCollapse}>\n                                <Row>\n                                    <Col lg=\"4\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-name\"\n                                        >\n                                            {t(\"Name\")}\n                                        </label>\n                                        <FormGroup >\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-name\"\n                                                type=\"text\"\n                                                defaultValue={this.state.user.name}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                    <Col lg=\"4\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-phone\"\n                                        >\n                                            {t(\"Phone\")}\n                                        </label>\n                                        <FormGroup >\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-phone\"\n                                                type=\"text\"\n                                                defaultValue={this.state.user.phone}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                    <Col lg=\"4\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-email\"\n                                        >\n                                            {t(\"Email\")}\n                                        </label>\n                                        <FormGroup >\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-email\"\n                                                type=\"text\"\n                                                defaultValue={this.state.user.email}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n\n                                </Row>\n                                <Row>\n                                    <Col lg=\"12\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-address\"\n                                        >\n                                            {t(\"Address\")}\n                                        </label>\n                                        <FormGroup >\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-address\"\n                                                type=\"text\"\n                                                defaultValue={this.state.delivery_address}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                            </Collapse>\n                            <Row className=\"align-items-center\">\n                                <Col xs=\"8\">\n                                    <h3 className=\"mb-1\">{t(\"Order Details\")}</h3>\n                                </Col>\n                                <Col xs=\"4\">\n                                    <Button color=\"primary\" onClick={() => { this.toggle('orderCollapse') }} style={{ marginBottom: '1rem' }}>\n                                        Show/Hide</Button>\n                                </Col>\n                            </Row>\n                            <Collapse isOpen={this.state.orderCollapse}>\n                                <Query query={GET_CONFIGURATION}>\n                                    {({ data, loading, error }) => {\n                                        if (loading) return null\n                                        if (error) return null\n                                        return <Row>\n                                            <Col lg=\"6\">\n                                                <label\n                                                    className=\"form-control-label\"\n                                                    htmlFor=\"input-items\">\n                                                    {t(\"Items\")}\n                                                </label>\n                                                <FormGroup>\n                                                    <ListGroup id=\"input-items\">\n                                                        {this.state.items.map((item) => {\n                                                            return (<ListGroupItem key={item._id} className=\"justify-content-between\">\n                                                                <Badge style={{ fontSize: '12px', backgroundColor: 'grey' }} pill>{item.quantity}</Badge>\n                                                                x {`${item.food.title}(${item.variation.title})`}\n                                                                <Badge style={{ fontSize: '12px', backgroundColor: 'black', float: 'right' }} pill>{data.configuration.currency_symbol} {(item.variation.price * item.quantity).toFixed(2)}</Badge>\n                                                                {!!item.addons.length &&<UncontrolledDropdown>\n                                                                    <DropdownToggle caret>\n                                                                        Addons\n                                                                        </DropdownToggle>\n                                                                    <DropdownMenu>\n                                                                        {item.addons.map(addon => {\n                                                                            return addon.options.map(option => (\n                                                                                <DropdownItem key={option._id}>\n                                                                                   {addon.title}:- {option.title} <Badge style={{ fontSize: '12px', backgroundColor: 'black', float: 'right' }} pill>{data.configuration.currency_symbol} {option.price}</Badge>\n                                                                                </DropdownItem >\n                                                                            ))\n                                                                        })}</DropdownMenu>\n                                                                </UncontrolledDropdown>}\n                                                            </ListGroupItem>)\n                                                        })}\n                                                    </ListGroup>\n                                                </FormGroup>\n                                            </Col>\n                                            <Col lg=\"6\">\n                                                <Row>\n                                                    <Col md=\"12\">\n                                                        <label\n                                                            className=\"form-control-label\"\n                                                            htmlFor=\"input-price\">\n                                                            {t(\"Charges\")}\n                                                        </label>\n                                                        <FormGroup>\n                                                            <ListGroup id=\"input-price\">\n                                                                <ListGroupItem className=\"justify-content-between\" >\n                                                                    Subtotal\n                                                <Badge style={{ fontSize: '12px', color: 'black', float: 'right' }} pill>{data.configuration.currency_symbol} {(this.state.order_amount - this.state.delivery_charges).toFixed(2)}</Badge>\n                                                                </ListGroupItem>\n                                                                <ListGroupItem className=\"justify-content-between\" >\n                                                                    Delivery Charges\n                                                <Badge style={{ fontSize: '12px', float: 'right', color: 'black' }}>{data.configuration.currency_symbol} {this.state.delivery_charges.toFixed(2)}</Badge>\n                                                                </ListGroupItem>\n                                                                <ListGroupItem className=\"justify-content-between\" >\n                                                                    Total\n                                                <Badge style={{ fontSize: '12px', color: 'black', float: 'right' }} pill>{data.configuration.currency_symbol} {this.state.order_amount.toFixed(2)}</Badge>\n                                                                </ListGroupItem>\n                                                            </ListGroup>\n                                                        </FormGroup>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col md=\"12\">\n                                                        <label\n                                                            className=\"form-control-label\"\n                                                            htmlFor=\"input-payment\">\n                                                            {t(\"Payment\")}\n                                                        </label>\n                                                        <FormGroup>\n                                                            <ListGroup id=\"input-payment\">\n                                                                <ListGroupItem className=\"justify-content-between\" >\n                                                                    Payment Method\n                                                <Badge style={{ fontSize: '12px', backgroundColor: 'green', float: 'right' }} pill>{this.state.payment_method}</Badge>\n                                                                </ListGroupItem>\n                                                                <ListGroupItem className=\"justify-content-between\" >\n                                                                    Paid Amount\n                                                <Badge style={{ fontSize: '12px', float: 'right', color: 'black' }}>{data.configuration.currency_symbol} {this.state.paid_amount ? this.state.paid_amount.toFixed(2) : 0}</Badge>\n                                                                </ListGroupItem>\n                                                            </ListGroup>\n                                                        </FormGroup>\n                                                    </Col>\n                                                </Row>\n                                            </Col>\n                                        </Row>\n\n                                    }}\n                                </Query>\n                            </Collapse>\n                        </div>\n                    </Form>\n                </CardBody>\n            </Card >)\n    }\n}\nexport default withTranslation()(Order)","import React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport {\n    Container,\n    Row,\n    Card,\n    CardHeader,\n    CardBody,\n    CardFooter,\n    Table,\n    Media,\n    Pagination,\n    PaginationItem,\n    PaginationLink,\n    Modal\n} from \"reactstrap\";\nimport OrderComponent from '../components/Order/Order'\nimport Header from \"components/Headers/Header.jsx\";\nimport { Query, compose, withApollo } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { getOrders, pageCount } from \"../apollo/server\";\nimport { transformToNewline } from '../utils/stringManipulations';\n\nconst GET_ORDERS = gql`${getOrders}`\nconst PAGECOUNT = gql`${pageCount}`\nclass Orders extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { page: 0, pageCount: 0, loading: true, detailsModal: false, order: null }\n    }\n    getItems = (items) => {\n        return items.map(item => `${item.quantity}x${item.food.title}(${item.variation.title})`).join('\\n')\n    }\n    ChangePage = (page) => {\n        if (typeof page === 'string') {\n            if (page === 'next') {\n                page = this.state.page + 1\n            }\n            else {\n                page = this.state.page - 1\n            }\n        }\n        if (page > -1 && page < this.state.pageCount && this.state.page !== page)\n            this.setState({ page })\n    }\n    toggleModal = (order) => {\n        this.setState({ detailsModal: !this.state.detailsModal, order })\n    }\n    componentDidMount = async () => {\n        try {\n            const { data } = await this.props.client.query({ query: PAGECOUNT })\n            this.setState({ pageCount: data.pageCount, loading: false })\n        }\n        catch (err) {\n            console.log(err)\n        }\n    }\n    render() {\n        const { t } = this.props;\n        return (\n            <>\n                <Header />\n                {/* Page content */}\n                <Container className=\"mt--7\" fluid>\n                    {/* Table */}\n                    <Row >\n                        <div className=\"col\">\n                            <Card className=\"shadow\">\n                                <CardHeader className=\"border-0\">\n                                    <h3 className=\"mb-0\">{t(\"Orders\")}</h3>\n                                </CardHeader>\n                                <CardBody>\n                                    <Table className=\"align-items-center table-flush\" responsive>\n                                        <thead className=\"thead-light\">\n                                            <tr>\n                                                <th scope=\"col\">{t(\"OrderID\")}</th>\n                                                <th scope=\"col\">{t(\"User\")}</th>\n                                                <th scope=\"col\">{t(\"Items\")}</th>\n                                                <th scope=\"col\">{t(\"Payment\")}</th>\n                                                <th scope=\"col\">{t(\"Status\")}</th>\n                                                <th scope=\"col\">{t(\"Datetime\")}</th>\n                                                <th scope=\"col\">{t(\"Address\")}</th>\n\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <Query query={GET_ORDERS} variables={{ page: this.state.page }} pollInterval={60000}>\n                                                {({ loading, error, data }) => {\n                                                    if (loading) return <tr><td>{t(\"Loading\")}</td></tr>;\n                                                    if (error) return <tr><td>`${t(\"Error\")}! ${error.message}`</td></tr>;\n                                                    return data.allOrders.map(order =>\n                                                        <tr key={order._id} onClick={() => { this.toggleModal(order) }}>\n                                                            <th scope=\"row\">\n                                                                <Media>\n                                                                    <span className=\"mb-0 text-sm\">\n                                                                        {order.order_id}\n                                                                    </span>\n                                                                </Media>\n                                                            </th>\n                                                            <td style={{ whiteSpace: 'pre' }}>{`${order.user.name}\\n${order.user.email}\\n${order.user.phone}`}</td>\n                                                            <td style={{ whiteSpace: 'pre' }}>{this.getItems(order.items)}</td>\n                                                            <td>{order.payment_status}</td>\n                                                            <td>{order.order_status}</td>\n                                                            <td style={{ whiteSpace: 'pre' }}>{new Date(order.createdAt).toLocaleString().replace(/ /g, \"\\n\")}</td>\n                                                            <td style={{ whiteSpace: 'pre' }}>{transformToNewline(order.delivery_address, 3)}</td>\n\n                                                        </tr>\n                                                    )\n                                                }}\n                                            </Query>\n                                        </tbody>\n                                    </Table>\n                                </CardBody>\n                                <CardFooter>\n                                    <Pagination style={{ flexWrap: 'wrap' }} size=\"sm\" aria-label=\"Page navigation\">\n                                        <PaginationItem onClick={() => this.ChangePage('prev')}>\n                                            <PaginationLink previous />\n                                        </PaginationItem>\n                                        {!this.state.loading && new Array(this.state.pageCount).fill(0).map((val, index) => (\n                                            <PaginationItem className={this.state.page === index ? \"page-link\" : \"\"} key={index} onClick={() => this.ChangePage(index)}>\n                                                <PaginationLink>{index + 1}</PaginationLink>\n                                            </PaginationItem>\n                                        ))}\n                                        <PaginationItem onClick={() => this.ChangePage('next')}>\n                                            <PaginationLink next />\n                                        </PaginationItem>\n                                    </Pagination>\n                                </CardFooter>\n                            </Card></div>\n                    </Row>\n                    <Modal\n                        className=\"modal-dialog-centered\"\n                        size=\"lg\"\n                        isOpen={this.state.detailsModal}\n                        toggle={() => { this.toggleModal(null) }}>\n                        <OrderComponent order={this.state.order} />\n                    </Modal>\n\n                </Container>\n            </>\n        )\n    }\n}\n\nexport default compose(withApollo, withTranslation())(Orders);","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next';\nimport {\n    Row,\n    Col,\n    Card,\n    CardHeader,\n    FormGroup,\n    Form,\n    Input,\n    Button\n} from \"reactstrap\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { validateFunc } from '../../../constraints/constraints';\nimport { saveOrderConfiguration } from '../../../apollo/server';\n\nconst SAVE_ORDER_CONFIGURATION = gql`${saveOrderConfiguration}`\n\nclass Order extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            prefix: props.prefix || '',\n            prefixError: null\n        }\n    }\n\n    onBlur = (event, field) => {\n        this.setState({ [field + 'Error']: !validateFunc({ [field]: event.target.value.trim() }, field) })\n    }\n    validateInput = () => {\n        let result = true\n        result = !validateFunc({ 'prefix': this.state.prefix }, 'prefix')\n        this.setState({ 'prefixError': result })\n        return result\n\n    }\n    onCompleted = (data) => {\n        console.log(data)\n    }\n    onError = (error) => {\n        console.log(error)\n    }\n    render() {\n        const { t } = this.props;\n        return (\n            <Row className=\"mt-3\">\n                <div className=\"col\">\n                    <Card className=\"shadow\">\n                        <CardHeader className=\"border-0\">\n                            <h3 className=\"mb-0\">{t(\"Order\")}</h3>\n                        </CardHeader>\n                        < Form >\n                            <div className=\"pl-lg-4\">\n                                <Row>\n                                    <Col md=\"8\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-orderid\">\n                                            {t(\"OrderID prefix\")}\n                                        </label>\n                                        <FormGroup className={this.state.prefixError === null ? \"\" : this.state.prefixError ? \"has-success\" : \"has-danger\"}>\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-orderid\"\n                                                placeholder=\"e.g FOOD-\"\n                                                type=\"text\"\n                                                defaultValue={this.state.prefix}\n                                                onChange={(event) => {\n                                                    this.setState({ prefix: event.target.value })\n                                                }}\n                                                onBlur={event => { this.onBlur(event, 'prefix') }}>\n                                            </Input>\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md=\"4\">\n                                        <Mutation mutation={SAVE_ORDER_CONFIGURATION}\n                                            onCompleted={this.onCompleted}\n                                            onError={this.onError}>\n                                            {(saveConfiguration, { loading, error }) => {\n                                                if (loading) return \"Saving...\"\n                                                if (error) return \"Error :(\"\n                                                return (<Button\n                                                    className=\"btn-block mb-2\"\n                                                    type=\"button\"\n                                                    color=\"primary\"\n                                                    onClick={e => {\n                                                        e.preventDefault()\n                                                        if (this.validateInput())\n                                                            saveConfiguration({\n                                                                variables: {\n                                                                    configurationInput: {\n                                                                        order_id_prefix: this.state.prefix\n                                                                    }\n                                                                }\n                                                            })\n                                                    }}\n                                                    size=\"lg\"\n                                                >\n                                                    {t(\"Save\")}</Button>)\n                                            }}\n\n                                        </Mutation>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </ Form>\n                    </Card>\n                </div>\n            </Row>\n\n        )\n    }\n}\n\n\nexport default withTranslation()(Order)\n","\nimport React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next';\nimport {\n    Row,\n    Col,\n    Card,\n    CardHeader,\n    FormGroup,\n    Form,\n    Input,\n    Button\n} from \"reactstrap\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { validateFunc } from '../../../constraints/constraints';\nimport { saveEmailConfiguration } from '../../../apollo/server';\n\nconst SAVE_EMAIL_CONFIGURATION = gql`${saveEmailConfiguration}`\n\n\nclass Email extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            email: props.email || '',\n            password: props.password || '',\n            enableEmail: !!props.enabled,\n            emailError: null,\n            passwordError: null\n        }\n    }\n\n    onBlur = (event, field) => {\n        this.setState({ [field + 'Error']: !validateFunc({ [field]: event.target.value.trim() }, field) })\n    }\n    validateInput = () => {\n        let emailResult = true\n        let passwordResult = true\n        emailResult = !validateFunc({ 'email': this.state.email }, 'email')\n        passwordResult = !validateFunc({ 'password': this.state.password }, 'password')\n        this.setState({ 'emailError': emailResult, 'passwordError': passwordResult })\n        return emailResult && passwordResult\n    }\n    onCompleted = (data) => {\n        console.log(data)\n    }\n    onError = (error) => {\n        console.log(error)\n    }\n    render() {\n        const { t } = this.props;\n        return (\n            <Row className=\"mt-3\">\n                <div className=\"col\">\n                    <Card className=\"shadow\">\n                        <CardHeader className=\"border-0\">\n                            <h3 className=\"mb-0\">{t(\"Email\")}</h3>\n                        </CardHeader>\n                        < Form >\n                            <div className=\"pl-lg-4\">\n                                <Row>\n                                    <Col md=\"8\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-email\">\n                                            {t(\"Email\")}\n                                        </label>\n                                        <FormGroup className={this.state.emailError === null ? \"\" : this.state.emailError ? \"has-success\" : \"has-danger\"}>\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-email\"\n                                                placeholder=\"e.g something@email.com\"\n                                                type=\"text\"\n                                                defaultValue={this.state.email}\n                                                onChange={(event) => {\n                                                    this.setState({ email: event.target.value })\n                                                }}\n                                                onBlur={event => { this.onBlur(event, 'email') }}>\n                                            </Input>\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md=\"8\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-password\">\n                                            {t(\"Password\")}\n                                        </label>\n                                        <FormGroup className={this.state.passwordError === null ? \"\" : this.state.passwordError ? \"has-success\" : \"has-danger\"}>\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-password\"\n                                                placeholder=\"e.g FOOD-\"\n                                                type=\"text\"\n                                                defaultValue={this.state.password}\n                                                onChange={(event) => {\n                                                    this.setState({ password: event.target.value })\n                                                }}\n                                                onBlur={event => { this.onBlur(event, 'password') }}>\n                                            </Input>\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md=\"8\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-enable\">\n                                            {t(\"Enable/Disable\")}\n                                        </label>\n                                        <FormGroup >\n                                            <label className=\"custom-toggle\">\n                                                <input defaultChecked={this.state.enableEmail} type=\"checkbox\" onChange={event => {\n                                                    this.setState({ enableEmail: event.target.checked })\n                                                }} />\n                                                <span className=\"custom-toggle-slider rounded-circle\" />\n                                            </label>\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md=\"4\">\n                                        <Mutation mutation={SAVE_EMAIL_CONFIGURATION}\n                                            onCompleted={this.onCompleted}\n                                            onError={this.onError}>\n                                            {(saveConfiguration, { loading, error }) => {\n                                                if (loading) return t(\"Saving\")\n                                                if (error) return t(\"Error\")\n                                                return (<Button\n                                                    className=\"btn-block mb-2\"\n                                                    type=\"button\"\n                                                    color=\"primary\"\n                                                    onClick={e => {\n                                                        e.preventDefault()\n                                                        if (this.validateInput())\n                                                            saveConfiguration({\n                                                                variables: {\n                                                                    configurationInput: {\n                                                                        email: this.state.email,\n                                                                        password: this.state.password,\n                                                                        enable_email: this.state.enableEmail\n                                                                    }\n                                                                }\n                                                            })\n                                                    }}\n                                                    size=\"lg\"\n                                                >\n                                                    {t(\"Save\")}</Button>)\n                                            }}\n\n                                        </Mutation>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </ Form>\n                    </Card>\n                </div>\n            </Row>\n\n        )\n    }\n}\nexport default withTranslation()(Email)","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next';\nimport {\n    Row,\n    Col,\n    Card,\n    CardHeader,\n    FormGroup,\n    Form,\n    Input,\n    Button\n} from \"reactstrap\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { validateFunc } from '../../../constraints/constraints';\nimport { savePaypalConfiguration } from '../../../apollo/server';\n\nconst SAVE_PAYPAL_CONFIGURATION = gql`${savePaypalConfiguration}`\n\nclass Paypal extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            clientId: props.clientId || '',\n            clientSecret: props.clientSecret || '',\n            sandbox: !!props.sandbox,\n            clientIdError: null,\n            clientSecretError: null\n        }\n    }\n\n    onBlur = (event, field) => {\n        this.setState({ [field + 'Error']: !validateFunc({ [field]: event.target.value.trim() }, field) })\n    }\n    validateInput = () => {\n        let clientIdResult = true\n        let clientSecretResult = true\n        clientIdResult = !!this.state.clientId\n        clientSecretResult = !!this.state.clientSecret\n        this.setState({ 'clientIdError': clientIdResult, 'clientSecretError': clientSecretResult })\n        return clientIdResult && clientSecretResult\n    }\n    onCompleted = (data) => {\n        console.log(data)\n    }\n    onError = (error) => {\n        console.log(error)\n    }\n    render() {\n        const { t } = this.props;\n        return (\n            <Row className=\"mt-3\">\n                <div className=\"col\">\n                    <Card className=\"shadow\">\n                        <CardHeader className=\"border-0\">\n                            <h3 className=\"mb-0\">{t(\"Paypal\")}</h3>\n                        </CardHeader>\n                        < Form >\n                            <div className=\"pl-lg-4\">\n                                <Row>\n                                    <Col md=\"8\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-clientid\">\n                                            {t(\"Client ID\")}\n                                        </label>\n                                        <FormGroup className={this.state.clientIdError === null ? \"\" : this.state.clientIdError ? \"has-success\" : \"has-danger\"}>\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-clientid\"\n                                                placeholder=\"e.g AeGIgSX--JEVwoQgLjGOb8gh1DUJG0MFVgLc2mBIe6_V5NefV0LM3L78m01fLLI6U2FFB-qJr4ErrtL1\"\n                                                type=\"text\"\n                                                defaultValue={this.state.clientId}\n                                                onChange={(event) => {\n                                                    this.setState({ clientId: event.target.value })\n                                                }}\n                                                onBlur={event => { this.onBlur(event, 'clientId') }}>\n                                            </Input>\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md=\"8\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-clientsecret\">\n                                            {t(\"Client Secret\")}\n                                        </label>\n                                        <FormGroup className={this.state.clientSecretError === null ? \"\" : this.state.clientSecretError ? \"has-success\" : \"has-danger\"}>\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-clientsecret\"\n                                                placeholder=\"e.g EHAP6CSZt3kwzcpdxrpw16PqHEspw5wtJCVVux_95e2Qcwbeh6mQp9GncEbxnVFkEbJu4z1i-GuDDthf\"\n                                                type=\"text\"\n                                                defaultValue={this.state.clientSecret}\n                                                onChange={(event) => {\n                                                    this.setState({ clientSecret: event.target.value })\n                                                }}\n                                                onBlur={event => { this.onBlur(event, 'clientSecret') }}>\n                                            </Input>\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md=\"8\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-enable\">\n                                            {t(\"Sandbox\")}\n                                        </label>\n                                        <FormGroup >\n                                            <label className=\"custom-toggle\">\n                                                <input defaultChecked={this.state.sandbox} type=\"checkbox\" onChange={event => {\n                                                    this.setState({ sandbox: event.target.checked })\n                                                }} />\n                                                <span className=\"custom-toggle-slider rounded-circle\" />\n                                            </label>\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md=\"4\">\n                                        <Mutation mutation={SAVE_PAYPAL_CONFIGURATION}\n                                            onCompleted={this.onCompleted}\n                                            onError={this.onError}>\n                                            {(saveConfiguration, { loading, error }) => {\n                                                if (loading) return t(\"Saving\")\n                                                if (error) return t(\"Error\")\n                                                return (<Button\n                                                    className=\"btn-block mb-2\"\n                                                    type=\"button\"\n                                                    color=\"primary\"\n                                                    onClick={e => {\n                                                        e.preventDefault()\n                                                        if (this.validateInput())\n                                                            saveConfiguration({\n                                                                variables: {\n                                                                    configurationInput: {\n                                                                        client_id: this.state.clientId,\n                                                                        client_secret: this.state.clientSecret,\n                                                                        sandbox: this.state.sandbox\n                                                                    }\n                                                                }\n                                                            })\n                                                    }}\n                                                    size=\"lg\"\n                                                >\n                                                    {t(\"Save\")}</Button>)\n                                            }}\n\n                                        </Mutation>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </ Form>\n                    </Card>\n                </div>\n            </Row>\n\n        )\n    }\n}\n\nexport default withTranslation()(Paypal)","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next';\nimport {\n    Row,\n    Col,\n    Card,\n    CardHeader,\n    FormGroup,\n    Form,\n    Input,\n    Button\n} from \"reactstrap\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { validateFunc } from '../../../constraints/constraints';\nimport { saveStripeConfiguration } from '../../../apollo/server';\n\n\nconst SAVE_STRIPE_CONFIGURATION = gql`${saveStripeConfiguration}`\n\nclass Stripe extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            publishableKey: props.publishableKey || '',\n            secretKey: props.secretKey || '',\n            publishableKeyError: null,\n            secretKeyError: null,\n        }\n    }\n\n    onBlur = (event, field) => {\n        this.setState({ [field + 'Error']: !validateFunc({ [field]: event.target.value.trim() }, field) })\n    }\n    validateInput = () => {\n        let publishableKeyResult = true\n        let secretKeyResult = true\n        publishableKeyResult = !!this.state.publishableKey\n        secretKeyResult = !!this.state.secretKey\n        this.setState({ 'publishableKeyError': publishableKeyResult, 'secretKeyError': secretKeyResult })\n        return publishableKeyResult && secretKeyResult\n    }\n    onCompleted = (data) => {\n        console.log(data)\n    }\n    onError = (error) => {\n        console.log(error)\n    }\n    onBlurCurrency = (value, field) => {\n        this.setState({ [field + 'Error']: !validateFunc({ [field]: value }, field) })\n    }\n    render() {\n        const { t } = this.props;\n        return (\n            <Row className=\"mt-3\">\n                <div className=\"col\">\n                    <Card className=\"shadow\">\n                        <CardHeader className=\"border-0\">\n                            <h3 className=\"mb-0\">Stripe</h3>\n                        </CardHeader>\n                        < Form >\n                            <div className=\"pl-lg-4\">\n                                <Row>\n                                    <Col md=\"8\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-publishablekey\">\n                                            {t(\"Publishable Key\")}\n                                        </label>\n                                        <FormGroup className={this.state.publishableKeyError === null ? \"\" : this.state.publishableKeyError ? \"has-success\" : \"has-danger\"}>\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-publishablekey\"\n                                                placeholder=\"e.g pk_test_lEaBbVGnTkzja2FyFiNlbqtw\"\n                                                type=\"text\"\n                                                defaultValue={this.state.publishableKey}\n                                                onChange={(event) => {\n                                                    this.setState({ publishableKey: event.target.value })\n                                                }}\n                                                onBlur={event => { this.onBlur(event, 'publishableKey') }}>\n                                            </Input>\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md=\"8\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-secretkey\">\n                                            {t(\"Secret Key\")}\n                                        </label>\n                                        <FormGroup className={this.state.secretKeyError === null ? \"\" : this.state.secretKeyError ? \"has-success\" : \"has-danger\"}>\n                                            <Input\n                                                className=\"form-control-alternative\"\n                                                id=\"input-secretkey\"\n                                                placeholder=\"e.g sk_test_rKNqVc2tSkdgZHNO3XnPCLn4\"\n                                                type=\"text\"\n                                                defaultValue={this.state.secretKey}\n                                                onChange={(event) => {\n                                                    this.setState({ secretKey: event.target.value })\n                                                }}\n                                                onBlur={event => { this.onBlur(event, 'secretKey') }}>\n                                            </Input>\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md=\"4\">\n                                        <Mutation mutation={SAVE_STRIPE_CONFIGURATION}\n                                            onCompleted={this.onCompleted}\n                                            onError={this.onError}>\n                                            {(saveConfiguration, { loading, error }) => {\n                                                if (loading) return t(\"Saving\")\n                                                if (error) return t(\"Error\")\n                                                return (<Button\n                                                    className=\"btn-block mb-2\"\n                                                    type=\"button\"\n                                                    color=\"primary\"\n                                                    onClick={e => {\n                                                        e.preventDefault()\n                                                        if (this.validateInput())\n                                                            saveConfiguration({\n                                                                variables: {\n                                                                    configurationInput: {\n                                                                        publishable_key: this.state.publishableKey,\n                                                                        secret_key: this.state.secretKey,\n                                                                    }\n                                                                }\n                                                            })\n                                                    }}\n                                                    size=\"lg\"\n                                                >\n                                                    {t(\"Save\")}</Button>)\n                                            }}\n\n                                        </Mutation>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </ Form>\n                    </Card>\n                </div>\n            </Row>\n\n        )\n    }\n}\nexport default withTranslation()(Stripe)\n","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next';\nimport {\n    Row,\n    Col,\n    Card,\n    CardHeader,\n    FormGroup,\n    Form,\n    Input,\n    Button\n} from \"reactstrap\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { validateFunc } from '../../../constraints/constraints';\nimport { saveDeliveryConfiguration } from '../../../apollo/server';\n\n\nconst SAVE_DELIVERY_CONFIGURATION = gql`${saveDeliveryConfiguration}`\n\nclass Delivery extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            deliveryCharges: props.deliveryCharges || 0,\n            deliveryChargesError: null\n        }\n    }\n\n    onBlur = (event, field) => {\n        this.setState({ [field + 'Error']: !validateFunc({ [field]: event.target.value.trim() }, field) })\n    }\n    validateInput = () => {\n        let deliveryChargesError = !isNaN(this.state.deliveryCharges)\n        this.setState({ deliveryChargesError })\n        return deliveryChargesError\n    }\n    onCompleted = (data) => {\n        console.log(data)\n    }\n    onError = (error) => {\n        console.log(error)\n    }\n    render() {\n        const { t } = this.props;\n        return (\n            <Row className=\"mt-3\">\n                <div className=\"col\">\n                    <Card className=\"shadow\">\n                        <CardHeader className=\"border-0\">\n                            <h3 className=\"mb-0\">{t(\"Delivery Charges\")}</h3>\n                        </CardHeader>\n                        < Form >\n                            <div className=\"pl-lg-4\">\n                                <Row>\n                                    <Col md=\"8\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-deliverycharges\">\n                                            {t(\"Price\")}\n                                        </label>\n                                        <FormGroup className={this.state.deliveryChargesError === null ? \"\" : this.state.deliveryChargesError ? \"has-success\" : \"has-danger\"}>\n                                            <Input\n                                                ref={elem => { this.deliveryChargesRef = elem }}\n                                                className=\"form-control-alternative\"\n                                                id=\"input-deliverycharges\"\n                                                placeholder=\"e.g 30.00\"\n                                                type=\"number\"\n                                                defaultValue={this.state.deliveryCharges}\n                                                onChange={(event) => {\n                                                    this.setState({ deliveryCharges: event.target.value })\n                                                }}\n                                                onBlur={event => { this.onBlur(event, 'deliveryCharges') }}>\n                                            </Input>\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md=\"4\">\n                                        <Mutation mutation={SAVE_DELIVERY_CONFIGURATION}\n                                            onCompleted={this.onCompleted}\n                                            onError={this.onError}>\n                                            {(saveConfiguration, { loading, error }) => {\n                                                if (loading) return t(\"Saving\")\n                                                if (error) return t(\"Error\")\n                                                return (<Button\n                                                    className=\"btn-block mb-2\"\n                                                    type=\"button\"\n                                                    color=\"primary\"\n                                                    onClick={e => {\n                                                        e.preventDefault()\n                                                        if (this.validateInput())\n                                                            saveConfiguration({\n                                                                variables: {\n                                                                    configurationInput: {\n                                                                        delivery_charges: Number(this.state.deliveryCharges),\n                                                                    }\n                                                                }\n                                                            })\n                                                    }}\n                                                    size=\"lg\"\n                                                >\n                                                    {t(\"Save\")}</Button>)\n                                            }}\n\n                                        </Mutation>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </ Form>\n                    </Card>\n                </div>\n            </Row>\n\n        )\n    }\n}\nexport default withTranslation()(Delivery)","export const stripeCurrencies= [\n    { currency: 'USD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'AED', currency_symbol: 'د.إ', multiplier: 100, type: 'STRIPE' },\n    { currency: 'AFN', currency_symbol: '؋', multiplier: 100, type: 'STRIPE' },\n    { currency: 'ALL', currency_symbol: 'L', multiplier: 100, type: 'STRIPE' },\n    { currency: 'AMD', currency_symbol: '֏', multiplier: 100, type: 'STRIPE' },\n    { currency: 'ANG', currency_symbol: 'ƒ', multiplier: 100, type: 'STRIPE' },\n    { currency: 'AOA', currency_symbol: 'Kz', multiplier: 100, type: 'STRIPE' },\n    { currency: 'ARS', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'AUD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'AWG', currency_symbol: 'ƒ', multiplier: 100, type: 'STRIPE' },\n    { currency: 'AZN', currency_symbol: '₼', multiplier: 100, type: 'STRIPE' },\n    { currency: 'BAM', currency_symbol: 'BAM', multiplier: 100, type: 'STRIPE' },\n    { currency: 'BBD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'BDT', currency_symbol: '৳', multiplier: 100, type: 'STRIPE' },\n    { currency: 'BGN', currency_symbol: 'лв', multiplier: 100, type: 'STRIPE' },\n    { currency: 'BIF', currency_symbol: 'Fr', multiplier: 1, type: 'STRIPE' },\n    { currency: 'BMD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'BND', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'BOB', currency_symbol: 'Bs.', multiplier: 100, type: 'STRIPE' },\n    { currency: 'BRL', currency_symbol: 'R$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'BSD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'BWP', currency_symbol: 'P', multiplier: 100, type: 'STRIPE' },\n    { currency: 'BZD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'CAD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'CDF', currency_symbol: 'Fr', multiplier: 100, type: 'STRIPE' },\n    { currency: 'CHF', currency_symbol: 'Fr', multiplier: 100, type: 'STRIPE' },\n    { currency: 'CLP', currency_symbol: '$', multiplier: 1, type: 'STRIPE' },\n    { currency: 'CNY', currency_symbol: '¥', multiplier: 100, type: 'STRIPE' },\n    { currency: 'COP', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'CRC', currency_symbol: '₡', multiplier: 100, type: 'STRIPE' },\n    { currency: 'CVE', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'CZK', currency_symbol: 'Kč', multiplier: 100, type: 'STRIPE' },\n    { currency: 'DJF', currency_symbol: 'Fr', multiplier: 1, type: 'STRIPE' },\n    { currency: 'DKK', currency_symbol: 'kr', multiplier: 100, type: 'STRIPE' },\n    { currency: 'DOP', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'DZD', currency_symbol: 'د.ج', multiplier: 100, type: 'STRIPE' },\n    { currency: 'EGP', currency_symbol: '£', multiplier: 100, type: 'STRIPE' },\n    { currency: 'ETB', currency_symbol: 'Br', multiplier: 100, type: 'STRIPE' },\n    { currency: 'EUR', currency_symbol: '€', multiplier: 100, type: 'STRIPE' },\n    { currency: 'FJD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'FKP', currency_symbol: '£', multiplier: 100, type: 'STRIPE' },\n    { currency: 'GBP', currency_symbol: '£', multiplier: 100, type: 'STRIPE' },\n    { currency: 'GEL', currency_symbol: '₾', multiplier: 100, type: 'STRIPE' },\n    { currency: 'GIP', currency_symbol: '£', multiplier: 100, type: 'STRIPE' },\n    { currency: 'GMD', currency_symbol: 'D', multiplier: 100, type: 'STRIPE' },\n    { currency: 'GNF', currency_symbol: 'Fr', multiplier: 1, type: 'STRIPE' },\n    { currency: 'GTQ', currency_symbol: 'Q', multiplier: 100, type: 'STRIPE' },\n    { currency: 'GYD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'HKD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'HNL', currency_symbol: 'L', multiplier: 100, type: 'STRIPE' },\n    { currency: 'HRK', currency_symbol: 'kn', multiplier: 100, type: 'STRIPE' },\n    { currency: 'HTG', currency_symbol: 'G', multiplier: 100, type: 'STRIPE' },\n    { currency: 'HUF', currency_symbol: 'Ft', multiplier: 100, type: 'STRIPE' },\n    { currency: 'IDR', currency_symbol: 'Rp', multiplier: 100, type: 'STRIPE' },\n    { currency: 'ILS', currency_symbol: 'ع.د', multiplier: 100, type: 'STRIPE' },\n    { currency: 'INR', currency_symbol: '₹', multiplier: 100, type: 'STRIPE' },\n    { currency: 'ISK', currency_symbol: 'kr', multiplier: 100, type: 'STRIPE' },\n    { currency: 'JMD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'JPY', currency_symbol: '¥', multiplier: 1, type: 'STRIPE' },\n    { currency: 'KES', currency_symbol: 'Sh', multiplier: 100, type: 'STRIPE' },\n    { currency: 'KGS', currency_symbol: 'с', multiplier: 100, type: 'STRIPE' },\n    { currency: 'KHR', currency_symbol: '៛', multiplier: 100, type: 'STRIPE' },\n    { currency: 'KMF', currency_symbol: 'Fr', multiplier: 1, type: 'STRIPE' },\n    { currency: 'KRW', currency_symbol: '₩', multiplier: 1, type: 'STRIPE' },\n    { currency: 'KYD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'KZT', currency_symbol: '₸', multiplier: 100, type: 'STRIPE' },\n    { currency: 'LAK', currency_symbol: '₭', multiplier: 100, type: 'STRIPE' },\n    { currency: 'LBP', currency_symbol: 'ل.ل', multiplier: 100, type: 'STRIPE' },\n    { currency: 'LKR', currency_symbol: 'Rs', multiplier: 100, type: 'STRIPE' },\n    { currency: 'LRD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'LSL', currency_symbol: 'L', multiplier: 100, type: 'STRIPE' },\n    { currency: 'MAD', currency_symbol: 'د.م.', multiplier: 100, type: 'STRIPE' },\n    { currency: 'MDL', currency_symbol: 'L', multiplier: 100, type: 'STRIPE' },\n    { currency: 'MGA', currency_symbol: 'Ar', multiplier: 1, type: 'STRIPE' },\n    { currency: 'MKD', currency_symbol: 'ден', multiplier: 100, type: 'STRIPE' },\n    { currency: 'MMK', currency_symbol: 'Ks', multiplier: 100, type: 'STRIPE' },\n    { currency: 'MNT', currency_symbol: '₮', multiplier: 100, type: 'STRIPE' },\n    { currency: 'MOP', currency_symbol: 'P', multiplier: 100, type: 'STRIPE' },\n    { currency: 'MRO', currency_symbol: 'UM', multiplier: 100, type: 'STRIPE' },\n    { currency: 'MUR', currency_symbol: '₨', multiplier: 100, type: 'STRIPE' },\n    { currency: 'MVR', currency_symbol: '.ރ', multiplier: 100, type: 'STRIPE' },\n    { currency: 'MWK', currency_symbol: 'MK', multiplier: 100, type: 'STRIPE' },\n    { currency: 'MXN', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'MYR', currency_symbol: 'RM', multiplier: 100, type: 'STRIPE' },\n    { currency: 'MZN', currency_symbol: 'MT', multiplier: 100, type: 'STRIPE' },\n    { currency: 'NAD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'NGN', currency_symbol: '₦', multiplier: 100, type: 'STRIPE' },\n    { currency: 'NIO', currency_symbol: 'C$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'NOK', currency_symbol: 'kr', multiplier: 100, type: 'STRIPE' },\n    { currency: 'NPR', currency_symbol: '₨', multiplier: 100, type: 'STRIPE' },\n    { currency: 'NZD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'PAB', currency_symbol: 'B/.', multiplier: 100, type: 'STRIPE' },\n    { currency: 'PEN', currency_symbol: 'S/.', multiplier: 100, type: 'STRIPE' },\n    { currency: 'PGK', currency_symbol: 'K', multiplier: 100, type: 'STRIPE' },\n    { currency: 'PHP', currency_symbol: '₱', multiplier: 100, type: 'STRIPE' },\n    { currency: 'PKR', currency_symbol: '₨', multiplier: 100, type: 'STRIPE' },\n    { currency: 'PLN', currency_symbol: 'zł', multiplier: 100, type: 'STRIPE' },\n    { currency: 'PYG', currency_symbol: '₲', multiplier: 1, type: 'STRIPE' },\n    { currency: 'QAR', currency_symbol: 'ر.ق', multiplier: 100, type: 'STRIPE' },\n    { currency: 'RON', currency_symbol: 'lei', multiplier: 100, type: 'STRIPE' },\n    { currency: 'RSD', currency_symbol: 'дин', multiplier: 100, type: 'STRIPE' },\n    { currency: 'RUB', currency_symbol: '₽', multiplier: 100, type: 'STRIPE' },\n    { currency: 'RWF', currency_symbol: 'Fr', multiplier: 1, type: 'STRIPE' },\n    { currency: 'SAR', currency_symbol: 'ر.س', multiplier: 100, type: 'STRIPE' },\n    { currency: 'SBD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'SCR', currency_symbol: '₨', multiplier: 100, type: 'STRIPE' },\n    { currency: 'SEK', currency_symbol: 'kr', multiplier: 100, type: 'STRIPE' },\n    { currency: 'SGD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'SHP', currency_symbol: '£', multiplier: 100, type: 'STRIPE' },\n    { currency: 'SLL', currency_symbol: 'Le', multiplier: 100, type: 'STRIPE' },\n    { currency: 'SOS', currency_symbol: 'Sh', multiplier: 100, type: 'STRIPE' },\n    { currency: 'SRD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'STD', currency_symbol: 'Db', multiplier: 100, type: 'STRIPE' },\n    { currency: 'SZL', currency_symbol: 'L', multiplier: 100, type: 'STRIPE' },\n    { currency: 'THB', currency_symbol: '฿', multiplier: 100, type: 'STRIPE' },\n    { currency: 'TJS', currency_symbol: 'ЅМ', multiplier: 100, type: 'STRIPE' },\n    { currency: 'TOP', currency_symbol: 'T$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'TRY', currency_symbol: '₺', multiplier: 100, type: 'STRIPE' },\n    { currency: 'TTD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'TWD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'TZS', currency_symbol: 'Sh', multiplier: 100, type: 'STRIPE' },\n    { currency: 'UAH', currency_symbol: '₴', multiplier: 100, type: 'STRIPE' },\n    { currency: 'UGX', currency_symbol: 'Sh', multiplier: 1, type: 'STRIPE' },\n    { currency: 'UYU', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'UZS', currency_symbol: 'сўм', multiplier: 100, type: 'STRIPE' },\n    { currency: 'VND', currency_symbol: '₫', multiplier: 1, type: 'STRIPE' },\n    { currency: 'VUV', currency_symbol: 'Vt', multiplier: 1, type: 'STRIPE' },\n    { currency: 'WST', currency_symbol: 'T', multiplier: 100, type: 'STRIPE' },\n    { currency: 'XAF', currency_symbol: 'Fr', multiplier: 1, type: 'STRIPE' },\n    { currency: 'XCD', currency_symbol: '$', multiplier: 100, type: 'STRIPE' },\n    { currency: 'XOF', currency_symbol: 'Fr', multiplier: 1, type: 'STRIPE' },\n    { currency: 'XPF', currency_symbol: '₣', multiplier: 1, type: 'STRIPE' },\n    { currency: 'YER', currency_symbol: '﷼', multiplier: 100, type: 'STRIPE' },\n    { currency: 'ZAR', currency_symbol: 'Rs', multiplier: 100, type: 'STRIPE' },\n    { currency: 'ZMW', currency_symbol: 'ZK', multiplier: 100, type: 'STRIPE' },\n]\n\n\n\n\nexport const paypalCurrencies = [\n    { currency: 'AUD', currency_symbol: '$', type: 'PAYPAL' },\n    { currency: 'BRL', currency_symbol: 'R$', type: 'PAYPAL' },\n    { currency: 'CAD', currency_symbol: '$', type: 'PAYPAL' },\n    { currency: 'CZK', currency_symbol: 'Kč', type: 'PAYPAL' },\n    { currency: 'DKK', currency_symbol: 'kr', type: 'PAYPAL' },\n    { currency: 'EUR', currency_symbol: '€', type: 'PAYPAL' },\n    { currency: 'HKD', currency_symbol: '$', type: 'PAYPAL' },\n    { currency: 'HUF', currency_symbol: 'Ft', type: 'PAYPAL' },\n    { currency: 'INR', currency_symbol: '₹', type: 'PAYPAL' },\n    { currency: 'ILS', currency_symbol: 'ع.د', type: 'PAYPAL' },\n    { currency: 'JPY', currency_symbol: '¥', type: 'PAYPAL' },\n    { currency: 'MYR', currency_symbol: 'RM', type: 'PAYPAL' },\n    { currency: 'MXN', currency_symbol: '$', type: 'PAYPAL' },\n    { currency: 'TWD', currency_symbol: '$', type: 'PAYPAL' },\n    { currency: 'NZD', currency_symbol: '$', type: 'PAYPAL' },\n    { currency: 'NOK', currency_symbol: 'kr', type: 'PAYPAL' },\n    { currency: 'PHP', currency_symbol: '₱', type: 'PAYPAL' },\n    { currency: 'PLN', currency_symbol: 'zł', type: 'PAYPAL' },\n    { currency: 'GBP', currency_symbol: '£', type: 'PAYPAL' },\n    { currency: 'RUB', currency_symbol: '₽', type: 'PAYPAL' },\n    { currency: 'SGD', currency_symbol: '$', type: 'PAYPAL' },\n    { currency: 'SEK', currency_symbol: 'kr', type: 'PAYPAL' },\n    { currency: 'CHF', currency_symbol: 'Fr', type: 'PAYPAL' },\n    { currency: 'THB', currency_symbol: '฿', type: 'PAYPAL' },\n    { currency: 'USD', currency_symbol: '$', type: 'PAYPAL' },\n]\n\n","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next';\nimport {\n    Row,\n    Col,\n    Card,\n    CardHeader,\n    FormGroup,\n    Form,\n    Button\n} from \"reactstrap\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { validateFunc } from '../../../constraints/constraints';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { stripeCurrencies } from '../../../config/currencies';\nimport { saveCurrencyConfiguration } from '../../../apollo/server';\n\n\nconst SAVE_CURRENCY_CONFIGURATION = gql`${saveCurrencyConfiguration}`\n\nclass Currency extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currencyCode: props.currencyCode || '',\n            currencySymbol: props.currencySymbol || '',\n            currencyCodeError: null,\n            currencySymbolError: null\n        }\n    }\n    validateInput = () => {\n        let currencyCodeError = !validateFunc({ 'currencyCode': this.state.currencyCode }, 'currencyCode')\n        let currencySymbolError = !validateFunc({ 'currencySymbol': this.state.currencySymbol }, 'currencySymbol')\n        this.setState({ currencyCodeError, currencySymbolError })\n        return currencyCodeError && currencySymbolError\n    }\n    onCompleted = (data) => {\n        console.log(data)\n    }\n    onError = (error) => {\n        console.log(error)\n    }\n    onBlur = (value, field) => {\n        this.setState({ [field + 'Error']: !validateFunc({ [field]: value }, field) })\n    }\n    render() {\n        const { t } = this.props;\n        var currency_codesT = stripeCurrencies.map(val => val.currency)\n        const currency_codes = [...new Set(currency_codesT)]\n        var currency_symbolsT = stripeCurrencies.map(val => val.currency_symbol)\n        const currency_symbols = [...new Set(currency_symbolsT)]\n        return (\n            <Row className=\"mt-3\">\n                <div className=\"col\">\n                    <Card className=\"shadow\">\n                        <CardHeader className=\"border-0\">\n                            <h3 className=\"mb-0\">{t(\"Currency\")}</h3>\n                        </CardHeader>\n                        < Form >\n                            <div className=\"pl-lg-4\">\n                                <Row>\n                                    <Col md=\"6\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-orderid\">\n                                            {t(\"Currency Code\")}\n                                        </label>\n                                        <FormGroup className={this.state.currencyCodeError === null ? \"\" : this.state.currencyCodeError ? \"has-success\" : \"has-danger\"}>\n                                            <Typeahead\n                                                defaultSelected={[this.state.currencyCode || '']}\n                                                onInputChange={value => {\n                                                    this.setState({ currencyCode: value })\n                                                }}\n                                                labelKey=\"currencyCode\"\n                                                options={currency_codes}\n                                                placeholder={t(\"Currency Code\")}\n                                                id=\"CurrencyCode\"\n                                                onBlur={() => { this.onBlur(this.state.currencyCode, 'currencyCode') }}\n                                                ref={this.currencyCode}\n                                                onChange={values => { this.setState({ currencyCode: values[0] }) }}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                    <Col md=\"5\">\n                                        <label\n                                            className=\"form-control-label\"\n                                            htmlFor=\"input-orderid\">\n                                            {t(\"Currency Symbol\")}\n                                        </label>\n                                        <FormGroup className={this.state.currencySymbolError === null ? \"\" : this.state.currencySymbolError ? \"has-success\" : \"has-danger\"}>\n                                            <Typeahead\n                                                defaultSelected={[this.state.currencySymbol || '']}\n                                                onInputChange={value => {\n                                                    this.setState({ currencySymbol: value })\n                                                }}\n                                                labelKey=\"currencySymbol\"\n                                                options={currency_symbols}\n                                                placeholder={t(\"Currency Symbol\")}\n                                                id=\"CurrencySymbol\"\n                                                ref={this.currencySymbol}\n                                                onBlur={() => { this.onBlur(this.state.currencySymbol, 'currencySymbol') }}\n                                                onChange={values => { this.setState({ currencySymbol: values[0] }) }}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n\n                                </Row>\n                                <Row>\n                                    <Col md=\"4\">\n                                        <Mutation mutation={SAVE_CURRENCY_CONFIGURATION}\n                                            onCompleted={this.onCompleted}\n                                            onError={this.onError}>\n                                            {(saveConfiguration, { loading, error }) => {\n                                                if (loading) return \"Saving...\"\n                                                if (error) return \"Error :(\"\n                                                return (<Button\n                                                    className=\"btn-block mb-2\"\n                                                    type=\"button\"\n                                                    color=\"primary\"\n                                                    onClick={e => {\n                                                        e.preventDefault()\n                                                        if (this.validateInput())\n                                                            saveConfiguration({\n                                                                variables: {\n                                                                    configurationInput: {\n                                                                        currency: this.state.currencyCode,\n                                                                        currency_symbol: this.state.currencySymbol\n                                                                    }\n                                                                }\n                                                            })\n                                                    }}\n                                                    size=\"lg\"\n                                                >\n                                                    {t(\"Save\")}</Button>)\n                                            }}\n\n                                        </Mutation>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </ Form>\n                    </Card>\n                </div>\n            </Row>\n\n        )\n    }\n}\n\nexport default withTranslation()(Currency)\n","import React from \"react\";\nimport { withTranslation } from 'react-i18next';\nimport {\n    Container\n} from \"reactstrap\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Header from \"components/Headers/Header.jsx\";\nimport {\n    getConfiguration\n} from \"../apollo/server\";\nimport OrderConfiguration from '../components/Configuration/Order/Order'\nimport EmailConfiguration from '../components/Configuration/Email/Email'\nimport PaypalConfiguration from '../components/Configuration/Paypal/Paypal'\nimport StripeConfiguration from '../components/Configuration/Stripe/Stripe'\nimport DeliveryConfiguration from '../components/Configuration/Delivery/Delivery'\nimport CurrencyConfiguration from '../components/Configuration/Currency/Currency'\n\nconst GET_CONFIGURATION = gql`${getConfiguration}`\n\n\n\nclass Configuration extends React.Component {\n\n    render() {\n        const { t } = this.props;\n        return (\n            <>\n                <Header />\n                <Query query={GET_CONFIGURATION}>\n                    {({ loading, error, data }) => {\n                        if (loading) return t(\"Loading\")\n                        if (error) return \"Error :(\"\n                        return (\n                            <Container className=\"mt--7\" fluid>\n                                <OrderConfiguration prefix={data.configuration.order_id_prefix} />\n                                <EmailConfiguration email={data.configuration.email} password={data.configuration.password} enabled={data.configuration.enable_email} />\n                                <PaypalConfiguration clientId={data.configuration.client_id} clientSecret={data.configuration.client_secret} sandbox={data.configuration.sandbox} />\n                                <StripeConfiguration publishableKey={data.configuration.publishable_key} secretKey={data.configuration.secret_key} />\n                                <DeliveryConfiguration deliveryCharges={data.configuration.delivery_charges} />\n                                <CurrencyConfiguration currencyCode={data.configuration.currency} currencySymbol={data.configuration.currency_symbol} />\n                            </Container>\n                        )\n                    }}\n                </Query>\n            </>\n        )\n    }\n}\n\nexport default withTranslation()(Configuration)","import React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport {\n    Container,\n    Row,\n    Card,\n    CardHeader,\n    Table,\n    Media\n   \n} from \"reactstrap\";\nimport Header from \"components/Headers/Header.jsx\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { getUsers } from \"../apollo/server\";\nimport { transformToNewline } from '../utils/stringManipulations';\n\nconst GET_USERS = gql`${getUsers}`\nclass Users extends React.Component {\n    render() {\n        const { t } = this.props;\n        return (\n            <>\n                <Header />\n                {/* Page content */}\n                <Container className=\"mt--7\" fluid>\n                    {/* Table */}\n                    <Row >\n                        <div className=\"col\">\n                            <Card className=\"shadow\">\n                                <CardHeader className=\"border-0\">\n                                    <h3 className=\"mb-0\">{t(\"Users\")}</h3>\n                                </CardHeader>\n\n\n                                <Table className=\"align-items-center table-flush\" responsive>\n                                    <thead className=\"thead-light\">\n                                        <tr>\n                                            <th scope=\"col\">{t(\"Name\")}</th>\n                                            <th scope=\"col\">{t(\"Email\")}</th>\n                                            <th scope=\"col\">{t(\"Phone\")}</th>\n                                            <th scope=\"col\">{t(\"Address\")}</th>\n                                            <th scope=\"col\" />\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <Query query={GET_USERS} onError={error => { console.log(error) }}>\n                                            {({ loading, error, data }) => {\n                                                if (loading) return <tr><td>{t(\"Loading\")}</td></tr>;\n                                                if (error) return <tr><td>`${t(\"Error\")}! ${error.message}`</td></tr>;\n                                                return data.users.map(user =>\n                                                    <tr key={user._id}>\n                                                        <th scope=\"row\">\n                                                            <Media>\n                                                                <span className=\"mb-0 text-sm\">\n                                                                    {user.name}\n                                                                </span>\n                                                            </Media>\n                                                        </th>\n                                                        <td>{user.email}</td>\n                                                        <td>{user.phone}</td>\n                                                        <td style={{ whiteSpace: 'pre' }}>{transformToNewline(user.location.delivery_address,3)}</td>\n                                                        <td></td>\n                                                    </tr>\n                                                )\n                                            }}\n                                        </Query>\n                                    </tbody>\n                                </Table>\n\n                            </Card>\n                        </div>\n                    </Row>\n                </Container>\n            </>\n        )\n    }\n}\n\nexport default withTranslation()(Users);","import React from \"react\";\n\n// reactstrap components\nimport {\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    FormGroup,\n    Form,\n    Input,\n    InputGroupAddon,\n    InputGroupText,\n    InputGroup,\n    Col,\n    UncontrolledAlert\n} from \"reactstrap\";\n\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { resetPassword } from \"../apollo/server\";\nimport { validateFunc } from '../constraints/constraints';\nconst RESET_PASSWORD = gql`${resetPassword}`\n\nclass ResetPassword extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            password: \"\",\n            confirmPassword: \"\",\n            confirmPasswordError: null,\n            passwordError: null,\n            error: null,\n            success: null\n        }\n    }\n    onBlur = (event, field) => {\n        if (field === 'password')\n            this.setState({ 'passwordError': !validateFunc({ password: this.state.password }, 'password') })\n        else if (field === 'confirmPassword')\n            this.setState({ 'confirmPasswordError': !validateFunc({ confirmPassword: this.state.confirmPassword, password: this.state.password }, 'confirmPassword') })\n    }\n    validate = () => {\n        let confirmPasswordError = !validateFunc({ password: this.state.password, confirmPassword: this.state.confirmPassword }, \"confirmPassword\")\n        let passwordError = !validateFunc({ password: this.state.password }, \"password\")\n        this.setState({ confirmPasswordError, passwordError })\n        return confirmPasswordError && passwordError\n    }\n    onCompleted = (data) => {\n        this.setState({\n            confirmPasswordError: null,\n            passwordError: null,\n            success: 'Password has been updated'\n        })\n    }\n    render() {\n\n        return (\n            <>\n                <Col lg=\"5\" md=\"7\">\n                    <Card className=\"bg-secondary shadow border-0\">\n                        <CardHeader className=\"bg-transparent pb-5\">\n                            <div className=\"text-muted text-center mt-2 mb-3\">\n                                <small>Reset Password</small>\n                            </div>\n                        </CardHeader>\n                        <CardBody className=\"px-lg-5 py-lg-5\">\n                            <Form role=\"form\">\n\n                                <FormGroup className={this.state.passwordError === null ? \"\" : this.state.passwordError ? \"has-success\" : \"has-danger\"}>\n                                    <InputGroup className=\"input-group-alternative\">\n                                        <InputGroupAddon addonType=\"prepend\">\n                                            <InputGroupText>\n                                                <i className=\"ni ni-lock-circle-open\" />\n                                            </InputGroupText>\n                                        </InputGroupAddon>\n                                        <Input\n                                            value={this.state.password}\n                                            onChange={event => {\n                                                this.setState({ password: event.target.value })\n                                            }}\n                                            onBlur={event => { this.onBlur(event, 'password') }}\n                                            placeholder=\"Password\"\n                                            type=\"password\" />\n                                    </InputGroup>\n                                </FormGroup>\n                                <FormGroup className={this.state.confirmPasswordError === null ? \"\" : this.state.confirmPasswordError ? \"has-success\" : \"has-danger\"}>\n                                    <InputGroup className=\"input-group-alternative\">\n                                        <InputGroupAddon addonType=\"prepend\">\n                                            <InputGroupText>\n                                                <i className=\"ni ni-lock-circle-open\" />\n                                            </InputGroupText>\n                                        </InputGroupAddon>\n                                        <Input\n                                            value={this.state.confirmPassword}\n                                            onChange={event => {\n                                                this.setState({ confirmPassword: event.target.value })\n                                            }}\n                                            onBlur={event => { this.onBlur(event, 'confirmPassword') }}\n                                            placeholder=\"Confirm Password\"\n                                            type=\"password\" />\n                                    </InputGroup>\n                                </FormGroup>\n                                <div className=\"text-center\">\n                                    <Mutation\n                                        mutation={RESET_PASSWORD}\n                                        onCompleted={this.onCompleted}\n                                        onError={error => {\n                                            this.setState({\n                                                confirmPasswordError: null, passwordError: null,\n                                                error: error.networkError.result.errors[0].message\n                                            })\n                                        }}\n                                    >\n                                        {(resetPassword, { loading, error }) => {\n                                            return (\n                                                <Button\n                                                    className=\"my-4\"\n                                                    color=\"primary\"\n                                                    type=\"button\"\n                                                    onClick={() => {\n                                                        this.setState({\n                                                            confirmPasswordError: null,\n                                                            passwordError: null,\n                                                            error:null,\n                                                            success:null\n                                                        })\n                                                        let params = new URLSearchParams(this.props.location.search)\n                                                        if (this.validate() && params.get('reset')) {\n                                                            resetPassword({ variables: { password: this.state.password, token: params.get('reset') } })\n                                                        }\n                                                    }}>\n                                                    Reset\n                        </Button>\n                                            )\n                                        }}\n                                    </Mutation>\n                                </div>\n                                {this.state.error &&\n                                    <UncontrolledAlert color=\"danger\" fade={true}>\n                                        <span className=\"alert-inner--text\">\n                                            {this.state.error}</span>\n                                    </UncontrolledAlert>}\n                                {this.state.success &&\n                                    <UncontrolledAlert color=\"success\" fade={true}>\n                                        <span className=\"alert-inner--text\">\n                                            {this.state.success}</span>\n                                    </UncontrolledAlert>}\n                            </Form>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </>\n        );\n    }\n}\n\nexport default ResetPassword;\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\nimport { validateFunc } from '../../constraints/constraints'\nimport { withTranslation } from 'react-i18next';\n// reactstrap components\nimport {\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    FormGroup,\n    Form,\n    Input,\n    Row,\n    Col,\n    UncontrolledAlert\n} from \"reactstrap\";\n// core components\nimport { server_url } from \"../../config/config\";\nimport { createRider, editRider, getRiders } from '../../apollo/server'\nimport { cloudinary_upload_url, cloudinary_profile } from \"../../config/config\";\nconst CREATE_RIDER = gql`${createRider}`\nconst EDIT_RIDER = gql`${editRider}`\nconst GET_RIDERS = gql`${getRiders}`\n\nclass Rider extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            mutation: props.rider ? EDIT_RIDER : CREATE_RIDER,\n            name: props.rider ? props.rider.name : '',\n            username: props.rider ? props.rider.username : '',\n            password: props.rider ? props.rider.password : '',\n            phone: props.rider ? props.rider.phone : '',\n            available: props.rider ? props.rider.available : true,\n            image: props.rider ? props.rider.image : '',\n            error: '',\n            success: '',\n            nameError: null,\n            usernameError: null,\n            passwordError: null,\n            phoneError: null,\n            imageError: null\n        };\n    }\n    onBlur = (field) => {\n        this.setState({ [field + 'Error']: !validateFunc({ [field]: this.state[field] }, field) })\n    }\n    filterImage = (event) => {\n        let images = [];\n        for (var i = 0; i < event.target.files.length; i++) {\n            images[i] = event.target.files.item(i);\n        }\n        images = images.filter(image => image.name.match(/\\.(jpg|jpeg|png|gif)$/))\n        let message = `${images.length} valid image(s) selected`\n        console.log(message)\n        return images.length ? images[0] : undefined\n    }\n    selectImage = (event, state) => {\n        let result = this.filterImage(event)\n        if (result) {\n            this.imageToBase64(result)\n        }\n        else {\n            this.setState({ [state + 'Error']: false })\n        }\n    }\n    onSubmitValidaiton = () => {\n        let nameError = !validateFunc({ name: this.state.name }, 'name')\n        let usernameError = !validateFunc({ username: this.state.username }, 'username')\n        let passwordError = !validateFunc({ password: this.state.password }, 'password')\n        let phoneError = !validateFunc({ phone: this.state.phone }, 'phone')\n        let imageError = !!this.state.image\n\n        this.setState({ nameError, usernameError, phoneError, imageError, passwordError })\n        return (nameError && usernameError && phoneError && imageError && passwordError)\n    }\n    clearFields = () => {\n        this.setState({\n            name: '',\n            username: '',\n            password: '',\n            phone: '',\n            image: '',\n            nameError: null,\n            usernameError: null,\n            passwordError: null,\n            phoneError: null,\n            imageError: null\n        })\n    }\n    onCompleted = (data) => {\n        if (!this.props.rider) this.clearFields()\n        const message = this.props.rider ? 'Rider updated successfully' : 'Rider added successfully'\n        this.setState({ error: '', success: message })\n        setTimeout(this.hideAlert, 5000)\n    }\n    update = (proxy, { data: { createRider } }) => {\n        try {\n            if (createRider) {\n                const data = proxy.readQuery({ query: GET_RIDERS });\n                data.riders.push(createRider);\n                proxy.writeQuery({ query: GET_RIDERS, data });\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    onError = ({ graphQLErrors, networkError }) => {\n        this.setState({ error: networkError.result.errors[0].message, success: '' })\n        setTimeout(this.hideAlert, 5000)\n    }\n    hideAlert = () => {\n        this.setState({ error: '', success: '' })\n    }\n    imageToBase64 = (imgUrl) => {\n        let fileReader = new FileReader()\n        fileReader.onloadend = () => {\n            this.setState({ image: fileReader.result, imageError: true })\n        }\n        fileReader.readAsDataURL(imgUrl)\n    }\n    uploadImageToCloudinary = async () => {\n        if (this.state.image === '')\n            return this.state.image\n        if (this.props.rider && this.props.rider.image === this.state.image)\n            return this.state.image\n\n        let apiUrl = cloudinary_upload_url;\n        let data = {\n            \"file\": this.state.image,\n            \"upload_preset\": cloudinary_profile\n        }\n        try {\n            const result = await fetch(apiUrl, {\n                body: JSON.stringify(data),\n                headers: {\n                    'content-type': 'application/json'\n                },\n                method: 'POST',\n            })\n            const imageData = await result.json()\n            return imageData.secure_url\n        }\n        catch (e) {\n            console.log(e)\n        }\n\n    }\n    render() {\n        const { t } = this.props;\n        return (\n            <Row>\n                <Col className=\"order-xl-1\" >\n                    <Card className=\"bg-secondary shadow\">\n                        <CardHeader className=\"bg-white border-0\">\n                            <Row className=\"align-items-center\">\n                                <Col xs=\"8\">\n                                    <h3 className=\"mb-0\">{this.props.rider ? t(\"Edit Rider\") : t(\"Add Rider\")}</h3>\n                                </Col>\n                            </Row>\n                        </CardHeader>\n                        <CardBody>\n                            <Mutation\n                                mutation={this.state.mutation}\n                                onCompleted={this.onCompleted}\n                                onError={this.onError}\n                                update={this.update}\n                            >\n                                {(mutate, { loading, error }) => {\n                                    if (loading) return t(\"Loading\")\n                                    return (\n                                        < Form >\n                                            <div className=\"pl-lg-4\">\n                                                <Row>\n                                                    <Col lg=\"6\">\n                                                        <label\n                                                            className=\"form-control-label\"\n                                                            htmlFor=\"input-name\"\n                                                        >{t(\"Name\")}\n                                                        </label>\n                                                        <br />\n                                                        <small>{t(\"Character limit of max length 20\")}</small>\n                                                        <FormGroup className={this.state.nameError === null ? \"\" : this.state.nameError ? \"has-success\" : \"has-danger\"}>\n\n                                                            <Input\n                                                                className=\"form-control-alternative\"\n                                                                id=\"input-name\"\n                                                                placeholder=\"e.g John Doe\"\n                                                                type=\"text\"\n                                                                maxLength=\"20\"\n                                                                value={this.state.name}\n                                                                onChange={(event) => {\n                                                                    this.setState({ name: event.target.value })\n                                                                }}\n                                                                onBlur={event => { this.onBlur('name') }}\n                                                            />\n                                                        </FormGroup>\n                                                    </Col>\n                                                    <Col lg=\"6\">\n                                                        <label\n                                                            className=\"form-control-label\"\n                                                            htmlFor=\"input-username\"\n                                                        >\n                                                            {t(\"Username\")}\n                                                        </label>\n                                                        <br />\n                                                        <small>{t(\"Character limit of max length 20\")}</small>\n                                                        <FormGroup className={this.state.usernameError === null ? \"\" : this.state.usernameError ? \"has-success\" : \"has-danger\"}>\n                                                            <Input\n                                                                className=\"form-control-alternative\"\n                                                                id=\"input-username\"\n                                                                placeholder=\"e.g ridername007\"\n                                                                maxLength=\"20\"\n                                                                type=\"text\"\n                                                                value={this.state.username}\n                                                                onChange={(event) => {\n                                                                    this.setState({ username: event.target.value.toLowerCase() })\n                                                                }}\n\n                                                                onBlur={event => { this.onBlur('username') }}\n                                                            />\n                                                        </FormGroup>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col md=\"6\">\n                                                        <label\n                                                            className=\"form-control-label\"\n                                                            htmlFor=\"input-phone\"\n                                                        >\n                                                            {t(\"Phone\")}\n                                                        </label>\n                                                        <br />\n                                                        <small>{t(\"Character limit of max length 20\")}</small>\n                                                        <FormGroup className={this.state.phoneError === null ? \"\" : this.state.phoneError ? \"has-success\" : \"has-danger\"}>\n                                                            <Input\n                                                                className=\"form-control-alternative\"\n                                                                id=\"input-phone\"\n                                                                placeholder=\"e.g 923458989989\"\n                                                                maxLength=\"20\"\n                                                                type=\"number\"\n                                                                value={this.state.phone}\n                                                                onChange={(event) => {\n                                                                    this.setState({ phone: event.target.value })\n                                                                }}\n\n                                                                onBlur={event => { this.onBlur('phone') }}\n                                                            />\n                                                        </FormGroup>\n                                                    </Col>\n                                                    <Col lg=\"6\">\n                                                        <label\n                                                            className=\"form-control-label\"\n                                                            htmlFor=\"input-password\"\n                                                        >\n                                                            {t(\"Password\")}\n                                                        </label>\n                                                        <br />\n                                                        <small>{t(\"Character limit of max length 20\")}</small>\n                                                        <FormGroup className={this.state.passwordError === null ? \"\" : this.state.passwordError ? \"has-success\" : \"has-danger\"}>\n                                                            <Input\n                                                                className=\"form-control-alternative\"\n                                                                id=\"input-password\"\n                                                                placeholder=\"e.g 132\"\n                                                                maxLength=\"20\"\n                                                                type=\"text\"\n                                                                value={this.state.password}\n                                                                onChange={(event) => {\n                                                                    this.setState({ password: event.target.value })\n                                                                }}\n\n                                                                onBlur={event => { this.onBlur('password') }}\n                                                            />\n                                                        </FormGroup>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col lg=\"6\">\n                                                        <label\n                                                            className=\"form-control-label\"\n                                                            htmlFor=\"input-available\">\n                                                            {t(\"Available\")}\n                                                        </label>\n                                                        <FormGroup >\n                                                            <label className=\"custom-toggle\">\n                                                                <input\n                                                                    defaultChecked={this.state.available}\n                                                                    type=\"checkbox\"\n                                                                    onChange={event => {\n                                                                        this.setState({ available: event.target.checked })\n                                                                    }} />\n                                                                <span className=\"custom-toggle-slider rounded-circle\" />\n                                                            </label>\n                                                        </FormGroup>\n                                                    </Col>\n                                                    <Col lg=\"6\">\n                                                        {this.state.success &&\n                                                            <UncontrolledAlert color=\"success\" fade={true}>\n                                                                <span className=\"alert-inner--text\">\n                                                                    {this.state.success}</span>\n                                                            </UncontrolledAlert>}\n                                                        {this.state.error &&\n                                                            <UncontrolledAlert color=\"danger\" fade={true}>\n                                                                <span className=\"alert-inner--text\">\n                                                                    {this.state.error}</span>\n                                                            </UncontrolledAlert>}\n                                                    </Col>\n                                                </Row>\n                                                <Row >\n                                                    <Col lg=\"6\" >\n                                                        <label\n                                                            className=\"form-control-label\"\n                                                            htmlFor=\"input-image\">\n                                                            {t(\"Rider Image\")}\n                                                        </label>\n                                                        <FormGroup className={this.state.imageError === null ? \"\" : this.state.imageError ? \"has-success\" : \"has-danger\"}>\n                                                            <div className=\"card-title-image\">\n                                                                {!!this.state.image && typeof this.state.image === 'string' && <a href=\"#pablo\" onClick={e => e.preventDefault()}>\n                                                                    <img\n                                                                        alt=\"...\"\n                                                                        className=\"rounded-rectangle\"\n                                                                        src={this.state.image}\n                                                                    />\n                                                                </a>}\n                                                            </div>\n                                                            <input\n                                                                className=\"mt-2\"\n                                                                type=\"file\"\n                                                                onChange={(event) => { this.selectImage(event, \"image\") }} />\n                                                        </FormGroup>\n                                                    </Col>\n                                                </Row>\n                                                <Row >\n\n                                                    <Col className=\"text-right\" lg=\"6\">\n                                                        <Button\n                                                            color=\"primary\"\n                                                            href=\"#pablo\"\n                                                            onClick={async e => {\n                                                                e.preventDefault()\n                                                                if (this.onSubmitValidaiton()) {\n                                                                    mutate({\n                                                                        variables: {\n                                                                            riderInput: {\n                                                                                _id: this.props.rider ? this.props.rider._id : '',\n                                                                                name: this.state.name,\n                                                                                username: this.state.username,\n                                                                                password: this.state.password,\n                                                                                phone: this.state.phone,\n                                                                                image: await this.uploadImageToCloudinary(),\n                                                                                available: this.state.available\n                                                                            }\n                                                                        }\n                                                                    })\n                                                                }\n                                                                this.setState({ error: '', success: '' })\n                                                            }}\n                                                            size=\"md\"\n                                                        >\n                                                            {t(\"Save\")}\n                                                        </Button>\n                                                    </Col>\n                                                </Row>\n\n                                            </div>\n                                        </Form>\n                                    )\n                                }}</Mutation>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        )\n    }\n}\nexport default withTranslation()(Rider)","import React from 'react';\nimport { withTranslation } from 'react-i18next';\n// reactstrap components\nimport {\n    Card,\n    CardHeader,\n    Container,\n    Row,\n    Table,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    Modal,\n} from \"reactstrap\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Header from \"../components/Headers/Header\";\nimport RiderComponent from '../components/Rider/Rider';\nimport { getRiders, deleteRider, toggleAvailablity, getAvailableRiders } from \"../apollo/server\";\n\nconst GET_RIDERS = gql`${getRiders}`\nconst DELETE_RIDER = gql`${deleteRider}`\nconst TOGGLE_RIDER = gql`${toggleAvailablity}`\nconst GET_AVAILABLE_RIDERS = gql`${getAvailableRiders}`\nclass Riders extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            editModal: false,\n            rider: null\n        };\n    }\n    toggleModal = (rider) => {\n        this.setState({\n            editModal: !this.state.editModal,\n            rider: rider\n        });\n    }\n\n    onCompleted = (data) => {\n\n    }\n    onError = (error) => {\n\n    }\n\n    render() {\n        const { t } = this.props;\n        return (\n            <>\n                <Header />\n                {/* Page content */}\n                <Container className=\"mt--7\" fluid>\n                    <RiderComponent />\n                    {/* Table */}\n                    <Row className=\"mt-5\">\n                        <div className=\"col\">\n                            <Card className=\"shadow\">\n                                <CardHeader className=\"border-0\">\n                                    <h3 className=\"mb-0\">{t(\"Riders\")}</h3>\n                                </CardHeader>\n\n\n                                <Table className=\"align-items-center table-flush\" responsive>\n                                    <thead className=\"thead-light\">\n                                        <tr>\n                                            <th scope=\"col\">{t(\"Name\")}</th>\n                                            <th scope=\"col\">{t(\"Username\")}</th>\n                                            <th scope=\"col\">{t(\"Password\")}</th>\n                                            <th scope=\"col\">{t(\"Phone\")}</th>\n                                            <th scope=\"col\">{t(\"Available\")}</th>\n                                            <th scope=\"col\">{t(\"Actions\")}</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <Query query={GET_RIDERS} onError={error => { console.log(error) }}>\n                                            {({ loading, error, data }) => {\n                                                if (loading) return <tr><td>{t(\"Loading\")}</td></tr>;\n                                                if (error) return <tr><td>`${t(\"Error\")}! ${error.message}`</td></tr>;\n                                                if (!data.riders.length) return <tr><td>No riders found.</td></tr>;\n                                                return data.riders.map(rider =>\n                                                    <tr key={rider._id}>\n                                                        <td>{rider.name}</td>\n                                                        <td>{rider.username}</td>\n                                                        <td>{rider.password}</td>\n                                                        <td>{rider.phone}</td>\n                                                        <td>{rider.available}\n                                                            <label className=\"custom-toggle\">\n                                                                <Mutation\n                                                                    mutation={TOGGLE_RIDER}\n                                                                    onCompleted={this.onCompleted}\n                                                                    onError={this.onError}\n                                                                    refetchQueries={[{ query: GET_RIDERS }, { query: GET_AVAILABLE_RIDERS }]} >\n                                                                    {(toggleRider) => {\n                                                                        return <input\n                                                                            defaultChecked={rider.available}\n                                                                            type=\"checkbox\"\n                                                                            onChange={(event) => {\n                                                                                toggleRider({ variables: { id: rider._id } })\n                                                                            }}\n                                                                        />\n                                                                    }}\n                                                                </Mutation>\n                                                                <span className=\"custom-toggle-slider rounded-circle\" />\n                                                            </label>\n                                                        </td>\n                                                        <td className=\"text-right\">\n                                                            <UncontrolledDropdown>\n                                                                <DropdownToggle\n                                                                    className=\"btn-icon-only text-light\"\n                                                                    href=\"#pablo\"\n                                                                    role=\"button\"\n                                                                    size=\"sm\"\n                                                                    color=\"\"\n                                                                    onClick={e => e.preventDefault()}\n                                                                >\n                                                                    <i className=\"fas fa-ellipsis-v\" />\n                                                                </DropdownToggle>\n                                                                <DropdownMenu className=\"dropdown-menu-arrow\" right>\n                                                                    <DropdownItem\n                                                                        href=\"#pablo\"\n                                                                        onClick={e => {\n                                                                            e.preventDefault()\n                                                                            this.toggleModal(rider)\n                                                                        }\n                                                                        }\n                                                                    >\n                                                                        {t(\"Edit\")}\n                                                                    </DropdownItem>\n                                                                    <Mutation mutation={DELETE_RIDER}\n                                                                        onCompleted={this.onCompleted}\n                                                                        onError={this.onError}\n                                                                        refetchQueries={[{ query: GET_RIDERS }]} >\n                                                                        {(deleteRider, { loading }) => {\n                                                                            return <DropdownItem\n                                                                                href=\"#pablo\"\n                                                                                onClick={e => {\n                                                                                    e.preventDefault()\n                                                                                    deleteRider({ variables: { id: rider._id } })\n                                                                                }}\n                                                                            >\n                                                                                {t(\"Delete\")}\n                                                                            </DropdownItem>\n                                                                        }}\n                                                                    </Mutation>\n                                                                </DropdownMenu>\n                                                            </UncontrolledDropdown>\n                                                        </td>\n                                                    </tr>\n                                                )\n                                            }}\n                                        </Query>\n                                    </tbody>\n                                </Table>\n\n                            </Card>\n                        </div>\n                    </Row>\n                    <Modal\n                        className=\"modal-dialog-centered\"\n                        size=\"lg\"\n                        isOpen={this.state.editModal}\n                        toggle={() => { this.toggleModal() }}\n                    >\n                        <RiderComponent rider={this.state.rider} />\n                    </Modal>\n                </Container>\n            </>\n        )\n    }\n}\n\nexport default withTranslation()(Riders);","import React, { Component } from 'react';\nimport {\n    Container,\n    Row,\n    Card,\n    CardHeader,\n    Table,\n    DropdownItem,\n    DropdownToggle,\n    DropdownMenu,\n    UncontrolledDropdown,\n    Media,\n    Modal\n} from 'reactstrap';\nimport Header from \"components/Headers/Header.jsx\";\nimport OptionComponent from '../components/Option/Option';\nimport { withTranslation } from 'react-i18next';\nimport { Query, Mutation } from 'react-apollo';\nimport { getOptions, deleteOption } from '../apollo/server';\nimport gql from 'graphql-tag';\n\nconst GET_OPTIONS = gql`${getOptions}`\nconst DELETE_OPTION = gql`${deleteOption}`\n\nclass Option extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { editModal: false, option: null }\n    }\n    toggleModal = (option) => {\n        this.setState({\n            editModal: !this.state.editModal,\n            option\n        });\n    }\n    onCompleted = ({ deleteOption }) => {\n        console.log(deleteOption)\n    }\n    onError = (error) => {\n        console.log(error)\n    }\n    update = (proxy, { data: { deleteOption } }) => {\n        try {\n            if (deleteOption) {\n                const data = proxy.readQuery({ query: GET_OPTIONS });\n                data.options = data.options.filter(option => option._id !== deleteOption);\n                proxy.writeQuery({ query: GET_OPTIONS, data });\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    render() {\n        const { t } = this.props\n        return (\n            <>\n                <Header />\n                {/* Page content */}\n                <Container className=\"mt--7\" fluid>\n                    <OptionComponent />\n                    <Row className=\"mt-5\">\n                        <div className=\"col\">\n                            <Card className=\"shadow\">\n                                <CardHeader className=\"border-0\">\n                                    <h3 className=\"mb-0\">{t(\"Addons\")}</h3>\n                                </CardHeader>\n                                <Table className=\"align-items-center table-flush\" responsive>\n                                    <thead className=\"thead-light\">\n                                        <tr>\n                                            <th scope=\"col\">{t(\"Title\")}</th>\n                                            <th scope=\"col\">{t(\"Description\")}</th>\n                                            <th scope=\"col\">{t(\"Price\")}</th>\n                                            <th scope=\"col\">{t(\"Actions\")}</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <Query query={GET_OPTIONS}>\n                                            {({ loading, error, data }) => {\n                                                if (loading) return <tr><td>{t(\"Loading\")}</td></tr>;\n                                                if (error) return <tr><td>`${t(\"Error\")}! ${error.message}`</td></tr>;\n                                                return data.options.map(option =>\n                                                    <tr key={option._id}>\n                                                        <th scope=\"row\">\n                                                            <Media>\n                                                                <span className=\"mb-0 text-sm\">\n                                                                    {option.title}\n                                                                </span>\n                                                            </Media>\n                                                        </th>\n                                                        <td style={{ whiteSpace: 'pre' }}>{option.description}</td>\n                                                        <td> {option.price}</td>\n\n                                                        <td className=\"text-right\">\n                                                            <UncontrolledDropdown>\n                                                                <DropdownToggle\n                                                                    className=\"btn-icon-only text-light\"\n                                                                    href=\"#pablo\"\n                                                                    role=\"button\"\n                                                                    size=\"sm\"\n                                                                    color=\"\"\n                                                                    onClick={e => e.preventDefault()}\n                                                                >\n                                                                    <i className=\"fas fa-ellipsis-v\" />\n                                                                </DropdownToggle>\n                                                                <DropdownMenu className=\"dropdown-menu-arrow\" right>\n                                                                    <DropdownItem\n                                                                        href=\"#pablo\"\n                                                                        onClick={e => {\n                                                                            e.preventDefault()\n                                                                            this.toggleModal(option)\n                                                                        }\n                                                                        }\n                                                                    >\n                                                                        {t(\"Edit\")}\n                                                                    </DropdownItem>\n                                                                    <Mutation mutation={DELETE_OPTION}\n                                                                        onCompleted={this.onCompleted}\n                                                                        onError={this.onError}\n                                                                        update={this.update} >\n                                                                        {(deleteOption, { loading }) => {\n                                                                            return <DropdownItem\n                                                                                href=\"#pablo\"\n                                                                                onClick={e => {\n                                                                                    e.preventDefault()\n                                                                                    deleteOption({ variables: { id: option._id } })\n                                                                                }}\n                                                                            >\n                                                                                {t(\"Delete\")}\n                                                                            </DropdownItem>\n                                                                        }}\n                                                                    </Mutation>\n                                                                </DropdownMenu>\n                                                            </UncontrolledDropdown>\n                                                        </td>\n                                                    </tr>\n                                                )\n                                            }}\n                                        </Query>\n                                    </tbody>\n                                </Table>\n\n                            </Card>\n                        </div>\n                    </Row>\n                    <Modal\n                        className=\"modal-dialog-centered\"\n                        size=\"lg\"\n                        isOpen={this.state.editModal}\n                        toggle={() => { this.toggleModal() }}\n                    >\n                        <OptionComponent option={this.state.option} />\n                    </Modal>\n                </Container>\n            </>\n        )\n    }\n}\n\nexport default withTranslation()(Option)\n","import React, { Component } from 'react';\nimport {\n    Container,\n    Row,\n    Card,\n    CardHeader,\n    Table,\n    Media,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    Modal\n} from 'reactstrap';\nimport Header from \"components/Headers/Header.jsx\";\nimport AddonComponent from '../components/Addon/Addon';\nimport { getAddons, deleteAddon } from '../apollo/server';\nimport { withTranslation } from 'react-i18next';\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\n\nconst GET_ADDONS = gql`${getAddons}`\nconst DELETE_ADDON = gql`${deleteAddon}`\n\nclass Addon extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            addon: null,\n            editModal: false\n        };\n    }\n    toggleModal = (addon) => {\n        this.setState({\n            editModal: !this.state.editModal,\n            addon\n        });\n    }\n    onCompleted = ({ deleteAddon }) => {\n        console.log(deleteAddon)\n    }\n    onError = (error) => {\n        console.log(error)\n    }\n    update = (proxy, { data: { deleteAddon } }) => {\n        try {\n            if (deleteAddon) {\n                const data = proxy.readQuery({ query: GET_ADDONS });\n                data.addons = data.addons.filter(addon => addon._id !== deleteAddon);\n                proxy.writeQuery({ query: GET_ADDONS, data });\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    render() {\n        const { t } = this.props\n        return (\n            <>\n                <Header />\n                {/* Page content */}\n                <Container className=\"mt--7\" fluid>\n                    <AddonComponent />\n                    <Row className=\"mt-5\">\n                        <div className=\"col\">\n                            <Card className=\"shadow\">\n                                <CardHeader className=\"border-0\">\n                                    <h3 className=\"mb-0\">{t(\"Addons\")}</h3>\n                                </CardHeader>\n                                <Table className=\"align-items-center table-flush\" responsive>\n                                    <thead className=\"thead-light\">\n                                        <tr>\n                                            <th scope=\"col\">{t(\"Title\")}</th>\n                                            <th scope=\"col\">{t(\"Description\")}</th>\n                                            <th scope=\"col\">{t(\"Minimum\")}</th>\n                                            <th scope=\"col\">{t(\"Maximum\")}</th>\n                                            <th scope=\"col\">{t(\"Actions\")}</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <Query query={GET_ADDONS}>\n                                            {({ loading, error, data }) => {\n                                                if (loading) return <tr><td>{t(\"Loading\")}</td></tr>;\n                                                if (error) return <tr><td>`${t(\"Error\")}! ${error.message}`</td></tr>;\n                                                return data.addons.map(addon =>\n                                                    <tr key={addon._id}>\n                                                        <th scope=\"row\">\n                                                            <Media>\n                                                                <span className=\"mb-0 text-sm\">\n                                                                    {addon.title}\n                                                                </span>\n                                                            </Media>\n                                                        </th>\n                                                        <td style={{ whiteSpace: 'pre' }}>{addon.description}</td>\n                                                        <td> {addon.quantity_minimum}</td>\n                                                        <td>\n                                                            {addon.quantity_maximum}\n                                                        </td>\n                                                        <td className=\"text-right\">\n                                                            <UncontrolledDropdown>\n                                                                <DropdownToggle\n                                                                    className=\"btn-icon-only text-light\"\n                                                                    href=\"#pablo\"\n                                                                    role=\"button\"\n                                                                    size=\"sm\"\n                                                                    color=\"\"\n                                                                    onClick={e => e.preventDefault()}\n                                                                >\n                                                                    <i className=\"fas fa-ellipsis-v\" />\n                                                                </DropdownToggle>\n                                                                <DropdownMenu className=\"dropdown-menu-arrow\" right>\n                                                                    <DropdownItem\n                                                                        href=\"#pablo\"\n                                                                        onClick={e => {\n                                                                            e.preventDefault()\n                                                                            this.toggleModal(addon)\n                                                                        }\n                                                                        }\n                                                                    >\n                                                                        {t(\"Edit\")}\n                                                                    </DropdownItem>\n                                                                    <Mutation mutation={DELETE_ADDON}\n                                                                        onCompleted={this.onCompleted}\n                                                                        onError={this.onError}\n                                                                        update={this.update} >\n                                                                        {(deleteAddon) => {\n                                                                            return <DropdownItem\n                                                                                href=\"#pablo\"\n                                                                                onClick={e => {\n                                                                                    e.preventDefault()\n                                                                                    deleteAddon({ variables: { id: addon._id } })\n                                                                                }}\n                                                                            >\n                                                                                {t(\"Delete\")}\n                                                                            </DropdownItem>\n                                                                        }}\n                                                                    </Mutation>\n                                                                </DropdownMenu>\n                                                            </UncontrolledDropdown>\n                                                        </td>\n                                                    </tr>\n                                                )\n                                            }}\n                                        </Query>\n                                    </tbody>\n                                </Table>\n\n                            </Card>\n                        </div>\n                    </Row>\n                    <Modal\n                        className=\"modal-dialog-centered\"\n                        size=\"lg\"\n                        isOpen={this.state.editModal}\n                        toggle={() => { this.toggleModal() }}\n                    >\n                        <AddonComponent addon={this.state.addon} />\n                    </Modal>\n\n                </Container>\n            </>\n        )\n    }\n}\n\nexport default withTranslation()(Addon)\n","import React from \"react\";\n// node.js library that concatenates classes (strings)\n// react plugin used to create charts\nimport { Line, Bar } from \"react-chartjs-2\";\n// reactstrap components\nimport {\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    CardTitle,\n    Container,\n    Row,\n    FormGroup,\n    Input,\n    Col\n} from \"reactstrap\";\n\nimport Header from \"components/Headers/Header.jsx\";\nimport { Query } from \"react-apollo\";\nimport { getDashboardTotal, getDashboardSales, getDashboardOrders } from \"../apollo/server\";\nimport gql from \"graphql-tag\";\n\nconst GET_DASHBOARD_TOTAL = gql`${getDashboardTotal}`\nconst GET_DASHBOARD_SALES = gql`${getDashboardSales}`\nconst GET_DASHBOARD_ORDERS = gql`${getDashboardOrders}`\n\n\n\n\nconst dataLine = {\n    datasets:\n    {\n        label: 'Sales Amount',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n    }\n};\nconst dataBar = {\n    datasets:\n    {\n        label: 'Order count',\n        backgroundColor: 'rgba(255,99,132,0.2)',\n        borderColor: 'rgba(255,99,132,1)',\n        borderWidth: 1,\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n        hoverBorderColor: 'rgba(255,99,132,1)',\n    }\n};\n\nclass Dashboard extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            startingDate: this.intializeStartDate(), //new Date().toISOString().substr(0,10),\n            endingDate: new Date().toISOString().substr(0, 10)\n        }\n    }\n    intializeStartDate = () => {\n        var d = new Date()\n        d.setDate(d.getDate() - 7)\n        return d.toISOString().substr(0, 10)\n    }\n    componentWillMount() {\n    }\n    render() {\n        return (\n            <>\n                <Header />\n                {/* Page content */}\n                <Container className=\"mt--7\" fluid>\n                    <Query query={GET_DASHBOARD_TOTAL} variables={{ startingDate: this.state.startingDate.toString(), endingDate: this.state.endingDate.toString() }}>\n                        {({ loading, error, data }) => {\n                            if (error) return null\n                            return <Row>\n                                <Col className=\"mb-lg-5 mb-sm-3\" xl=\"4\">\n                                    <Card className=\"card-stats mb-4 mb-lg-0\">\n                                        <CardBody>\n                                            <Row>\n                                                <div className=\"col\">\n                                                    <CardTitle className=\"text-uppercase text-muted mb-0\">\n                                                        Total Orders\n                                                </CardTitle>\n                                                    <span className=\"h2 font-weight-bold mb-0\">{loading ? '...' : data.getDashboardTotal.total_orders}</span>\n                                                </div>\n                                                <Col className=\"col-auto\">\n                                                    <div className=\"icon icon-shape bg-danger text-white rounded-circle shadow\">\n                                                        <i className=\"ni ni-cart\" />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                                <Col className=\"mb-lg-5 mb-sm-3\" xl=\"4\">\n                                    <Card className=\"card-stats mb-4 mb-lg-0\">\n                                        <CardBody>\n                                            <Row>\n                                                <div className=\"col\">\n                                                    <CardTitle className=\"text-uppercase text-muted mb-0\">\n                                                        Total Users\n                                                    </CardTitle>\n                                                    <span className=\"h2 font-weight-bold mb-0\">{loading ? '...' : data.getDashboardTotal.total_users}</span>\n                                                </div>\n                                                <Col className=\"col-auto\">\n                                                    <div className=\"icon icon-shape bg-danger text-white rounded-circle shadow\">\n                                                        <i className=\"ni ni-single-02\" />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                                <Col className=\"mb-lg-5 mb-sm-3\" xl=\"4\">\n                                    <Card className=\"card-stats mb-4 mb-lg-0\">\n                                        <CardBody>\n                                            <Row>\n                                                <div className=\"col\">\n                                                    <CardTitle className=\"text-uppercase text-muted mb-0\">\n                                                        Total Sales\n                                                    </CardTitle>\n                                                    <span className=\"h2 font-weight-bold mb-0\">{loading ? '...' : data.getDashboardTotal.total_sales}</span>\n                                                </div>\n                                                <Col className=\"col-auto\">\n                                                    <div className=\"icon icon-shape bg-danger text-white rounded-circle shadow\">\n                                                        <i className=\"fas fa-chart-bar\" />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                            </Row>\n                        }}\n                    </Query>\n\n                    <Row className=\"mb-lg-5 mb-sm-3\">\n                        <Col className=\"mb-5 mb-xl-0\" xl=\"12\">\n                            <Card className=\"shadow\">\n                                <CardHeader className=\"bg-transparent\">\n                                    <Row className=\"align-items-center\">\n                                        <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                            Filter Graph\n                                        </h6>\n                                    </Row>\n                                </CardHeader>\n                                <CardBody>\n                                    <Row>\n                                        <Col xl=\"4\">\n                                            <FormGroup>\n                                                <label\n                                                    className=\"form-control-label\"\n                                                >\n                                                    Starting Date\n                                                        </label>\n                                                <Input\n                                                    className=\"form-control-alternative\"\n                                                    type=\"date\"\n                                                    max={new Date().toISOString().substr(0, 10)}\n                                                    onChange={(event) => {\n                                                        console.log(event.target.value)\n                                                        this.setState({ startingDate: event.target.value })\n                                                    }}\n                                                    value={this.state.startingDate}\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                        <Col xl=\"4\">\n                                            <FormGroup>\n                                                <label\n                                                    className=\"form-control-label\"\n                                                >\n                                                    Ending Date\n                                                        </label>\n                                                <Input\n                                                    className=\"form-control-alternative\"\n                                                    type=\"date\"\n                                                    max={new Date().toISOString().substr(0, 10)}\n                                                    onChange={(event) => {\n                                                        this.setState({ endingDate: event.target.value })\n                                                    }}\n                                                    value={this.state.endingDate}\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                        <Col xl=\"4\">\n                                            <FormGroup>\n                                                <label\n                                                    className=\"form-control-label\"\n                                                    htmlFor=\"input-description\"\n                                                >\n                                                    Filter Graph\n                                                        </label>\n                                                <Button\n                                                    className=\"btn-block\"\n                                                    color=\"primary\"\n                                                >\n                                                    Submit\n                                                </Button>\n                                            </FormGroup>\n                                        </Col>\n                                    </Row>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Query query={GET_DASHBOARD_SALES} variables={{ startingDate: this.state.startingDate.toString(), endingDate: this.state.endingDate.toString() }}>\n                            {({ loading, error, data }) => {\n                                if (error) return null\n                                return <Col className=\"mb-5 mb-xl-0\" xl=\"8\">\n                                    <Card className=\"bg-gradient-default shadow\">\n                                        <CardHeader className=\"bg-transparent\">\n                                            <Row className=\"align-items-center\">\n                                                <div className=\"col\">\n                                                    <h6 className=\"text-uppercase text-light ls-1 mb-1\">\n                                                        Overview\n                                            </h6>\n                                                    <h2 className=\"text-white mb-0\">Sales value</h2>\n                                                </div>\n                                            </Row>\n                                        </CardHeader>\n                                        <CardBody>\n                                            {/* Chart */}\n                                            <div className=\"chart\">\n                                                <Line data={{ labels: loading ? [] : data.getDashboardSales.orders.map(d => d.day), datasets: [{ ...dataLine.datasets, data: loading ? [] : data.getDashboardSales.orders.map(d => d.amount) }] }} />\n                                            </div>\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                            }}\n                        </Query>\n                        <Query query={GET_DASHBOARD_ORDERS} variables={{ startingDate: this.state.startingDate.toString(), endingDate: this.state.endingDate.toString() }}>\n                            {({ loading, error, data }) => {\n                                if (error) return null\n                                return <Col xl=\"4\">\n                                    <Card className=\"shadow\">\n                                        <CardHeader className=\"bg-transparent\">\n                                            <Row className=\"align-items-center\">\n                                                <div className=\"col\">\n                                                    <h6 className=\"text-uppercase text-muted ls-1 mb-1\">\n                                                        Performance\n                                            </h6>\n                                                    <h2 className=\"mb-0\">Total orders</h2>\n                                                </div>\n                                            </Row>\n                                        </CardHeader>\n                                        <CardBody>\n                                            {/* Chart */}\n                                            <div className=\"chart\">\n                                                <Bar\n                                                    data={{ labels: loading ? [] : data.getDashboardOrders.orders.map(d => d.day), datasets: [{ ...dataBar.datasets, data: loading ? [] : data.getDashboardOrders.orders.map(d => d.count) }] }}\n                                                    width={100}\n                                                    height={50}\n                                                    options={{\n                                                        maintainAspectRatio: false\n                                                    }}\n                                                />\n                                            </div>\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                            }}\n                        </Query>\n                    </Row>\n                </Container>\n            </>\n        );\n    }\n}\n\nexport default Dashboard;\n","import Login from \"views/Login.jsx\";\nimport Category from \"views/Category.jsx\";\nimport Food from \"./views/Food\";\nimport Orders from \"./views/Orders\";\nimport Configuration from \"./views/Configuration\";\nimport Users from \"./views/Users\";\nimport ResetPassword from \"./views/ForgotPassword\";\nimport Riders from \"./views/Riders\";\nimport Options from \"./views/Options\";\nimport Addons from \"./views/Addons\";\nimport Dashboard from \"./views/Dashboard\";\n\nvar routes = [\n  {\n    path: \"/dashboard\",\n    name: \"Dashboard\",\n    icon: \"ni ni-tv-2 text-primary\",\n    component: Dashboard,\n    layout: \"/admin\",\n    appearInSidebar: true\n  },\n  {\n    path: \"/category\",\n    name: \"Category\",\n    icon: \"ni ni-chart-pie-35 text-red\",\n    component: Category,\n    layout: \"/admin\",\n    appearInSidebar: true\n  },\n  {\n    path: \"/food\",\n    name: \"Food\",\n    icon: \"ni ni-tie-bow text-green\",\n    component: Food,\n    layout: \"/admin\",\n    appearInSidebar: true\n  },\n  {\n    path: \"/orders\",\n    name: \"Orders\",\n    icon: \"ni ni-delivery-fast text-orange\",\n    component: Orders,\n    layout: \"/admin\",\n    appearInSidebar: true\n  },\n  {\n    path: \"/users\",\n    name: \"Users\",\n    icon: \"ni ni-single-02 text-black\",\n    component: Users,\n    layout: \"/admin\",\n    appearInSidebar: true\n  },\n  {\n    path: \"/riders\",\n    name: \"Riders\",\n    icon: \"ni ni-single-02 text-black\",\n    component: Riders,\n    layout: \"/admin\",\n    appearInSidebar: true\n  },\n  {\n    path: \"/configuration\",\n    name: \"Configuration\",\n    icon: \"ni ni-settings-gear-65 text-black\",\n    component: Configuration,\n    layout: \"/admin\",\n    appearInSidebar: true\n  },\n  {\n    path: \"/option\",\n    name: \"Option\",\n    icon: \"ni ni-settings-gear-65 text-black\",\n    component: Options,\n    layout: \"/admin\",\n    appearInSidebar: true\n  },\n  {\n    path: \"/addons\",\n    name: \"Addons\",\n    icon: \"ni ni-settings-gear-65 text-black\",\n    component: Addons,\n    layout: \"/admin\",\n    appearInSidebar: true\n  },\n  {\n    path: \"/login\",\n    name: \"Login\",\n    icon: \"ni ni-key-25 text-info\",\n    component: Login,\n    layout: \"/auth\",\n    appearInSidebar: false\n  },\n  {\n    path: \"/reset\",\n    name: \"ResetPassword\",\n    icon: \"ni ni-key-25 text-info\",\n    component: ResetPassword,\n    layout: \"/auth\",\n    appearInSidebar: false\n  },\n];\nexport default routes;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n// reactstrap components\nimport { Container } from \"reactstrap\";\n// core components\nimport AdminNavbar from \"components/Navbars/AdminNavbar.jsx\";\nimport AdminFooter from \"components/Footers/AdminFooter.jsx\";\nimport Sidebar from \"components/Sidebar/Sidebar.jsx\";\n\nimport routes from \"routes.js\";\n\nclass Admin extends React.Component {\n  componentDidUpdate(e) {\n    document.documentElement.scrollTop = 0;\n    document.scrollingElement.scrollTop = 0;\n    this.refs.mainContent.scrollTop = 0;\n  }\n  getRoutes = routes => {\n    return routes.map((prop, key) => {\n      if (prop.layout === \"/admin\") {\n        return (\n          <Route\n            path={prop.layout + prop.path}\n            component={prop.component}\n            key={key}\n          />\n        );\n      } else {\n        return null;\n      }\n    });\n  };\n  getBrandText = path => {\n    for (let i = 0; i < routes.length; i++) {\n      if (\n        this.props.location.pathname.indexOf(\n          routes[i].layout + routes[i].path\n        ) !== -1\n      ) {\n        return routes[i].name;\n      }\n    }\n    return \"Brand\";\n  };\n  render() {\n    return (\n      <>\n        <Sidebar\n          {...this.props}\n          routes={routes}\n          logo={{\n            innerLink: \"/admin/dashboard\",\n            imgSrc: require(\"assets/img/brand/logo.png\"),\n            imgAlt: \"...\"\n          }}\n        />\n        <div className=\"main-content\" ref=\"mainContent\">\n          <AdminNavbar\n            {...this.props}\n            brandText={this.getBrandText(this.props.location.pathname)}\n          />\n          <Switch>{this.getRoutes(routes)}</Switch>\n          <Container fluid>\n            <AdminFooter />\n          </Container>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Admin;\n","import React from \"react\";\nimport { withTranslation } from 'react-i18next';\nimport { Link } from \"react-router-dom\";\n// reactstrap components\nimport {\n  UncontrolledCollapse,\n  Navbar,\n  NavItem,\n  NavLink,\n  Nav,\n  Container,\n  Row,\n  Col,\n  FormGroup,\n  Input\n} from \"reactstrap\";\n\nclass AdminNavbar extends React.Component {\n  handleChange = (event) => {\n    localStorage.setItem(\"enatega-language\", event.target.value)\n    this.props.i18n.changeLanguage(event.target.value)\n  }\n  render() {\n    const { t } = this.props;\n    return (\n      <>\n        <Navbar\n          className=\"navbar-top navbar-horizontal navbar-dark\"\n          expand=\"md\"\n        >\n          <Container className=\"px-4\">\n\n            <button className=\"navbar-toggler\" id=\"navbar-collapse-main\">\n              <span className=\"navbar-toggler-icon\" />\n            </button>\n            <UncontrolledCollapse navbar toggler=\"#navbar-collapse-main\">\n              <div className=\"navbar-collapse-header d-md-none\">\n                <Row>\n\n                  <Col className=\"collapse-close\" xs=\"6\">\n                    <button\n                      className=\"navbar-toggler\"\n                      id=\"navbar-collapse-main\"\n                    >\n                      <span />\n                      <span />\n                    </button>\n                  </Col>\n                </Row>\n              </div>\n              <Nav className=\"ml-auto\" navbar>\n                <NavItem>\n                  <NavLink className=\"nav-link-icon\" to=\"/\" tag={Link}>\n                    <i className=\"ni ni-planet\" />\n                    <span className=\"nav-link-inner--text\">{t(\"Dashboard\")}</span>\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <FormGroup >\n                    <Input\n                      type=\"select\"\n                      name=\"select\"\n                      defaultValue={localStorage.getItem(\"enatega-language\")}\n                      id=\"exampleSelect\"\n                      onChange={this.handleChange}\n                      onBlur={event => { }}>\n                      <option value=\"en\">English</option>\n                      <option value=\"de\">Deutsche</option>\n                      <option value=\"zh\">中文</option>\n                      <option value=\"km\">ភាសាខ្មែរ</option>\n                      <option value=\"fr\">français</option>\n                    </Input>\n                  </FormGroup>\n                </NavItem>\n              </Nav>\n            </UncontrolledCollapse>\n          </Container>\n        </Navbar>\n      </>\n    );\n  }\n}\n\nexport default withTranslation()(AdminNavbar);\n","/*eslint-disable*/\nimport React from \"react\";\nimport { withTranslation } from 'react-i18next';\n// reactstrap components\nimport { NavItem, NavLink, Nav, Container, Row, Col } from \"reactstrap\";\n\nclass AuthFooter extends React.Component {\n  render() {\n    const { t } = this.props;\n    return (\n      <>\n        <footer className=\"py-5\">\n          <Container>\n            <Row className=\"align-items-center justify-content-xl-between\">\n              <Col xl=\"6\">\n                <div className=\"copyright text-center text-xl-left text-muted\">\n                  © {t(\"2019\")}{\" \"}\n                  <a\n                    className=\"font-weight-bold ml-1\"\n                    href=\"https://enatega.com/\"\n                    target=\"_blank\"\n                  >\n                    Enatega\n                  </a>\n                </div>\n              </Col>\n              <Col xl=\"6\">\n                <Nav className=\"nav-footer justify-content-center justify-content-xl-end\">\n                  <NavItem>\n                    <NavLink\n                      href=\"https://enatega.com/\"\n                      target=\"_blank\"\n                    >\n                      Enatega\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink\n                      href=\"https://ninjascode.com/pages/ourteam.html\"\n                      target=\"_blank\"\n                    >\n                      {t(\"About Us\")}\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink\n                      href=\"https://medium.com/@sharangohar\"\n                      target=\"_blank\"\n                    >\n                      {t(\"Blog\")}\n                    </NavLink>\n                  </NavItem>\n                </Nav>\n              </Col>\n            </Row>\n          </Container>\n        </footer>\n      </>\n    );\n  }\n}\n\nexport default withTranslation()(AuthFooter);\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n// reactstrap components\nimport { Container, Row } from \"reactstrap\";\n\n// core components\nimport AuthNavbar from \"components/Navbars/AuthNavbar.jsx\";\nimport AuthFooter from \"components/Footers/AuthFooter.jsx\";\n\nimport routes from \"routes.js\";\n\nclass Auth extends React.Component {\n  componentDidMount() {\n    document.body.classList.add(\"bg-default\");\n  }\n  componentWillUnmount() {\n    document.body.classList.remove(\"bg-default\");\n  }\n  getRoutes = routes => {\n    return routes.map((prop, key) => {\n      if (prop.layout === \"/auth\" ) {\n        return (\n          <Route\n            path={prop.layout + prop.path}\n            component={prop.component}\n            key={key}\n          />\n        );\n      } else {\n        return null;\n      }\n    });\n  };\n  render() {\n    return (\n      <>\n        <div className=\"main-content\">\n          <AuthNavbar />\n          <div className=\"header bg-gradient-warning py-7 py-lg-8\">\n            \n            <div className=\"separator separator-bottom separator-skew zindex-100\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                preserveAspectRatio=\"none\"\n                version=\"1.1\"\n                viewBox=\"0 0 2560 100\"\n                x=\"0\"\n                y=\"0\"\n              >\n                <polygon\n                  className=\"fill-default\"\n                  points=\"2560 0 2560 100 0 100\"\n                />\n              </svg>\n            </div>\n          </div>\n          {/* Page content */}\n          <Container className=\"mt--8 pb-5\">\n            <Row className=\"justify-content-center\">\n              <Switch>{this.getRoutes(routes)}</Switch>\n            </Row>\n          </Container>\n        </div>\n        <AuthFooter />\n      </>\n    );\n  }\n}\n\nexport default Auth;\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => (\n    <Route\n        {...rest}\n        render={props => localStorage.getItem(\"user-enatega\") ? (\n            <Component {...props} />) : (\n                <Redirect\n                    to={{\n                        pathname: \"/auth/login\",\n                        state: { from: props.location }\n                    }} />\n            )}\n    />\n);\n","\nimport React from 'react';\nimport AdminLayout from \"layouts/Admin.jsx\";\nimport AuthLayout from \"layouts/Auth.jsx\";\nimport { PrivateRoute } from \"./views/PrivateRoute\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nclass App extends React.Component {\n\n    render() {\n\n        return <BrowserRouter>\n            <Switch>\n                <PrivateRoute path=\"/admin\" component={props => <AdminLayout {...props} />} />\n                <Route path=\"/auth\" component={props => <AuthLayout {...props} />} />\n                <Redirect from=\"/\" to=\"/admin/dashboard\" />\n            </Switch>\n        </BrowserRouter>\n    }\n}\nexport default App","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloProvider } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { createUploadLink } from 'apollo-upload-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport * as firebase from \"firebase/app\";\nimport \"firebase/messaging\";\nimport \"assets/vendor/nucleo/css/nucleo.css\";\nimport \"assets/vendor/@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"assets/scss/argon-dashboard-react.scss\";\nimport { getOrders, uploadToken } from \"../src/apollo/server\";\nimport i18n from './i18n'\n\nimport { server_url } from \"./config/config\";\nimport App from './app'\nconst GET_ORDERS = gql`${getOrders}`\nconst UPLOAD_TOKEN = gql`${uploadToken}`\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDCnSTWqbN7NWg9oVDzWz5dvhw2dX-RTb0\",\n  authDomain: \"foodapp-77e88.firebaseapp.com\",\n  databaseURL: \"https://foodapp-77e88.firebaseio.com\",\n  projectId: \"foodapp-77e88\",\n  storageBucket: \"foodapp-77e88.appspot.com\",\n  messagingSenderId: \"678143951107\",\n  appId: \"1:678143951107:web:498eca9a1eca6c0b\"\n};\n\nconst cache = new InMemoryCache()\nconst httpLink = createUploadLink({\n  uri: `${server_url}graphql`,\n})\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache\n});\n\n// // Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nconst messaging = firebase.messaging();\nmessaging.usePublicVapidKey(\"BBFzJyX1yDzhRcnK07MEBYKqI5muEFTwnxPwg94IdPTAbFi1KstIQVeyuvWAo3-5LH_oBsfivWns53iMXEuS6Lg\");\nmessaging.requestPermission().then(function () {\n  messaging.getToken().then(function (currentToken) {\n    if (currentToken) {\n      client.mutate({ mutation: UPLOAD_TOKEN, variables: { pushToken: currentToken } })\n        .then(() => {\n        })\n        .catch(() => {\n        })\n    } else {\n    }\n  }).catch(function () {\n  });\n}).catch(function () {\n});\n\n\n\nmessaging.onMessage(function (payload) {\n  \n  var notificationTitle = 'Nueva Orden';\n  var notificationOptions = {\n    body: payload.data.orderid,\n    icon: 'https://panel.gourmetexpress.co/assets/images/logo.png'\n  };\n\n  let nt = new Notification(notificationTitle, notificationOptions)\n  \n  nt.onclick = function (event) {\n    event.preventDefault(); // prevent the browser from focusing the Notification's tab\n    //window.open('https://enatega.com/dashboard');\n    //window.open('http://192.168.100.28:8000/dashboard');\n    window.open('http://panel.gourmetexpress.co/dashboard');\n    nt.close();\n  }\n\n  // console.log('Message received. ', payload);\n  client.query({ query: GET_ORDERS, fetchPolicy: 'network-only' })\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider >\n  ,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}